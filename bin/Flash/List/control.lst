###############################################################################
#                                                                             #
#                                                       30/Sep/2013  21:46:33 #
# IAR ANSI C/C++ Compiler V6.30.4.23288/W32 EVALUATION for ARM                #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\balance car（9.28高速但出赛道）\src\Sources\C\Compone #
#                    nt_C\control.c                                           #
#    Command line =  "D:\balance car（9.28高速但出赛道）\src\Sources\C\Compon #
#                    ent_C\control.c" -D IAR -D TWR_K60N512 -lCN "D:\balance  #
#                    car（9.28高速但出赛道）\bin\Flash\List\" -lB             #
#                    "D:\balance car（9.28高速但出赛道）\bin\Flash\List\" -o  #
#                    "D:\balance car（9.28高速但出赛道）\bin\Flash\Obj\"      #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=None            #
#                    --dlib_config E:\IAREW6.3\arm\INC\c\DLib_Config_Normal.h #
#                     -I "D:\balance car（9.28高速但出赛道）\src\Sources\H\"  #
#                    -I "D:\balance car（9.28高速但出赛道）\src\Sources\H\Com #
#                    ponent_H\" -I "D:\balance car（9.28高速但出赛道）\src\So #
#                    urces\H\Frame_H\" -Ol --use_c++_inline                   #
#    List file    =  D:\balance car（9.28高速但出赛道）\bin\Flash\List\contro #
#                    l.lst                                                    #
#    Object file  =  D:\balance car（9.28高速但出赛道）\bin\Flash\Obj\control #
#                    .o                                                       #
#                                                                             #
#                                                                             #
###############################################################################

D:\balance car（9.28高速但出赛道）\src\Sources\C\Component_C\control.c
      1          #include "includes.h"
      2          /*
      3          ANGLE_CONTROL_P   ANGLE_CONTROL_D   SPEED_CONTROL_P   SPEED_CONTROL_I   CAR_SPEED_SET   DIR_CONTROL_P   DIR_CONTROL_D
      4          0.19              0.006             0.03              0.00003           10              0.012           0.001
      5          0.163             0.006             0.044             0.00003           20              0.017           0.007
      6          0.169             0.0065            0.049             0.00004           25              0.028           0.0018
      7          */
      8          //----------
      9          #define GRAVITY_OFFSET                      gravity
     10          #define GYROSCOPE_OFFSET                    gyro   
     11          #define GYROSCOPE_OFFSET_DIRECTION          gyro_direction
     12          #define GRAVITY_ANGLE_RATIO                 0.1227
     13          #define GYROSCOPE_ANGLE_RATIO               0.3
     14          #define GRAVITY_ADJUST_TIME_CONSTANT        0.35                                                        
     15          #define GYROSCOPE_ANGLE_SIGMA_FREQUENCY     200
     16          #define CAR_ANGLE_SET                       0
     17          #define CAR_ANGLE_SPEED_SET                 0 
     18          #define ANGLE_CONTROL_P                     0.163//0.171//0.167最好//0.30是上限
     19          #define ANGLE_CONTROL_D                     0.006//0.007是上限
     20          #define ANGLE_CONTROL_OUT_MAX	            MOTOR_OUT_MAX *10
     21          #define ANGLE_CONTROL_OUT_MIN		    MOTOR_OUT_MIN *10
     22          
     23          //------------
     24          #define SPEED_CONTROL_PERIOD                100
     25          #define CAR_SPEED_CONSTANT                  0.02
     26          #define SPEED_CONTROL_P                     0.044//0.053//0.049对应0.167//0.044
     27          #define SPEED_CONTROL_I                     0.00003//0.00003//0.1漂移很明显
     28          #define SPEED_CONTROL_OUT_MAX		    MOTOR_OUT_MAX *10
     29          #define SPEED_CONTROL_OUT_MIN		    MOTOR_OUT_MIN *10
     30          #define CAR_SPEED_SET                       20
     31          #define CAR_SPEED_STEP                      5//每100毫秒增加的速度
     32          
     33          //-----------
     34          #define SI_SetVal()                         gpio_init (PORTE , 0, 1, 1)
     35          #define SI_ClrVal()                         gpio_init (PORTE , 0, 1, 0)
     36          #define CLK_SetVal()                        gpio_init (PORTE , 1, 1, 1)
     37          #define CLK_ClrVal()                        gpio_init (PORTE , 1, 1, 0)
     38          #define SI_SetVal_1()                       gpio_init (PORTC , 11, 1, 1)
     39          #define SI_ClrVal_1()                       gpio_init (PORTC , 11, 1, 0)
     40          #define CLK_SetVal_1()                      gpio_init (PORTC , 10, 1, 1)
     41          #define CLK_ClrVal_1()                      gpio_init (PORTC , 10, 1, 0)
     42          #define DIR_DEFAULT_MIN                     50
     43          #define DIRECTION_CONTROL_PERIOD            10
     44          #define DIR_CONTROL_P                       0.017//0.019
     45          #define DIR_CONTROL_D                       0.0007//0.00095//0.0008//0.0007
     46          #define DIR_DEV                             dev
     47          #define GATE                                30
     48          #define DIRECTION_CONTROL_DEADVALUE         0
     49          #define DIRECTION_CONTROL_OUT_MAX	    MOTOR_OUT_MAX
     50          #define DIRECTION_CONTROL_OUT_MIN	    MOTOR_OUT_MIN
     51          
     52          //------------
     53          #define MOTOR_OUT_DEAD_VAL                  0
     54          #define MOTOR_LEFT_SPEED_POSITIVE	    (g_fLeftMotorOut > 0)
     55          #define MOTOR_RIGHT_SPEED_POSITIVE	    (g_fRightMotorOut > 0)
     56          #define MOTOR_OUT_MAX                       1.0
     57          #define MOTOR_OUT_MIN                      -1.0
     58          //------------------------------------------------------------------------------

   \                                 In section .bss, align 4
     59          int16   g_nInputVoltage[5]={0};
   \                     g_nInputVoltage:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
     60          int32	g_lnInputVoltageSigma[5]={0};    	   
   \                     g_lnInputVoltageSigma:
   \   00000000                      DS8 20
     61          #define VOLTAGE_GRAVITY                     g_nInputVoltage[0]
     62          #define VOLTAGE_GYRO                        g_nInputVoltage[1]
     63          #define VOLTAGE_LEFT                        g_nInputVoltage[2]
     64          #define VOLTAGE_RIGHT                       g_nInputVoltage[3]		
     65          #define DIR_CONTROL_D_VALUE                 g_nInputVoltage[4]
     66          #define key_1                               (((GPIO_PDIR_REG(PTA_BASE_PTR))>>(19))&1)
     67          //------------------------------------------------------------------------------
     68          
     69          //-----------

   \                                 In section .bss, align 2
     70          int16 left_l=0;
   \                     left_l:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     71          int16 right_l=0;
   \                     right_l:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     72          int16 dev=0;
   \                     dev:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     73          int16 gravity,gyro,gyro_direction;
   \                     gravity:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     gyro:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     gyro_direction:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
     74          float g_fGravityAngle=0;
   \                     g_fGravityAngle:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     75          float g_fGyroscopeAngleSpeed =0;
   \                     g_fGyroscopeAngleSpeed:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     76          float g_fCarAngle=0;
   \                     g_fCarAngle:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     77          float g_fGyroscopeAngleIntergral =0;
   \                     g_fGyroscopeAngleIntergral:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     78          float g_fAngleControlOut=0;
   \                     g_fAngleControlOut:
   \   00000000                      DS8 4
     79          
     80          //-----------

   \                                 In section .bss, align 4
     81          float g_fCarSpeed=0;
   \                     g_fCarSpeed:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     82          float g_fCarSpeedstart=0;
   \                     g_fCarSpeedstart:
   \   00000000                      DS8 4

   \                                 In section .bss, align 2
     83          int16 g_nLeftMotorPulse=0;
   \                     g_nLeftMotorPulse:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     84          int16 g_nRightMotorPulse=0;
   \                     g_nRightMotorPulse:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
     85          float g_fSpeedControlIntegral=0;
   \                     g_fSpeedControlIntegral:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     86          float g_fSpeedControlOutOld =0;
   \                     g_fSpeedControlOutOld:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     87          float g_fSpeedControlOutNew =0;
   \                     g_fSpeedControlOutNew:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     88          float g_fSpeedControlOut =0;
   \                     g_fSpeedControlOut:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
     89          uint8 g_nSpeedControlPeriod =0;
   \                     g_nSpeedControlPeriod:
   \   00000000                      DS8 1
     90          
     91          //-----------

   \                                 In section .bss, align 4
     92          float g_fDirectionControlOutOld=0;
   \                     g_fDirectionControlOutOld:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     93          float g_fDirectionControlOutNew =0;
   \                     g_fDirectionControlOutNew:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     94          float g_fDirectionControlOut=0;
   \                     g_fDirectionControlOut:
   \   00000000                      DS8 4

   \                                 In section .bss, align 2
     95          int16 g_nDirectionControlPeriod=0;
   \                     g_nDirectionControlPeriod:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     96          int16 left=0;
   \                     left:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     97          int16 right=0;
   \                     right:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     98          int16 left_c,right_c;
   \                     left_c:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     right_c:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     99          int16 left_OFFSET,right_OFFSET;
   \                     left_OFFSET:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     right_OFFSET:
   \   00000000                      DS8 2
    100          //------------

   \                                 In section .bss, align 4
    101          float g_fLeftMotorOut=0;
   \                     g_fLeftMotorOut:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    102          float g_fRightMotorOut=0;
   \                     g_fRightMotorOut:
   \   00000000                      DS8 4

   \                                 In section .bss, align 2
    103          int16 g_nLeftMotorPulseSigma =0;
   \                     g_nLeftMotorPulseSigma:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
    104          int16 g_nRightMotorPulseSigma=0;
   \                     g_nRightMotorPulseSigma:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
    105          extern int16 OutData[4] = { 0 };//虚拟示波器输出
   \                     OutData:
   \   00000000                      DS8 8
    106          extern uint8 a,b;
    107          extern int16 speedflag;
    108          //----------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    109          void get_ad()
    110          {
   \                     get_ad:
   \   00000000   0xB580             PUSH     {R7,LR}
    111             VOLTAGE_GRAVITY = hw_ad_ave(0,8,12,20);                 //均值滤波得加速度电压信号(PTB0)
   \   00000002   0x2314             MOVS     R3,#+20
   \   00000004   0x220C             MOVS     R2,#+12
   \   00000006   0x2108             MOVS     R1,#+8
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       hw_ad_ave
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable23
   \   00000012   0x8008             STRH     R0,[R1, #+0]
    112             VOLTAGE_GYRO = hw_ad_ave(0,9,12,20);                    //--------得平衡陀螺仪电压信号(PTB1)
   \   00000014   0x2314             MOVS     R3,#+20
   \   00000016   0x220C             MOVS     R2,#+12
   \   00000018   0x2109             MOVS     R1,#+9
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x.... 0x....      BL       hw_ad_ave
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable23
   \   00000024   0x8048             STRH     R0,[R1, #+2]
    113             DIR_CONTROL_D_VALUE = hw_ad_ave(0,12,12,20);            //---------得转向陀螺仪电压信号(PTB2)
   \   00000026   0x2314             MOVS     R3,#+20
   \   00000028   0x220C             MOVS     R2,#+12
   \   0000002A   0x210C             MOVS     R1,#+12
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x.... 0x....      BL       hw_ad_ave
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable23
   \   00000036   0x8108             STRH     R0,[R1, #+8]
    114          }
   \   00000038   0xBD01             POP      {R0,PC}          ;; return
    115          

   \                                 In section .text, align 2, keep-with-next
    116          void GetSamplezhi()
    117          {
   \                     GetSamplezhi:
   \   00000000   0xB580             PUSH     {R7,LR}
    118              g_lnInputVoltageSigma[0]+= hw_ad_ave(0,8,12,20);   
   \   00000002   0x2314             MOVS     R3,#+20
   \   00000004   0x220C             MOVS     R2,#+12
   \   00000006   0x2108             MOVS     R1,#+8
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       hw_ad_ave
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable22
   \   00000012   0x6809             LDR      R1,[R1, #+0]
   \   00000014   0xFA11 0xF080      UXTAH    R0,R1,R0
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable22
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    119              g_lnInputVoltageSigma[1]+= hw_ad_ave(0,9,12,20);
   \   0000001E   0x2314             MOVS     R3,#+20
   \   00000020   0x220C             MOVS     R2,#+12
   \   00000022   0x2109             MOVS     R1,#+9
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      BL       hw_ad_ave
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable22
   \   0000002E   0x6849             LDR      R1,[R1, #+4]
   \   00000030   0xFA11 0xF080      UXTAH    R0,R1,R0
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable22
   \   00000038   0x6048             STR      R0,[R1, #+4]
    120              g_lnInputVoltageSigma[2]+= hw_ad_ave(0,12,12,20);
   \   0000003A   0x2314             MOVS     R3,#+20
   \   0000003C   0x220C             MOVS     R2,#+12
   \   0000003E   0x210C             MOVS     R1,#+12
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x.... 0x....      BL       hw_ad_ave
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable22
   \   0000004A   0x6889             LDR      R1,[R1, #+8]
   \   0000004C   0xFA11 0xF080      UXTAH    R0,R1,R0
   \   00000050   0x.... 0x....      LDR.W    R1,??DataTable22
   \   00000054   0x6088             STR      R0,[R1, #+8]
    121          }
   \   00000056   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    122          void GetOFFSET()
    123          {
    124              gravity=g_lnInputVoltageSigma[0]/1000;
   \                     GetOFFSET:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable22
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF44F 0x717A      MOV      R1,#+1000
   \   0000000A   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable22_1
   \   00000012   0x8008             STRH     R0,[R1, #+0]
    125              gyro =g_lnInputVoltageSigma[1]/1000;
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable22
   \   00000018   0x6840             LDR      R0,[R0, #+4]
   \   0000001A   0xF44F 0x717A      MOV      R1,#+1000
   \   0000001E   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable22_2
   \   00000026   0x8008             STRH     R0,[R1, #+0]
    126              gyro_direction= g_lnInputVoltageSigma[2]/1000;  
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable22
   \   0000002C   0x6880             LDR      R0,[R0, #+8]
   \   0000002E   0xF44F 0x717A      MOV      R1,#+1000
   \   00000032   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable27
   \   0000003A   0x8008             STRH     R0,[R1, #+0]
    127          }
   \   0000003C   0x4770             BX       LR               ;; return
    128          

   \                                 In section .text, align 2, keep-with-next
    129          void GetInputVoltageAverage(int j)
    130          {
    131          	int i;
    132                  for(i = 0; i < 5; i ++) 
   \                     GetInputVoltageAverage:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0xE00F             B.N      ??GetInputVoltageAverage_0
    133          	{
    134          		g_nInputVoltage[i] = (int)(g_lnInputVoltageSigma[i] /j);
   \                     ??GetInputVoltageAverage_1:
   \   00000004   0x.... 0x....      LDR.W    R2,??DataTable22
   \   00000008   0xF852 0x2021      LDR      R2,[R2, R1, LSL #+2]
   \   0000000C   0xFB92 0xF2F0      SDIV     R2,R2,R0
   \   00000010   0x.... 0x....      LDR.W    R3,??DataTable23
   \   00000014   0xF823 0x2011      STRH     R2,[R3, R1, LSL #+1]
    135          		g_lnInputVoltageSigma[i] = 0;
   \   00000018   0x.... 0x....      LDR.W    R2,??DataTable22
   \   0000001C   0x2300             MOVS     R3,#+0
   \   0000001E   0xF842 0x3021      STR      R3,[R2, R1, LSL #+2]
    136          	}
   \   00000022   0x1C49             ADDS     R1,R1,#+1
   \                     ??GetInputVoltageAverage_0:
   \   00000024   0x2905             CMP      R1,#+5
   \   00000026   0xDBED             BLT.N    ??GetInputVoltageAverage_1
    137          }
   \   00000028   0x4770             BX       LR               ;; return
    138          

   \                                 In section .text, align 2, keep-with-next
    139          void AngleCalculate(void)
    140          {
   \                     AngleCalculate:
   \   00000000   0xB500             PUSH     {LR}
    141                float Value;
    142                g_fGravityAngle=(VOLTAGE_GRAVITY-GRAVITY_OFFSET) * GRAVITY_ANGLE_RATIO ;           
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable23
   \   00000006   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable22_1
   \   0000000E   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000012   0x1A40             SUBS     R0,R0,R1
   \   00000014   0x.... 0x....      BL       __aeabi_i2d
   \   00000018   0x.... 0x....      LDR.W    R2,??DataTable23_1  ;; 0x67381d7e
   \   0000001C   0x.... 0x....      LDR.W    R3,??DataTable23_2  ;; 0x3fbf6944
   \   00000020   0x.... 0x....      BL       __aeabi_dmul
   \   00000024   0x.... 0x....      BL       __aeabi_d2f
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable23_3
   \   0000002C   0x6008             STR      R0,[R1, #+0]
    143                g_fGyroscopeAngleSpeed=(VOLTAGE_GYRO-GYROSCOPE_OFFSET) * GYROSCOPE_ANGLE_RATIO;
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable23
   \   00000032   0xF9B0 0x0002      LDRSH    R0,[R0, #+2]
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable22_2
   \   0000003A   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000003E   0x1A40             SUBS     R0,R0,R1
   \   00000040   0x.... 0x....      BL       __aeabi_i2d
   \   00000044   0xF05F 0x3233      MOVS     R2,#+858993459
   \   00000048   0x.... 0x....      LDR.W    R3,??DataTable23_4  ;; 0x3fd33333
   \   0000004C   0x.... 0x....      BL       __aeabi_dmul
   \   00000050   0x.... 0x....      BL       __aeabi_d2f
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable23_5
   \   00000058   0x6008             STR      R0,[R1, #+0]
    144                
    145                g_fCarAngle=g_fGyroscopeAngleIntergral;      
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable23_6
   \   0000005E   0x.... 0x....      LDR.W    R1,??DataTable28
   \   00000062   0x6809             LDR      R1,[R1, #+0]
   \   00000064   0x6001             STR      R1,[R0, #+0]
    146             
    147                Value=(g_fGravityAngle-g_fCarAngle)/GRAVITY_ADJUST_TIME_CONSTANT;
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable23_3
   \   0000006A   0x6800             LDR      R0,[R0, #+0]
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   00000070   0x6809             LDR      R1,[R1, #+0]
   \   00000072   0x.... 0x....      BL       __aeabi_fsub
   \   00000076   0x.... 0x....      BL       __aeabi_f2d
   \   0000007A   0xF05F 0x3266      MOVS     R2,#+1717986918
   \   0000007E   0x.... 0x....      LDR.W    R3,??DataTable23_7  ;; 0x3fd66666
   \   00000082   0x.... 0x....      BL       __aeabi_ddiv
   \   00000086   0x.... 0x....      BL       __aeabi_d2f
    148                
    149                g_fGyroscopeAngleIntergral+=(g_fGyroscopeAngleSpeed+Value)/GYROSCOPE_ANGLE_SIGMA_FREQUENCY;   
   \   0000008A   0x.... 0x....      LDR.W    R1,??DataTable23_5
   \   0000008E   0x6809             LDR      R1,[R1, #+0]
   \   00000090   0x.... 0x....      BL       __aeabi_fadd
   \   00000094   0x.... 0x....      LDR.W    R1,??DataTable24  ;; 0x43480000
   \   00000098   0x.... 0x....      BL       __aeabi_fdiv
   \   0000009C   0x.... 0x....      LDR.W    R1,??DataTable28
   \   000000A0   0x6809             LDR      R1,[R1, #+0]
   \   000000A2   0x.... 0x....      BL       __aeabi_fadd
   \   000000A6   0x.... 0x....      LDR.W    R1,??DataTable28
   \   000000AA   0x6008             STR      R0,[R1, #+0]
    150          }
   \   000000AC   0xBD00             POP      {PC}             ;; return
    151          

   \                                 In section .text, align 2, keep-with-next
    152          void AngleControl(void) 
    153          {
   \                     AngleControl:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
    154                  float fValue;
    155          
    156          	fValue = (CAR_ANGLE_SET - g_fCarAngle) * ANGLE_CONTROL_P +(CAR_ANGLE_SPEED_SET - g_fGyroscopeAngleSpeed) * ANGLE_CONTROL_D;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable23_6
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF090 0x4000      EORS     R0,R0,#0x80000000
   \   0000000C   0x.... 0x....      BL       __aeabi_f2d
   \   00000010   0x.... 0x....      LDR.W    R2,??DataTable24_1  ;; 0x1a9fbe77
   \   00000014   0x.... 0x....      LDR.W    R3,??DataTable24_2  ;; 0x3fc4dd2f
   \   00000018   0x.... 0x....      BL       __aeabi_dmul
   \   0000001C   0x0004             MOVS     R4,R0
   \   0000001E   0x000D             MOVS     R5,R1
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable23_5
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0xF090 0x4000      EORS     R0,R0,#0x80000000
   \   0000002A   0x.... 0x....      BL       __aeabi_f2d
   \   0000002E   0x.... 0x....      LDR.W    R2,??DataTable25  ;; 0xbc6a7efa
   \   00000032   0x.... 0x....      LDR.W    R3,??DataTable25_1  ;; 0x3f789374
   \   00000036   0x.... 0x....      BL       __aeabi_dmul
   \   0000003A   0x0022             MOVS     R2,R4
   \   0000003C   0x002B             MOVS     R3,R5
   \   0000003E   0x.... 0x....      BL       __aeabi_dadd
   \   00000042   0x.... 0x....      BL       __aeabi_d2f
    157                  /*
    158                  if(fValue > ANGLE_CONTROL_OUT_MAX)			
    159                    fValue = ANGLE_CONTROL_OUT_MAX;
    160                  else if(fValue < ANGLE_CONTROL_OUT_MIN)
    161                    fValue = ANGLE_CONTROL_OUT_MIN;
    162                  */
    163          	g_fAngleControlOut = fValue;
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable29
   \   0000004A   0x6008             STR      R0,[R1, #+0]
    164          }
   \   0000004C   0xBD30             POP      {R4,R5,PC}       ;; return
    165          //-----------------------速度控制-------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    166          void GetMotorPulse()
    167          {
   \                     GetMotorPulse:
   \   00000000   0xB500             PUSH     {LR}
    168            uint32  nLeftPulse,nRightPulse; 
    169            nLeftPulse=FTM1_CNT;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable25_2  ;; 0x40039004
   \   00000006   0x6800             LDR      R0,[R0, #+0]
    170            nRightPulse=FTM2_CNT;
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable29_1  ;; 0x400b8004
   \   0000000C   0x6809             LDR      R1,[R1, #+0]
    171            g_nLeftMotorPulse = -(int32)nLeftPulse;       //注意编码器的安装
   \   0000000E   0x.... 0x....      LDR.W    R2,??DataTable25_3
   \   00000012   0x4240             RSBS     R0,R0,#+0
   \   00000014   0x8010             STRH     R0,[R2, #+0]
    172            g_nRightMotorPulse = (int32)nRightPulse;
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable25_4
   \   0000001A   0x8001             STRH     R1,[R0, #+0]
    173            if(!MOTOR_LEFT_SPEED_POSITIVE)		g_nLeftMotorPulse = -g_nLeftMotorPulse;
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable25_5
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000028   0xD307             BCC.N    ??GetMotorPulse_0
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable25_3
   \   0000002E   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000032   0x4240             RSBS     R0,R0,#+0
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable25_3
   \   00000038   0x8008             STRH     R0,[R1, #+0]
    174            g_nLeftMotorPulseSigma +=g_nLeftMotorPulse;
   \                     ??GetMotorPulse_0:
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable25_6
   \   0000003E   0x8800             LDRH     R0,[R0, #+0]
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable25_3
   \   00000044   0x8809             LDRH     R1,[R1, #+0]
   \   00000046   0x1808             ADDS     R0,R1,R0
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable25_6
   \   0000004C   0x8008             STRH     R0,[R1, #+0]
    175            if(!MOTOR_RIGHT_SPEED_POSITIVE)		g_nRightMotorPulse = -g_nRightMotorPulse;
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable26
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0x2100             MOVS     R1,#+0
   \   00000056   0x.... 0x....      BL       __aeabi_cfrcmple
   \   0000005A   0xD307             BCC.N    ??GetMotorPulse_1
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable25_4
   \   00000060   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000064   0x4240             RSBS     R0,R0,#+0
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable25_4
   \   0000006A   0x8008             STRH     R0,[R1, #+0]
    176            g_nRightMotorPulseSigma +=g_nRightMotorPulse;	
   \                     ??GetMotorPulse_1:
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable26_1
   \   00000070   0x8800             LDRH     R0,[R0, #+0]
   \   00000072   0x.... 0x....      LDR.W    R1,??DataTable25_4
   \   00000076   0x8809             LDRH     R1,[R1, #+0]
   \   00000078   0x1808             ADDS     R0,R1,R0
   \   0000007A   0x.... 0x....      LDR.W    R1,??DataTable26_1
   \   0000007E   0x8008             STRH     R0,[R1, #+0]
    177            FTM1_CNT=0; 
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable25_2  ;; 0x40039004
   \   00000084   0x2100             MOVS     R1,#+0
   \   00000086   0x6001             STR      R1,[R0, #+0]
    178            FTM2_CNT=0; 
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable29_1  ;; 0x400b8004
   \   0000008C   0x2100             MOVS     R1,#+0
   \   0000008E   0x6001             STR      R1,[R0, #+0]
    179          }
   \   00000090   0xBD00             POP      {PC}             ;; return
    180          //-------------目前速度控制不明显，尚无处理方案--------------

   \                                 In section .text, align 2, keep-with-next
    181          void SpeedControl(void)
    182          {
   \                     SpeedControl:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
    183          	float fP,fI, fDelta;
    184                  
    185          	g_fCarSpeed = (g_nLeftMotorPulseSigma + g_nRightMotorPulseSigma)/2;//合理吗？有没有更准确的方法？
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable25_6
   \   00000006   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable26_1
   \   0000000E   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000012   0x1808             ADDS     R0,R1,R0
   \   00000014   0x2102             MOVS     R1,#+2
   \   00000016   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000001A   0x.... 0x....      BL       __aeabi_i2f
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable27_1
   \   00000022   0x6008             STR      R0,[R1, #+0]
    186          	g_nLeftMotorPulseSigma = g_nRightMotorPulseSigma = 0;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable26_1
   \   0000002A   0x8008             STRH     R0,[R1, #+0]
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable25_6
   \   00000030   0x8008             STRH     R0,[R1, #+0]
    187          	g_fCarSpeed *= CAR_SPEED_CONSTANT;
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable27_1
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0x.... 0x....      BL       __aeabi_f2d
   \   0000003C   0x.... 0x....      LDR.W    R2,??DataTable27_2  ;; 0x47ae147b
   \   00000040   0x.... 0x....      LDR.W    R3,??DataTable27_3  ;; 0x3f947ae1
   \   00000044   0x.... 0x....      BL       __aeabi_dmul
   \   00000048   0x.... 0x....      BL       __aeabi_d2f
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable27_1
   \   00000050   0x6008             STR      R0,[R1, #+0]
    188          
    189                  if(g_fCarSpeedstart<CAR_SPEED_SET)
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable27_4
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable27_5  ;; 0x41a00000
   \   0000005C   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000060   0xD209             BCS.N    ??SpeedControl_0
    190                  {
    191          	   g_fCarSpeedstart+=CAR_SPEED_STEP;
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable27_4
   \   00000066   0x6801             LDR      R1,[R0, #+0]
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable27_6  ;; 0x40a00000
   \   0000006C   0x.... 0x....      BL       __aeabi_fadd
   \   00000070   0x.... 0x....      LDR.W    R1,??DataTable27_4
   \   00000074   0x6008             STR      R0,[R1, #+0]
    192                  } 
    193                  if(g_fCarSpeedstart>CAR_SPEED_SET)
   \                     ??SpeedControl_0:
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable27_4
   \   0000007A   0x6800             LDR      R0,[R0, #+0]
   \   0000007C   0x.... 0x....      LDR.W    R1,??DataTable27_7  ;; 0x41a00001
   \   00000080   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000084   0xD809             BHI.N    ??SpeedControl_1
    194                  {
    195          	   g_fCarSpeedstart-=CAR_SPEED_STEP;           
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable27_4
   \   0000008A   0x6801             LDR      R1,[R0, #+0]
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable27_8  ;; 0xc0a00000
   \   00000090   0x.... 0x....      BL       __aeabi_fadd
   \   00000094   0x.... 0x....      LDR.W    R1,??DataTable27_4
   \   00000098   0x6008             STR      R0,[R1, #+0]
    196                  } 
    197                  
    198                  if(speedflag<30) //speedflag的递加应该设在中断中
   \                     ??SpeedControl_1:
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable27_9
   \   0000009E   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   000000A2   0x281E             CMP      R0,#+30
   \   000000A4   0xDA09             BGE.N    ??SpeedControl_2
    199                  {
    200                    fDelta = g_fCarSpeedstart - g_fCarSpeed;
   \   000000A6   0x.... 0x....      LDR.W    R0,??DataTable27_4
   \   000000AA   0x6800             LDR      R0,[R0, #+0]
   \   000000AC   0x.... 0x....      LDR.W    R1,??DataTable27_1
   \   000000B0   0x6809             LDR      R1,[R1, #+0]
   \   000000B2   0x.... 0x....      BL       __aeabi_fsub
   \   000000B6   0x0005             MOVS     R5,R0
   \   000000B8   0xE007             B.N      ??SpeedControl_3
    201                  }
    202                  else	
    203                  {
    204                    fDelta = CAR_SPEED_SET - g_fCarSpeed;
   \                     ??SpeedControl_2:
   \   000000BA   0x.... 0x....      LDR.W    R0,??DataTable27_5  ;; 0x41a00000
   \   000000BE   0x.... 0x....      LDR.W    R1,??DataTable27_1
   \   000000C2   0x6809             LDR      R1,[R1, #+0]
   \   000000C4   0x.... 0x....      BL       __aeabi_fsub
   \   000000C8   0x0005             MOVS     R5,R0
    205                  }
    206                  
    207                  fDelta = g_fCarSpeedstart - g_fCarSpeed;
   \                     ??SpeedControl_3:
   \   000000CA   0x.... 0x....      LDR.W    R0,??DataTable27_4
   \   000000CE   0x6800             LDR      R0,[R0, #+0]
   \   000000D0   0x.... 0x....      LDR.W    R1,??DataTable27_1
   \   000000D4   0x6809             LDR      R1,[R1, #+0]
   \   000000D6   0x.... 0x....      BL       __aeabi_fsub
   \   000000DA   0x0005             MOVS     R5,R0
    208          	fP = fDelta * SPEED_CONTROL_P;
   \   000000DC   0x0028             MOVS     R0,R5
   \   000000DE   0x.... 0x....      BL       __aeabi_f2d
   \   000000E2   0x.... 0x....      LDR.W    R2,??DataTable27_10  ;; 0x20c49ba
   \   000000E6   0x.... 0x....      LDR.W    R3,??DataTable27_11  ;; 0x3fa6872b
   \   000000EA   0x.... 0x....      BL       __aeabi_dmul
   \   000000EE   0x.... 0x....      BL       __aeabi_d2f
   \   000000F2   0x0004             MOVS     R4,R0
    209          	fI = fDelta * SPEED_CONTROL_I;
   \   000000F4   0x0028             MOVS     R0,R5
   \   000000F6   0x.... 0x....      BL       __aeabi_f2d
   \   000000FA   0x.... 0x....      LDR.W    R2,??DataTable27_12  ;; 0x4d551d69
   \   000000FE   0x.... 0x....      LDR.W    R3,??DataTable27_13  ;; 0x3eff7510
   \   00000102   0x.... 0x....      BL       __aeabi_dmul
   \   00000106   0x.... 0x....      BL       __aeabi_d2f
    210          	g_fSpeedControlIntegral += fI;		
   \   0000010A   0x.... 0x....      LDR.W    R1,??DataTable28_1
   \   0000010E   0x6809             LDR      R1,[R1, #+0]
   \   00000110   0x.... 0x....      BL       __aeabi_fadd
   \   00000114   0x.... 0x....      LDR.W    R1,??DataTable28_1
   \   00000118   0x6008             STR      R0,[R1, #+0]
    211          	if(g_fSpeedControlIntegral > SPEED_CONTROL_OUT_MAX)	
   \   0000011A   0x.... 0x....      LDR.W    R0,??DataTable28_1
   \   0000011E   0x6800             LDR      R0,[R0, #+0]
   \   00000120   0x.... 0x....      LDR.W    R1,??DataTable28_2  ;; 0x41200001
   \   00000124   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000128   0xD804             BHI.N    ??SpeedControl_4
    212          		g_fSpeedControlIntegral = SPEED_CONTROL_OUT_MAX;
   \   0000012A   0x.... 0x....      LDR.W    R0,??DataTable28_1
   \   0000012E   0x.... 0x....      LDR.W    R1,??DataTable29_2  ;; 0x41200000
   \   00000132   0x6001             STR      R1,[R0, #+0]
    213          	if(g_fSpeedControlIntegral < SPEED_CONTROL_OUT_MIN)  	
   \                     ??SpeedControl_4:
   \   00000134   0x.... 0x....      LDR.W    R0,??DataTable28_1
   \   00000138   0x6800             LDR      R0,[R0, #+0]
   \   0000013A   0x.... 0x....      LDR.W    R1,??DataTable29_3  ;; 0xc1200000
   \   0000013E   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000142   0xD204             BCS.N    ??SpeedControl_5
    214          		g_fSpeedControlIntegral = SPEED_CONTROL_OUT_MIN;
   \   00000144   0x.... 0x....      LDR.W    R0,??DataTable28_1
   \   00000148   0x.... 0x....      LDR.W    R1,??DataTable29_3  ;; 0xc1200000
   \   0000014C   0x6001             STR      R1,[R0, #+0]
    215          	
    216          	g_fSpeedControlOutOld = g_fSpeedControlOutNew;
   \                     ??SpeedControl_5:
   \   0000014E   0x.... 0x....      LDR.W    R0,??DataTable29_4
   \   00000152   0x.... 0x....      LDR.W    R1,??DataTable29_5
   \   00000156   0x6809             LDR      R1,[R1, #+0]
   \   00000158   0x6001             STR      R1,[R0, #+0]
    217          
    218          	g_fSpeedControlOutNew = fP + g_fSpeedControlIntegral;
   \   0000015A   0x.... 0x....      LDR.W    R0,??DataTable28_1
   \   0000015E   0x6800             LDR      R0,[R0, #+0]
   \   00000160   0x0021             MOVS     R1,R4
   \   00000162   0x.... 0x....      BL       __aeabi_fadd
   \   00000166   0x.... 0x....      LDR.W    R1,??DataTable29_5
   \   0000016A   0x6008             STR      R0,[R1, #+0]
    219          }
   \   0000016C   0xBD30             POP      {R4,R5,PC}       ;; return
    220          

   \                                 In section .text, align 2, keep-with-next
    221          void SpeedControlOutput(void) 
    222          {
   \                     SpeedControlOutput:
   \   00000000   0xB510             PUSH     {R4,LR}
    223          	float fValue3;
    224          	fValue3 = g_fSpeedControlOutNew - g_fSpeedControlOutOld;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable29_5
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable29_4
   \   0000000C   0x6809             LDR      R1,[R1, #+0]
   \   0000000E   0x.... 0x....      BL       __aeabi_fsub
   \   00000012   0x0004             MOVS     R4,R0
    225          	g_fSpeedControlOut = fValue3 * (g_nSpeedControlPeriod + 1) / SPEED_CONTROL_PERIOD + g_fSpeedControlOutOld;	
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable29_6
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
   \   0000001C   0x.... 0x....      BL       __aeabi_i2f
   \   00000020   0x0021             MOVS     R1,R4
   \   00000022   0x.... 0x....      BL       __aeabi_fmul
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable30  ;; 0x42c80000
   \   0000002A   0x.... 0x....      BL       __aeabi_fdiv
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable29_4
   \   00000032   0x6809             LDR      R1,[R1, #+0]
   \   00000034   0x.... 0x....      BL       __aeabi_fadd
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable33
   \   0000003C   0x6008             STR      R0,[R1, #+0]
    226          }
   \   0000003E   0xBD10             POP      {R4,PC}          ;; return
    227          
    228          
    229          //-------------------------------------方向控制-------------------------------

   \                                 In section .text, align 2, keep-with-next
    230          void CCD_init(void)
    231          {
   \                     CCD_init:
   \   00000000   0xB580             PUSH     {R7,LR}
    232            gpio_init (PORTE , 0, 1, 1);
   \   00000002   0x2301             MOVS     R3,#+1
   \   00000004   0x2201             MOVS     R2,#+1
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable30_1  ;; 0x400ff100
   \   0000000C   0x.... 0x....      BL       gpio_init
    233            gpio_init (PORTE , 1, 1, 1);
   \   00000010   0x2301             MOVS     R3,#+1
   \   00000012   0x2201             MOVS     R2,#+1
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable30_1  ;; 0x400ff100
   \   0000001A   0x.... 0x....      BL       gpio_init
    234            gpio_init (PORTC , 10, 1, 1);
   \   0000001E   0x2301             MOVS     R3,#+1
   \   00000020   0x2201             MOVS     R2,#+1
   \   00000022   0x210A             MOVS     R1,#+10
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable33_1  ;; 0x400ff080
   \   00000028   0x.... 0x....      BL       gpio_init
    235            gpio_init (PORTC , 11, 1, 1);
   \   0000002C   0x2301             MOVS     R3,#+1
   \   0000002E   0x2201             MOVS     R2,#+1
   \   00000030   0x210B             MOVS     R1,#+11
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable33_1  ;; 0x400ff080
   \   00000036   0x.... 0x....      BL       gpio_init
    236            hw_adc_init(1);
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0x.... 0x....      BL       hw_adc_init
    237          }
   \   00000040   0xBD01             POP      {R0,PC}          ;; return
    238          

   \                                 In section .text, align 2, keep-with-next
    239          void button_init()
    240          {
   \                     button_init:
   \   00000000   0xB580             PUSH     {R7,LR}
    241             SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;    //打开PORTD端口的时钟
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable30_2  ;; 0x40048038
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF44F 0x7100      MOV      R1,#+512
   \   0000000C   0x4308             ORRS     R0,R1,R0
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable30_2  ;; 0x40048038
   \   00000012   0x6008             STR      R0,[R1, #+0]
    242             PORTA_PCR19=(0|PORT_PCR_MUX(1));
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable30_3  ;; 0x4004904c
   \   00000018   0xF44F 0x7180      MOV      R1,#+256
   \   0000001C   0x6001             STR      R1,[R0, #+0]
    243             gpio_init (PORTA,19, 0,0);
   \   0000001E   0x2300             MOVS     R3,#+0
   \   00000020   0x2200             MOVS     R2,#+0
   \   00000022   0x2113             MOVS     R1,#+19
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable34  ;; 0x400ff000
   \   00000028   0x.... 0x....      BL       gpio_init
    244          }
   \   0000002C   0xBD01             POP      {R0,PC}          ;; return
    245          

   \                                 In section .text, align 2, keep-with-next
    246          void ADC0_stop(void)
    247          {
   \                     ADC0_stop:
   \   00000000   0xB580             PUSH     {R7,LR}
    248              hw_adc_convertstop(0,8);
   \   00000002   0x2108             MOVS     R1,#+8
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x.... 0x....      BL       hw_adc_convertstop
    249              hw_adc_convertstop(0,9);
   \   0000000A   0x2109             MOVS     R1,#+9
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x.... 0x....      BL       hw_adc_convertstop
    250              hw_adc_convertstop(0,12);
   \   00000012   0x210C             MOVS     R1,#+12
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      BL       hw_adc_convertstop
    251          }
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return
    252          

   \                                 In section .text, align 2, keep-with-next
    253          void ADC0_start(void)
    254          {
   \                     ADC0_start:
   \   00000000   0xB580             PUSH     {R7,LR}
    255              hw_adc_convertstart(0,8,12);
   \   00000002   0x220C             MOVS     R2,#+12
   \   00000004   0x2108             MOVS     R1,#+8
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       hw_adc_convertstart
    256              hw_adc_convertstart(0,9,12);
   \   0000000C   0x220C             MOVS     R2,#+12
   \   0000000E   0x2109             MOVS     R1,#+9
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x.... 0x....      BL       hw_adc_convertstart
    257              hw_adc_convertstart(0,12,12);
   \   00000016   0x220C             MOVS     R2,#+12
   \   00000018   0x210C             MOVS     R1,#+12
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x.... 0x....      BL       hw_adc_convertstart
    258          }
   \   00000020   0xBD01             POP      {R0,PC}          ;; return
    259          
    260          

   \                                 In section .text, align 2, keep-with-next
    261          void StartIntegration(void) 
    262          {
   \                     StartIntegration:
   \   00000000   0xB510             PUSH     {R4,LR}
    263              unsigned char i;
    264          
    265              SI_SetVal();            /* SI  = 1 */   
   \   00000002   0x2301             MOVS     R3,#+1
   \   00000004   0x2201             MOVS     R2,#+1
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable30_1  ;; 0x400ff100
   \   0000000C   0x.... 0x....      BL       gpio_init
    266              SamplingDelay();
   \   00000010   0x.... 0x....      BL       SamplingDelay
    267              CLK_SetVal();           /* CLK = 1 */  
   \   00000014   0x2301             MOVS     R3,#+1
   \   00000016   0x2201             MOVS     R2,#+1
   \   00000018   0x2101             MOVS     R1,#+1
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable30_1  ;; 0x400ff100
   \   0000001E   0x.... 0x....      BL       gpio_init
    268              SamplingDelay();
   \   00000022   0x.... 0x....      BL       SamplingDelay
    269              SI_ClrVal();            /* SI  = 0 */   
   \   00000026   0x2300             MOVS     R3,#+0
   \   00000028   0x2201             MOVS     R2,#+1
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable30_1  ;; 0x400ff100
   \   00000030   0x.... 0x....      BL       gpio_init
    270              SamplingDelay();
   \   00000034   0x.... 0x....      BL       SamplingDelay
    271              CLK_ClrVal();           /* CLK = 0 */
   \   00000038   0x2300             MOVS     R3,#+0
   \   0000003A   0x2201             MOVS     R2,#+1
   \   0000003C   0x2101             MOVS     R1,#+1
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable30_1  ;; 0x400ff100
   \   00000042   0x.... 0x....      BL       gpio_init
    272             
    273              for(i=0; i<127; i++) 
   \   00000046   0x2400             MOVS     R4,#+0
   \   00000048   0xE016             B.N      ??StartIntegration_0
    274              {
    275                  SamplingDelay();
   \                     ??StartIntegration_1:
   \   0000004A   0x.... 0x....      BL       SamplingDelay
    276                  SamplingDelay();
   \   0000004E   0x.... 0x....      BL       SamplingDelay
    277                  CLK_SetVal();       /* CLK = 1 */        
   \   00000052   0x2301             MOVS     R3,#+1
   \   00000054   0x2201             MOVS     R2,#+1
   \   00000056   0x2101             MOVS     R1,#+1
   \   00000058   0x.... 0x....      LDR.W    R0,??DataTable30_1  ;; 0x400ff100
   \   0000005C   0x.... 0x....      BL       gpio_init
    278                  SamplingDelay();
   \   00000060   0x.... 0x....      BL       SamplingDelay
    279                  SamplingDelay();
   \   00000064   0x.... 0x....      BL       SamplingDelay
    280                  CLK_ClrVal();       /* CLK = 0 */       
   \   00000068   0x2300             MOVS     R3,#+0
   \   0000006A   0x2201             MOVS     R2,#+1
   \   0000006C   0x2101             MOVS     R1,#+1
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable30_1  ;; 0x400ff100
   \   00000072   0x.... 0x....      BL       gpio_init
    281              }
   \   00000076   0x1C64             ADDS     R4,R4,#+1
   \                     ??StartIntegration_0:
   \   00000078   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000007A   0x2C7F             CMP      R4,#+127
   \   0000007C   0xD3E5             BCC.N    ??StartIntegration_1
    282              SamplingDelay();
   \   0000007E   0x.... 0x....      BL       SamplingDelay
    283              SamplingDelay();
   \   00000082   0x.... 0x....      BL       SamplingDelay
    284              CLK_SetVal();           /* CLK = 1 */
   \   00000086   0x2301             MOVS     R3,#+1
   \   00000088   0x2201             MOVS     R2,#+1
   \   0000008A   0x2101             MOVS     R1,#+1
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable30_1  ;; 0x400ff100
   \   00000090   0x.... 0x....      BL       gpio_init
    285              SamplingDelay();
   \   00000094   0x.... 0x....      BL       SamplingDelay
    286              SamplingDelay();
   \   00000098   0x.... 0x....      BL       SamplingDelay
    287              CLK_ClrVal();           /* CLK = 0 */
   \   0000009C   0x2300             MOVS     R3,#+0
   \   0000009E   0x2201             MOVS     R2,#+1
   \   000000A0   0x2101             MOVS     R1,#+1
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable30_1  ;; 0x400ff100
   \   000000A6   0x.... 0x....      BL       gpio_init
    288            
    289          }
   \   000000AA   0xBD10             POP      {R4,PC}          ;; return
    290          

   \                                 In section .text, align 2, keep-with-next
    291          void StartIntegrationRight(void) 
    292          {
   \                     StartIntegrationRight:
   \   00000000   0xB510             PUSH     {R4,LR}
    293              unsigned char i;
    294          
    295              //SI_SetVal();            /* SI  = 1 */
    296              SI_SetVal_1();      
   \   00000002   0x2301             MOVS     R3,#+1
   \   00000004   0x2201             MOVS     R2,#+1
   \   00000006   0x210B             MOVS     R1,#+11
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable33_1  ;; 0x400ff080
   \   0000000C   0x.... 0x....      BL       gpio_init
    297              SamplingDelay();
   \   00000010   0x.... 0x....      BL       SamplingDelay
    298              //CLK_SetVal();           /* CLK = 1 */
    299              CLK_SetVal_1();  
   \   00000014   0x2301             MOVS     R3,#+1
   \   00000016   0x2201             MOVS     R2,#+1
   \   00000018   0x210A             MOVS     R1,#+10
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable33_1  ;; 0x400ff080
   \   0000001E   0x.... 0x....      BL       gpio_init
    300              SamplingDelay();
   \   00000022   0x.... 0x....      BL       SamplingDelay
    301              //SI_ClrVal();            /* SI  = 0 */
    302              SI_ClrVal_1(); 
   \   00000026   0x2300             MOVS     R3,#+0
   \   00000028   0x2201             MOVS     R2,#+1
   \   0000002A   0x210B             MOVS     R1,#+11
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable33_1  ;; 0x400ff080
   \   00000030   0x.... 0x....      BL       gpio_init
    303              SamplingDelay();
   \   00000034   0x.... 0x....      BL       SamplingDelay
    304              //CLK_ClrVal();           /* CLK = 0 */
    305              CLK_ClrVal_1(); 
   \   00000038   0x2300             MOVS     R3,#+0
   \   0000003A   0x2201             MOVS     R2,#+1
   \   0000003C   0x210A             MOVS     R1,#+10
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable33_1  ;; 0x400ff080
   \   00000042   0x.... 0x....      BL       gpio_init
    306          
    307              for(i=0; i<127; i++) 
   \   00000046   0x2400             MOVS     R4,#+0
   \   00000048   0xE016             B.N      ??StartIntegrationRight_0
    308              {
    309                  SamplingDelay();
   \                     ??StartIntegrationRight_1:
   \   0000004A   0x.... 0x....      BL       SamplingDelay
    310                  SamplingDelay();
   \   0000004E   0x.... 0x....      BL       SamplingDelay
    311                  //CLK_SetVal();       /* CLK = 1 */
    312                  CLK_SetVal_1();  
   \   00000052   0x2301             MOVS     R3,#+1
   \   00000054   0x2201             MOVS     R2,#+1
   \   00000056   0x210A             MOVS     R1,#+10
   \   00000058   0x.... 0x....      LDR.W    R0,??DataTable33_1  ;; 0x400ff080
   \   0000005C   0x.... 0x....      BL       gpio_init
    313                  SamplingDelay();
   \   00000060   0x.... 0x....      BL       SamplingDelay
    314                  SamplingDelay();
   \   00000064   0x.... 0x....      BL       SamplingDelay
    315                  //CLK_ClrVal();       /* CLK = 0 */
    316                  CLK_ClrVal_1();  
   \   00000068   0x2300             MOVS     R3,#+0
   \   0000006A   0x2201             MOVS     R2,#+1
   \   0000006C   0x210A             MOVS     R1,#+10
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable33_1  ;; 0x400ff080
   \   00000072   0x.... 0x....      BL       gpio_init
    317              }
   \   00000076   0x1C64             ADDS     R4,R4,#+1
   \                     ??StartIntegrationRight_0:
   \   00000078   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000007A   0x2C7F             CMP      R4,#+127
   \   0000007C   0xD3E5             BCC.N    ??StartIntegrationRight_1
    318              SamplingDelay();
   \   0000007E   0x.... 0x....      BL       SamplingDelay
    319              SamplingDelay();
   \   00000082   0x.... 0x....      BL       SamplingDelay
    320              //CLK_SetVal();           /* CLK = 1 */
    321              CLK_SetVal_1();  
   \   00000086   0x2301             MOVS     R3,#+1
   \   00000088   0x2201             MOVS     R2,#+1
   \   0000008A   0x210A             MOVS     R1,#+10
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable33_1  ;; 0x400ff080
   \   00000090   0x.... 0x....      BL       gpio_init
    322              SamplingDelay();
   \   00000094   0x.... 0x....      BL       SamplingDelay
    323              SamplingDelay();
   \   00000098   0x.... 0x....      BL       SamplingDelay
    324              //CLK_ClrVal();           /* CLK = 0 */
    325              CLK_ClrVal_1();   
   \   0000009C   0x2300             MOVS     R3,#+0
   \   0000009E   0x2201             MOVS     R2,#+1
   \   000000A0   0x210A             MOVS     R1,#+10
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable33_1  ;; 0x400ff080
   \   000000A6   0x.... 0x....      BL       gpio_init
    326          }
   \   000000AA   0xBD10             POP      {R4,PC}          ;; return
    327          
    328          
    329          

   \                                 In section .text, align 2, keep-with-next
    330          void ImageCapture(uint8 * ImageData)       
    331          {
   \                     ImageCapture:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    332              unsigned char i;
    333              extern uint8 AtemP;
    334          
    335              SI_SetVal();            /* SI  = 1 */
   \   00000004   0x2301             MOVS     R3,#+1
   \   00000006   0x2201             MOVS     R2,#+1
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable30_1  ;; 0x400ff100
   \   0000000E   0x.... 0x....      BL       gpio_init
    336              SamplingDelay();
   \   00000012   0x.... 0x....      BL       SamplingDelay
    337              CLK_SetVal();           /* CLK = 1 */  
   \   00000016   0x2301             MOVS     R3,#+1
   \   00000018   0x2201             MOVS     R2,#+1
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable30_1  ;; 0x400ff100
   \   00000020   0x.... 0x....      BL       gpio_init
    338              SamplingDelay();
   \   00000024   0x.... 0x....      BL       SamplingDelay
    339              SI_ClrVal();            /* SI  = 0 */
   \   00000028   0x2300             MOVS     R3,#+0
   \   0000002A   0x2201             MOVS     R2,#+1
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable30_1  ;; 0x400ff100
   \   00000032   0x.... 0x....      BL       gpio_init
    340              SamplingDelay();
   \   00000036   0x.... 0x....      BL       SamplingDelay
    341             
    342          //Delay 10us for sample the first pixel
    343              for(i = 0; i < 50; i++) 
   \   0000003A   0x2500             MOVS     R5,#+0
   \   0000003C   0xE002             B.N      ??ImageCapture_0
    344              {
    345                SamplingDelay();  //200ns
   \                     ??ImageCapture_1:
   \   0000003E   0x.... 0x....      BL       SamplingDelay
    346              }
   \   00000042   0x1C6D             ADDS     R5,R5,#+1
   \                     ??ImageCapture_0:
   \   00000044   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000046   0x2D32             CMP      R5,#+50
   \   00000048   0xD3F9             BCC.N    ??ImageCapture_1
    347          
    348          
    349          //Sampling Pixel 1
    350              *ImageData =  hw_ad_once(1, 6, 8);
   \   0000004A   0x2208             MOVS     R2,#+8
   \   0000004C   0x2106             MOVS     R1,#+6
   \   0000004E   0x2001             MOVS     R0,#+1
   \   00000050   0x.... 0x....      BL       hw_ad_once
   \   00000054   0x7020             STRB     R0,[R4, #+0]
    351              ImageData ++ ;
   \   00000056   0x1C64             ADDS     R4,R4,#+1
    352              CLK_ClrVal();           /* CLK = 0 */
   \   00000058   0x2300             MOVS     R3,#+0
   \   0000005A   0x2201             MOVS     R2,#+1
   \   0000005C   0x2101             MOVS     R1,#+1
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable30_1  ;; 0x400ff100
   \   00000062   0x.... 0x....      BL       gpio_init
    353          
    354              for(i=0; i<127; i++) 
   \   00000066   0x2500             MOVS     R5,#+0
   \   00000068   0xE01D             B.N      ??ImageCapture_2
    355              {
    356                  SamplingDelay();
   \                     ??ImageCapture_3:
   \   0000006A   0x.... 0x....      BL       SamplingDelay
    357                  SamplingDelay();
   \   0000006E   0x.... 0x....      BL       SamplingDelay
    358                  CLK_SetVal();       /* CLK = 1 */
   \   00000072   0x2301             MOVS     R3,#+1
   \   00000074   0x2201             MOVS     R2,#+1
   \   00000076   0x2101             MOVS     R1,#+1
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable30_1  ;; 0x400ff100
   \   0000007C   0x.... 0x....      BL       gpio_init
    359                  SamplingDelay();
   \   00000080   0x.... 0x....      BL       SamplingDelay
    360                  SamplingDelay();
   \   00000084   0x.... 0x....      BL       SamplingDelay
    361                 
    362                  //Sampling Pixel 2~128
    363                  *ImageData = hw_ad_once(1, 6, 8);
   \   00000088   0x2208             MOVS     R2,#+8
   \   0000008A   0x2106             MOVS     R1,#+6
   \   0000008C   0x2001             MOVS     R0,#+1
   \   0000008E   0x.... 0x....      BL       hw_ad_once
   \   00000092   0x7020             STRB     R0,[R4, #+0]
    364                  ImageData ++;
   \   00000094   0x1C64             ADDS     R4,R4,#+1
    365                  CLK_ClrVal();       /* CLK = 0 */
   \   00000096   0x2300             MOVS     R3,#+0
   \   00000098   0x2201             MOVS     R2,#+1
   \   0000009A   0x2101             MOVS     R1,#+1
   \   0000009C   0x.... 0x....      LDR.W    R0,??DataTable30_1  ;; 0x400ff100
   \   000000A0   0x.... 0x....      BL       gpio_init
    366              }
   \   000000A4   0x1C6D             ADDS     R5,R5,#+1
   \                     ??ImageCapture_2:
   \   000000A6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000A8   0x2D7F             CMP      R5,#+127
   \   000000AA   0xD3DE             BCC.N    ??ImageCapture_3
    367              SamplingDelay();
   \   000000AC   0x.... 0x....      BL       SamplingDelay
    368              SamplingDelay();
   \   000000B0   0x.... 0x....      BL       SamplingDelay
    369              CLK_SetVal();           /* CLK = 1 */
   \   000000B4   0x2301             MOVS     R3,#+1
   \   000000B6   0x2201             MOVS     R2,#+1
   \   000000B8   0x2101             MOVS     R1,#+1
   \   000000BA   0x.... 0x....      LDR.W    R0,??DataTable30_1  ;; 0x400ff100
   \   000000BE   0x.... 0x....      BL       gpio_init
    370              SamplingDelay();
   \   000000C2   0x.... 0x....      BL       SamplingDelay
    371              SamplingDelay();
   \   000000C6   0x.... 0x....      BL       SamplingDelay
    372              CLK_ClrVal();           /* CLK = 0 */
   \   000000CA   0x2300             MOVS     R3,#+0
   \   000000CC   0x2201             MOVS     R2,#+1
   \   000000CE   0x2101             MOVS     R1,#+1
   \   000000D0   0x.... 0x....      LDR.W    R0,??DataTable30_1  ;; 0x400ff100
   \   000000D4   0x.... 0x....      BL       gpio_init
    373          }
   \   000000D8   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    374          

   \                                 In section .text, align 2, keep-with-next
    375          void ImageCapture_1(uint8 * ImageData_1)         
    376          {
   \                     ImageCapture_1:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    377              unsigned char i;
    378              extern uint8 AtemP;
    379          
    380              //SI_SetVal();            /* SI  = 1 */
    381              SI_SetVal_1();
   \   00000004   0x2301             MOVS     R3,#+1
   \   00000006   0x2201             MOVS     R2,#+1
   \   00000008   0x210B             MOVS     R1,#+11
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable33_1  ;; 0x400ff080
   \   0000000E   0x.... 0x....      BL       gpio_init
    382              SamplingDelay();
   \   00000012   0x.... 0x....      BL       SamplingDelay
    383              //CLK_SetVal();           /* CLK = 1 */
    384              CLK_SetVal_1();    
   \   00000016   0x2301             MOVS     R3,#+1
   \   00000018   0x2201             MOVS     R2,#+1
   \   0000001A   0x210A             MOVS     R1,#+10
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable33_1  ;; 0x400ff080
   \   00000020   0x.... 0x....      BL       gpio_init
    385              SamplingDelay();
   \   00000024   0x.... 0x....      BL       SamplingDelay
    386              //SI_ClrVal();            /* SI  = 0 */
    387              SI_ClrVal_1(); 
   \   00000028   0x2300             MOVS     R3,#+0
   \   0000002A   0x2201             MOVS     R2,#+1
   \   0000002C   0x210B             MOVS     R1,#+11
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable33_1  ;; 0x400ff080
   \   00000032   0x.... 0x....      BL       gpio_init
    388              SamplingDelay();
   \   00000036   0x.... 0x....      BL       SamplingDelay
    389          
    390             
    391          //Delay 10us for sample the first pixel
    392              for(i = 0; i < 50; i++) 
   \   0000003A   0x2500             MOVS     R5,#+0
   \   0000003C   0xE002             B.N      ??ImageCapture_1_0
    393              {
    394                SamplingDelay();  //200ns
   \                     ??ImageCapture_1_1:
   \   0000003E   0x.... 0x....      BL       SamplingDelay
    395              }
   \   00000042   0x1C6D             ADDS     R5,R5,#+1
   \                     ??ImageCapture_1_0:
   \   00000044   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000046   0x2D32             CMP      R5,#+50
   \   00000048   0xD3F9             BCC.N    ??ImageCapture_1_1
    396          
    397          
    398          //Sampling Pixel 1
    399              //*ImageData =  hw_ad_once(1, 6, 8);
    400              //ImageData ++ ;
    401              *ImageData_1= hw_ad_once(1, 7, 8);              
   \   0000004A   0x2208             MOVS     R2,#+8
   \   0000004C   0x2107             MOVS     R1,#+7
   \   0000004E   0x2001             MOVS     R0,#+1
   \   00000050   0x.... 0x....      BL       hw_ad_once
   \   00000054   0x7020             STRB     R0,[R4, #+0]
    402              ImageData_1 ++;
   \   00000056   0x1C64             ADDS     R4,R4,#+1
    403              //CLK_ClrVal();           /* CLK = 0 */
    404              CLK_ClrVal_1(); 
   \   00000058   0x2300             MOVS     R3,#+0
   \   0000005A   0x2201             MOVS     R2,#+1
   \   0000005C   0x210A             MOVS     R1,#+10
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable33_1  ;; 0x400ff080
   \   00000062   0x.... 0x....      BL       gpio_init
    405          
    406              for(i=0; i<127; i++) 
   \   00000066   0x2500             MOVS     R5,#+0
   \   00000068   0xE01D             B.N      ??ImageCapture_1_2
    407              {
    408                  SamplingDelay();
   \                     ??ImageCapture_1_3:
   \   0000006A   0x.... 0x....      BL       SamplingDelay
    409                  SamplingDelay();
   \   0000006E   0x.... 0x....      BL       SamplingDelay
    410                  //CLK_SetVal();       /* CLK = 1 */
    411                  CLK_SetVal_1(); 
   \   00000072   0x2301             MOVS     R3,#+1
   \   00000074   0x2201             MOVS     R2,#+1
   \   00000076   0x210A             MOVS     R1,#+10
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable33_1  ;; 0x400ff080
   \   0000007C   0x.... 0x....      BL       gpio_init
    412                  SamplingDelay();
   \   00000080   0x.... 0x....      BL       SamplingDelay
    413                  SamplingDelay();
   \   00000084   0x.... 0x....      BL       SamplingDelay
    414                  //Sampling Pixel 2~128
    415          
    416                  //*ImageData = hw_ad_once(1, 6, 8);
    417                  //ImageData ++;
    418                  *ImageData_1= hw_ad_once(1, 7, 8);  
   \   00000088   0x2208             MOVS     R2,#+8
   \   0000008A   0x2107             MOVS     R1,#+7
   \   0000008C   0x2001             MOVS     R0,#+1
   \   0000008E   0x.... 0x....      BL       hw_ad_once
   \   00000092   0x7020             STRB     R0,[R4, #+0]
    419                  ImageData_1++;
   \   00000094   0x1C64             ADDS     R4,R4,#+1
    420          
    421                  //CLK_ClrVal();       /* CLK = 0 */
    422                  CLK_ClrVal_1(); 
   \   00000096   0x2300             MOVS     R3,#+0
   \   00000098   0x2201             MOVS     R2,#+1
   \   0000009A   0x210A             MOVS     R1,#+10
   \   0000009C   0x.... 0x....      LDR.W    R0,??DataTable33_1  ;; 0x400ff080
   \   000000A0   0x.... 0x....      BL       gpio_init
    423              }
   \   000000A4   0x1C6D             ADDS     R5,R5,#+1
   \                     ??ImageCapture_1_2:
   \   000000A6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000A8   0x2D7F             CMP      R5,#+127
   \   000000AA   0xD3DE             BCC.N    ??ImageCapture_1_3
    424              SamplingDelay();
   \   000000AC   0x.... 0x....      BL       SamplingDelay
    425              SamplingDelay();
   \   000000B0   0x.... 0x....      BL       SamplingDelay
    426              //CLK_SetVal();           /* CLK = 1 */
    427              CLK_SetVal_1();    
   \   000000B4   0x2301             MOVS     R3,#+1
   \   000000B6   0x2201             MOVS     R2,#+1
   \   000000B8   0x210A             MOVS     R1,#+10
   \   000000BA   0x.... 0x....      LDR.W    R0,??DataTable33_1  ;; 0x400ff080
   \   000000BE   0x.... 0x....      BL       gpio_init
    428              SamplingDelay();
   \   000000C2   0x.... 0x....      BL       SamplingDelay
    429              SamplingDelay();
   \   000000C6   0x.... 0x....      BL       SamplingDelay
    430              //CLK_ClrVal();           /* CLK = 0 */
    431              CLK_ClrVal_1(); 
   \   000000CA   0x2300             MOVS     R3,#+0
   \   000000CC   0x2201             MOVS     R2,#+1
   \   000000CE   0x210A             MOVS     R1,#+10
   \   000000D0   0x.... 0x....      LDR.W    R0,??DataTable33_1  ;; 0x400ff080
   \   000000D4   0x.... 0x....      BL       gpio_init
    432          }
   \   000000D8   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    433          
    434          extern uint8 Pixel[128];
    435          extern uint8 Pixel_1[128];

   \                                 In section .bss, align 1
    436          uint8  PixelAverageValue=0;                                       /* 128个像素点的平均AD值 */
   \                     PixelAverageValue:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    437          uint8  PixelAverageVoltage=0;                                     /* 128个像素点的平均电压值的10倍 */
   \                     PixelAverageVoltage:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    438          uint8  PixelAverageValue_Right=0;
   \                     PixelAverageValue_Right:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    439          uint8  PixelAverageVoltage_Right=0;
   \                     PixelAverageVoltage_Right:
   \   00000000                      DS8 1

   \                                 In section .data, align 2
    440          int16  TargetPixelAverageVoltage = 30;                          /* 设定目标平均电压值，实际电压的10倍 */
   \                     TargetPixelAverageVoltage:
   \   00000000   0x001E             DC16 30

   \                                 In section .bss, align 2
    441          int16  PixelAverageVoltageError = 0;                            /* 设定目标平均电压值与实际值的偏差，实际电压的10倍 */
   \                     PixelAverageVoltageError:
   \   00000000                      DS8 2

   \                                 In section .data, align 2
    442          int16  TargetPixelAverageVoltageAllowError = 2;                 /* 设定目标平均电压值允许的偏差，实际电压的10倍 */
   \                     TargetPixelAverageVoltageAllowError:
   \   00000000   0x0002             DC16 2

   \                                 In section .data, align 1
    443          uint8  IntegrationTime = 10;                                    /* 曝光时间，单位ms */
   \                     IntegrationTime:
   \   00000000   0x0A               DC8 10

   \                                 In section .data, align 1
    444          uint8  IntegrationTime_Right = 10;                              // 曝光时间，单位ms
   \                     IntegrationTime_Right:
   \   00000000   0x0A               DC8 10
    445          

   \                                 In section .text, align 2, keep-with-next
    446          void CalculateIntegrationTime(void) 
    447          {
   \                     CalculateIntegrationTime:
   \   00000000   0xB580             PUSH     {R7,LR}
    448              PixelAverageValue = PixelAverage(128,Pixel);/* 计算128个像素点的平均AD值 */
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable34_1
   \   00000006   0x2080             MOVS     R0,#+128
   \   00000008   0x.... 0x....      BL       PixelAverage
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable34_2
   \   00000010   0x7008             STRB     R0,[R1, #+0]
    449              
    450              PixelAverageVoltage = (uint8)((int)PixelAverageValue * 25 / 128);/* 计算128个像素点的平均电压值,实际值的10倍 */
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable34_2
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x2119             MOVS     R1,#+25
   \   0000001A   0x4348             MULS     R0,R1,R0
   \   0000001C   0x2180             MOVS     R1,#+128
   \   0000001E   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable34_3
   \   00000026   0x7008             STRB     R0,[R1, #+0]
    451          
    452              PixelAverageVoltageError = TargetPixelAverageVoltage - PixelAverageVoltage;
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable34_4
   \   0000002C   0x8800             LDRH     R0,[R0, #+0]
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable34_3
   \   00000032   0x7809             LDRB     R1,[R1, #+0]
   \   00000034   0x1A40             SUBS     R0,R0,R1
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable34_5
   \   0000003A   0x8008             STRH     R0,[R1, #+0]
    453              if(PixelAverageVoltageError < -TargetPixelAverageVoltageAllowError)
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable34_5
   \   00000040   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable34_6
   \   00000048   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000004C   0x42C8             CMN      R0,R1
   \   0000004E   0xDA06             BGE.N    ??CalculateIntegrationTime_0
    454                IntegrationTime--;                                 
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable34_7
   \   00000054   0x7800             LDRB     R0,[R0, #+0]
   \   00000056   0x1E40             SUBS     R0,R0,#+1
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable34_7
   \   0000005C   0x7008             STRB     R0,[R1, #+0]
    455              if(PixelAverageVoltageError > TargetPixelAverageVoltageAllowError)
   \                     ??CalculateIntegrationTime_0:
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable34_6
   \   00000062   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable34_5
   \   0000006A   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000006E   0x4288             CMP      R0,R1
   \   00000070   0xDA06             BGE.N    ??CalculateIntegrationTime_1
    456                IntegrationTime++;
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable34_7
   \   00000076   0x7800             LDRB     R0,[R0, #+0]
   \   00000078   0x1C40             ADDS     R0,R0,#+1
   \   0000007A   0x.... 0x....      LDR.W    R1,??DataTable34_7
   \   0000007E   0x7008             STRB     R0,[R1, #+0]
    457              if(IntegrationTime <= 1)
   \                     ??CalculateIntegrationTime_1:
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable34_7
   \   00000084   0x7800             LDRB     R0,[R0, #+0]
   \   00000086   0x2802             CMP      R0,#+2
   \   00000088   0xD203             BCS.N    ??CalculateIntegrationTime_2
    458                IntegrationTime = 1;
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable34_7
   \   0000008E   0x2101             MOVS     R1,#+1
   \   00000090   0x7001             STRB     R1,[R0, #+0]
    459              if(IntegrationTime >= 20)
   \                     ??CalculateIntegrationTime_2:
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable34_7
   \   00000096   0x7800             LDRB     R0,[R0, #+0]
   \   00000098   0x2814             CMP      R0,#+20
   \   0000009A   0xD303             BCC.N    ??CalculateIntegrationTime_3
    460                IntegrationTime = 20;
   \   0000009C   0x.... 0x....      LDR.W    R0,??DataTable34_7
   \   000000A0   0x2114             MOVS     R1,#+20
   \   000000A2   0x7001             STRB     R1,[R0, #+0]
    461          }
   \                     ??CalculateIntegrationTime_3:
   \   000000A4   0xBD01             POP      {R0,PC}          ;; return
    462          

   \                                 In section .text, align 2, keep-with-next
    463          void CalculateIntegrationTimeRight(void) 
    464          {
   \                     CalculateIntegrationTimeRight:
   \   00000000   0xB580             PUSH     {R7,LR}
    465              PixelAverageValue_Right = PixelAverage(128,Pixel_1);/* 计算128个像素点的平均AD值 */
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable34_8
   \   00000006   0x2080             MOVS     R0,#+128
   \   00000008   0x.... 0x....      BL       PixelAverage
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable34_9
   \   00000010   0x7008             STRB     R0,[R1, #+0]
    466              
    467              PixelAverageVoltage_Right = (uint8)((int)PixelAverageValue_Right * 25 / 128);/* 计算128个像素点的平均电压值,实际值的10倍 */
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable34_9
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x2119             MOVS     R1,#+25
   \   0000001A   0x4348             MULS     R0,R1,R0
   \   0000001C   0x2180             MOVS     R1,#+128
   \   0000001E   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable34_10
   \   00000026   0x7008             STRB     R0,[R1, #+0]
    468          
    469              PixelAverageVoltageError = TargetPixelAverageVoltage - PixelAverageVoltage_Right;
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable34_4
   \   0000002C   0x8800             LDRH     R0,[R0, #+0]
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable34_10
   \   00000032   0x7809             LDRB     R1,[R1, #+0]
   \   00000034   0x1A40             SUBS     R0,R0,R1
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable34_5
   \   0000003A   0x8008             STRH     R0,[R1, #+0]
    470              if(PixelAverageVoltageError < -TargetPixelAverageVoltageAllowError)
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable34_5
   \   00000040   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable34_6
   \   00000048   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000004C   0x42C8             CMN      R0,R1
   \   0000004E   0xDA06             BGE.N    ??CalculateIntegrationTimeRight_0
    471                IntegrationTime_Right--;                                 
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable34_11
   \   00000054   0x7800             LDRB     R0,[R0, #+0]
   \   00000056   0x1E40             SUBS     R0,R0,#+1
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable34_11
   \   0000005C   0x7008             STRB     R0,[R1, #+0]
    472              if(PixelAverageVoltageError > TargetPixelAverageVoltageAllowError)
   \                     ??CalculateIntegrationTimeRight_0:
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable34_6
   \   00000062   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable34_5
   \   0000006A   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000006E   0x4288             CMP      R0,R1
   \   00000070   0xDA06             BGE.N    ??CalculateIntegrationTimeRight_1
    473                IntegrationTime_Right++;
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable34_11
   \   00000076   0x7800             LDRB     R0,[R0, #+0]
   \   00000078   0x1C40             ADDS     R0,R0,#+1
   \   0000007A   0x.... 0x....      LDR.W    R1,??DataTable34_11
   \   0000007E   0x7008             STRB     R0,[R1, #+0]
    474              if(IntegrationTime_Right <= 1)
   \                     ??CalculateIntegrationTimeRight_1:
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable34_11
   \   00000084   0x7800             LDRB     R0,[R0, #+0]
   \   00000086   0x2802             CMP      R0,#+2
   \   00000088   0xD203             BCS.N    ??CalculateIntegrationTimeRight_2
    475                IntegrationTime_Right = 1;
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable34_11
   \   0000008E   0x2101             MOVS     R1,#+1
   \   00000090   0x7001             STRB     R1,[R0, #+0]
    476              if(IntegrationTime_Right >= 20)
   \                     ??CalculateIntegrationTimeRight_2:
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable34_11
   \   00000096   0x7800             LDRB     R0,[R0, #+0]
   \   00000098   0x2814             CMP      R0,#+20
   \   0000009A   0xD303             BCC.N    ??CalculateIntegrationTimeRight_3
    477                IntegrationTime_Right = 20;
   \   0000009C   0x.... 0x....      LDR.W    R0,??DataTable34_11
   \   000000A0   0x2114             MOVS     R1,#+20
   \   000000A2   0x7001             STRB     R1,[R0, #+0]
    478          }
   \                     ??CalculateIntegrationTimeRight_3:
   \   000000A4   0xBD01             POP      {R0,PC}          ;; return
    479          
    480          

   \                                 In section .text, align 2, keep-with-next
    481          uint8 PixelAverage(uint8 len, uint8 *data) 
    482          {
   \                     PixelAverage:
   \   00000000   0xB410             PUSH     {R4}
    483            uint8 i;
    484            uint16 sum = 0;
   \   00000002   0x2300             MOVS     R3,#+0
    485            for(i = 0; i<len; i++) 
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0xE004             B.N      ??PixelAverage_0
    486            {
    487               sum = sum + *data++;
   \                     ??PixelAverage_1:
   \   00000008   0x780C             LDRB     R4,[R1, #+0]
   \   0000000A   0xFA53 0xF384      UXTAB    R3,R3,R4
   \   0000000E   0x1C49             ADDS     R1,R1,#+1
    488            }
   \   00000010   0x1C52             ADDS     R2,R2,#+1
   \                     ??PixelAverage_0:
   \   00000012   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x4282             CMP      R2,R0
   \   00000018   0xD3F6             BCC.N    ??PixelAverage_1
    489            return ((uint8)(sum/len));
   \   0000001A   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0xFB93 0xF0F0      SDIV     R0,R3,R0
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0xBC10             POP      {R4}
   \   00000026   0x4770             BX       LR               ;; return
    490          }
    491          

   \                                 In section .text, align 2, keep-with-next
    492          void get_left()
    493          {
    494              int16 i;
    495              left=255;
   \                     get_left:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable34_12
   \   00000004   0x21FF             MOVS     R1,#+255
   \   00000006   0x8001             STRH     R1,[R0, #+0]
    496              for(i=127;i>2;i--)
   \   00000008   0x207F             MOVS     R0,#+127
   \   0000000A   0xE000             B.N      ??get_left_0
   \                     ??get_left_1:
   \   0000000C   0x1E40             SUBS     R0,R0,#+1
   \                     ??get_left_0:
   \   0000000E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000010   0x2803             CMP      R0,#+3
   \   00000012   0xDB10             BLT.N    ??get_left_2
    497              {
    498                 if((Pixel[i]-Pixel[i-3])>GATE)
   \   00000014   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable34_1
   \   0000001A   0x5C41             LDRB     R1,[R0, R1]
   \   0000001C   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000001E   0x.... 0x....      LDR.W    R2,??DataTable34_1
   \   00000022   0x1882             ADDS     R2,R0,R2
   \   00000024   0xF812 0x2C03      LDRB     R2,[R2, #-3]
   \   00000028   0x1A89             SUBS     R1,R1,R2
   \   0000002A   0x291F             CMP      R1,#+31
   \   0000002C   0xDBEE             BLT.N    ??get_left_1
    499                 { 
    500                   left=i-3;
   \   0000002E   0x1EC0             SUBS     R0,R0,#+3
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable34_12
   \   00000034   0x8008             STRH     R0,[R1, #+0]
    501                   break;
    502                 }
    503              }
    504              left_c=left_OFFSET-left;   
   \                     ??get_left_2:
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable34_13
   \   0000003A   0x8800             LDRH     R0,[R0, #+0]
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable34_12
   \   00000040   0x8809             LDRH     R1,[R1, #+0]
   \   00000042   0x1A40             SUBS     R0,R0,R1
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable34_14
   \   00000048   0x8008             STRH     R0,[R1, #+0]
    505          }
   \   0000004A   0x4770             BX       LR               ;; return
    506          

   \                                 In section .text, align 2, keep-with-next
    507          void get_right()
    508          {
    509             int16 i;
    510             right=255;   
   \                     get_right:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable34_15
   \   00000004   0x21FF             MOVS     R1,#+255
   \   00000006   0x8001             STRH     R1,[R0, #+0]
    511             for(i=0;i<125;i++) 
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xE000             B.N      ??get_right_0
   \                     ??get_right_1:
   \   0000000C   0x1C40             ADDS     R0,R0,#+1
   \                     ??get_right_0:
   \   0000000E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000010   0x287D             CMP      R0,#+125
   \   00000012   0xDA0F             BGE.N    ??get_right_2
    512             { 
    513                if((Pixel_1[i]-Pixel_1[i+3])>GATE)
   \   00000014   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable34_8
   \   0000001A   0x5C41             LDRB     R1,[R0, R1]
   \   0000001C   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000001E   0x.... 0x....      LDR.W    R2,??DataTable34_8
   \   00000022   0x1882             ADDS     R2,R0,R2
   \   00000024   0x78D2             LDRB     R2,[R2, #+3]
   \   00000026   0x1A89             SUBS     R1,R1,R2
   \   00000028   0x291F             CMP      R1,#+31
   \   0000002A   0xDBEF             BLT.N    ??get_right_1
    514                {
    515                  right=i+3;
   \   0000002C   0x1CC0             ADDS     R0,R0,#+3
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable34_15
   \   00000032   0x8008             STRH     R0,[R1, #+0]
    516                  break;
    517                }
    518             }
    519             right_c=right_OFFSET-right;
   \                     ??get_right_2:
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable34_16
   \   00000038   0x8800             LDRH     R0,[R0, #+0]
   \   0000003A   0x.... 0x....      LDR.W    R1,??DataTable34_15
   \   0000003E   0x8809             LDRH     R1,[R1, #+0]
   \   00000040   0x1A40             SUBS     R0,R0,R1
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable34_17
   \   00000046   0x8008             STRH     R0,[R1, #+0]
    520          }
   \   00000048   0x4770             BX       LR               ;; return
    521          

   \                                 In section .text, align 2, keep-with-next
    522          void getCCD()
    523          {
   \                     getCCD:
   \   00000000   0xB580             PUSH     {R7,LR}
    524              ImageCapture(Pixel);    
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable34_1
   \   00000006   0x.... 0x....      BL       ImageCapture
    525              CalculateIntegrationTime();
   \   0000000A   0x.... 0x....      BL       CalculateIntegrationTime
    526              ImageCapture_1(Pixel_1);
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable34_8
   \   00000012   0x.... 0x....      BL       ImageCapture_1
    527              CalculateIntegrationTimeRight();
   \   00000016   0x.... 0x....      BL       CalculateIntegrationTimeRight
    528          
    529              get_left();
   \   0000001A   0x.... 0x....      BL       get_left
    530              get_right();
   \   0000001E   0x.... 0x....      BL       get_right
    531              left_l+=left;
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable34_18
   \   00000026   0x8800             LDRH     R0,[R0, #+0]
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable34_12
   \   0000002C   0x8809             LDRH     R1,[R1, #+0]
   \   0000002E   0x1808             ADDS     R0,R1,R0
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable34_18
   \   00000034   0x8008             STRH     R0,[R1, #+0]
    532              right_l+=right;
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable34_19
   \   0000003A   0x8800             LDRH     R0,[R0, #+0]
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable34_15
   \   00000040   0x8809             LDRH     R1,[R1, #+0]
   \   00000042   0x1808             ADDS     R0,R1,R0
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable34_19
   \   00000048   0x8008             STRH     R0,[R1, #+0]
    533          }
   \   0000004A   0xBD01             POP      {R0,PC}          ;; return
    534          

   \                                 In section .text, align 2, keep-with-next
    535          void BlackManange() 
    536          {  
    537            //两边都没丢失
    538            if((left!=255)&&(right!=255)) DIR_DEV =(left_c+right_c)/2; 
   \                     BlackManange:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable34_12
   \   00000004   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000008   0x28FF             CMP      R0,#+255
   \   0000000A   0xD014             BEQ.N    ??BlackManange_0
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable34_15
   \   00000010   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000014   0x28FF             CMP      R0,#+255
   \   00000016   0xD00E             BEQ.N    ??BlackManange_0
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable34_14
   \   0000001C   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable34_17
   \   00000024   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000028   0x1808             ADDS     R0,R1,R0
   \   0000002A   0x2102             MOVS     R1,#+2
   \   0000002C   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable34_20
   \   00000034   0x8008             STRH     R0,[R1, #+0]
    539            //右边沿丢失    /*右边可能丢掉右边的线，但检测到左边的线，则右边所得数值极偏小*/
    540            if((left!=255)&&(right==255)) DIR_DEV =left_c; 
   \                     ??BlackManange_0:
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable34_12
   \   0000003A   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000003E   0x28FF             CMP      R0,#+255
   \   00000040   0xD00B             BEQ.N    ??BlackManange_1
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable34_15
   \   00000046   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000004A   0x28FF             CMP      R0,#+255
   \   0000004C   0xD105             BNE.N    ??BlackManange_1
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable34_20
   \   00000052   0x.... 0x....      LDR.W    R1,??DataTable34_14
   \   00000056   0x8809             LDRH     R1,[R1, #+0]
   \   00000058   0x8001             STRH     R1,[R0, #+0]
    541            //左边沿丢失    /*左边可能丢掉左边的线，但检测到右边的线，则左边所得数值极偏大*/
    542            if((left==255)&&(right!=255)) DIR_DEV =right_c;
   \                     ??BlackManange_1:
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable34_12
   \   0000005E   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000062   0x28FF             CMP      R0,#+255
   \   00000064   0xD10B             BNE.N    ??BlackManange_2
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable34_15
   \   0000006A   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000006E   0x28FF             CMP      R0,#+255
   \   00000070   0xD005             BEQ.N    ??BlackManange_2
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable34_20
   \   00000076   0x.... 0x....      LDR.W    R1,??DataTable34_17
   \   0000007A   0x8809             LDRH     R1,[R1, #+0]
   \   0000007C   0x8001             STRH     R1,[R0, #+0]
    543            //左右都丢失
    544            if((left==255)&&(right==255)) DIR_DEV=DIR_DEV*2/3;
   \                     ??BlackManange_2:
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable34_12
   \   00000082   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000086   0x28FF             CMP      R0,#+255
   \   00000088   0xD110             BNE.N    ??BlackManange_3
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable34_15
   \   0000008E   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000092   0x28FF             CMP      R0,#+255
   \   00000094   0xD10A             BNE.N    ??BlackManange_3
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable34_20
   \   0000009A   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000009E   0x0040             LSLS     R0,R0,#+1
   \   000000A0   0x2103             MOVS     R1,#+3
   \   000000A2   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000000A6   0x.... 0x....      LDR.W    R1,??DataTable34_20
   \   000000AA   0x8008             STRH     R0,[R1, #+0]
    545          }
   \                     ??BlackManange_3:
   \   000000AC   0x4770             BX       LR               ;; return
    546          

   \                                 In section .text, align 2, keep-with-next
    547          void LCD_show()
    548          {
   \                     LCD_show:
   \   00000000   0xB580             PUSH     {R7,LR}
    549              LCD_P8x16_number(10,0,left_OFFSET);
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable34_13
   \   00000006   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x200A             MOVS     R0,#+10
   \   0000000E   0x.... 0x....      BL       LCD_P8x16_number
    550              LCD_P8x16_number(70,0,right_OFFSET);
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable34_16
   \   00000016   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x2046             MOVS     R0,#+70
   \   0000001E   0x.... 0x....      BL       LCD_P8x16_number
    551              LCD_P8x16_number(10,2,left);
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable34_12
   \   00000026   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   0000002A   0x2102             MOVS     R1,#+2
   \   0000002C   0x200A             MOVS     R0,#+10
   \   0000002E   0x.... 0x....      BL       LCD_P8x16_number
    552              LCD_P8x16_number(70,2,right);
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable34_15
   \   00000036   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   0000003A   0x2102             MOVS     R1,#+2
   \   0000003C   0x2046             MOVS     R0,#+70
   \   0000003E   0x.... 0x....      BL       LCD_P8x16_number
    553              delay_ms(50);       
   \   00000042   0x2032             MOVS     R0,#+50
   \   00000044   0x.... 0x....      BL       delay_ms
    554              //LCD_CLS();   
    555          }
   \   00000048   0xBD01             POP      {R0,PC}          ;; return
    556          
    557          //----------------------------给CCDView发送图像----------------------------------------------------------------//

   \                                 In section .text, align 2, keep-with-next
    558          void SendImageData(uint8 * ImageData)
    559          {
   \                     SendImageData:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    560              unsigned char i;
    561              unsigned char crc = 0;
   \   00000004   0x2600             MOVS     R6,#+0
    562              /* Send Data */    
    563              uart_send1(UART3,'*');
   \   00000006   0x212A             MOVS     R1,#+42
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable34_21  ;; 0x4006d000
   \   0000000C   0x.... 0x....      BL       uart_send1
    564              uart_send1(UART3,'L');
   \   00000010   0x214C             MOVS     R1,#+76
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable34_21  ;; 0x4006d000
   \   00000016   0x.... 0x....      BL       uart_send1
    565              uart_send1(UART3,'D');
   \   0000001A   0x2144             MOVS     R1,#+68
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable34_21  ;; 0x4006d000
   \   00000020   0x.... 0x....      BL       uart_send1
    566              
    567              SendHex(0);
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      BL       SendHex
    568              SendHex(0);
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x.... 0x....      BL       SendHex
    569              SendHex(0);
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x.... 0x....      BL       SendHex
    570              SendHex(0);    
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x.... 0x....      BL       SendHex
    571              
    572              for(i=0; i<128; i++) 
   \   0000003C   0x2500             MOVS     R5,#+0
   \   0000003E   0xE004             B.N      ??SendImageData_0
    573              {
    574                  SendHex(*ImageData ++);
   \                     ??SendImageData_1:
   \   00000040   0x7820             LDRB     R0,[R4, #+0]
   \   00000042   0x.... 0x....      BL       SendHex
   \   00000046   0x1C64             ADDS     R4,R4,#+1
    575              }
   \   00000048   0x1C6D             ADDS     R5,R5,#+1
   \                     ??SendImageData_0:
   \   0000004A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004C   0x2D80             CMP      R5,#+128
   \   0000004E   0xD3F7             BCC.N    ??SendImageData_1
    576          
    577              SendHex(crc);
   \   00000050   0x0030             MOVS     R0,R6
   \   00000052   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000054   0x.... 0x....      BL       SendHex
    578              uart_send1(UART3,'#');
   \   00000058   0x2123             MOVS     R1,#+35
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable34_21  ;; 0x4006d000
   \   0000005E   0x.... 0x....      BL       uart_send1
    579          }
   \   00000062   0xBD70             POP      {R4-R6,PC}       ;; return
    580          

   \                                 In section .text, align 2, keep-with-next
    581          void SendHex(unsigned char hex) 
    582          {
   \                     SendHex:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    583            unsigned char temp;
    584            temp = hex >> 4;
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x0920             LSRS     R0,R4,#+4
    585            if(temp < 10) 
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x280A             CMP      R0,#+10
   \   0000000C   0xD207             BCS.N    ??SendHex_0
    586            {
    587             uart_send1(UART3,temp + '0');
   \   0000000E   0xF110 0x0130      ADDS     R1,R0,#+48
   \   00000012   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable34_21  ;; 0x4006d000
   \   00000018   0x.... 0x....      BL       uart_send1
   \   0000001C   0xE006             B.N      ??SendHex_1
    588            } 
    589            else 
    590            {
    591             uart_send1(UART3,temp - 10 + 'A');
   \                     ??SendHex_0:
   \   0000001E   0xF110 0x0137      ADDS     R1,R0,#+55
   \   00000022   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable34_21  ;; 0x4006d000
   \   00000028   0x.... 0x....      BL       uart_send1
    592            }
    593            temp = hex & 0x0F;
   \                     ??SendHex_1:
   \   0000002C   0xF014 0x000F      ANDS     R0,R4,#0xF
    594            if(temp < 10) 
   \   00000030   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000032   0x280A             CMP      R0,#+10
   \   00000034   0xD207             BCS.N    ??SendHex_2
    595            {
    596             uart_send1(UART3,temp + '0');
   \   00000036   0xF110 0x0130      ADDS     R1,R0,#+48
   \   0000003A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable34_21  ;; 0x4006d000
   \   00000040   0x.... 0x....      BL       uart_send1
   \   00000044   0xE006             B.N      ??SendHex_3
    597            } 
    598            else 
    599            {
    600            uart_send1(UART3,temp - 10 + 'A');
   \                     ??SendHex_2:
   \   00000046   0xF110 0x0137      ADDS     R1,R0,#+55
   \   0000004A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable34_21  ;; 0x4006d000
   \   00000050   0x.... 0x....      BL       uart_send1
    601            }
    602          }
   \                     ??SendHex_3:
   \   00000054   0xBD10             POP      {R4,PC}          ;; return
    603          

   \                                 In section .text, align 4, keep-with-next
    604          void SamplingDelay(void)//CCD延时程序 200ns
    605          {
   \                     SamplingDelay:
   \   00000000   0xB081             SUB      SP,SP,#+4
    606             volatile uint8 i ;
    607             for(i=0;i<1;i++) 
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000008   0xE006             B.N      ??SamplingDelay_0
    608             {
    609              asm("nop");
   \                     ??SamplingDelay_1:
   \   0000000A   0xBF00             nop              
    610              asm("nop");
   \   0000000C   0xBF00             nop              
    611             }
   \   0000000E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000012   0x1C40             ADDS     R0,R0,#+1
   \   00000014   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \                     ??SamplingDelay_0:
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0x2801             CMP      R0,#+1
   \   0000001E   0xD3F4             BCC.N    ??SamplingDelay_1
    612          }
   \   00000020   0xB001             ADD      SP,SP,#+4
   \   00000022   0x4770             BX       LR               ;; return
    613          //----------------------------------------------------------------------------------------------------------//

   \                                 In section .text, align 2, keep-with-next
    614          void DirectionControl(void)
    615           {
   \                     DirectionControl:
   \   00000000   0xB510             PUSH     {R4,LR}
    616          	float  fValue, fDValue;
    617          	
    618          	g_fDirectionControlOutOld = g_fDirectionControlOutNew;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable34_22
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable34_23
   \   0000000A   0x6809             LDR      R1,[R1, #+0]
   \   0000000C   0x6001             STR      R1,[R0, #+0]
    619                  
    620          	fValue=DIR_DEV;
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable34_20
   \   00000012   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000016   0x.... 0x....      BL       __aeabi_i2f
   \   0000001A   0x0004             MOVS     R4,R0
    621                  
    622                  fValue = fValue * DIR_CONTROL_P;
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0x.... 0x....      BL       __aeabi_f2d
   \   00000022   0x.... 0x....      LDR.W    R2,??DataTable34_24  ;; 0xb020c49c
   \   00000026   0x.... 0x....      LDR.W    R3,??DataTable34_25  ;; 0x3f916872
   \   0000002A   0x.... 0x....      BL       __aeabi_dmul
   \   0000002E   0x.... 0x....      BL       __aeabi_d2f
   \   00000032   0x0004             MOVS     R4,R0
    623          	fDValue = (DIR_CONTROL_D_VALUE - GYROSCOPE_OFFSET_DIRECTION) * DIR_CONTROL_D;
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable34_26
   \   00000038   0xF9B0 0x0008      LDRSH    R0,[R0, #+8]
   \   0000003C   0x....             LDR.N    R1,??DataTable27
   \   0000003E   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000042   0x1A40             SUBS     R0,R0,R1
   \   00000044   0x.... 0x....      BL       __aeabi_i2d
   \   00000048   0x.... 0x....      LDR.W    R2,??DataTable34_27  ;; 0x8db8bac7
   \   0000004C   0x.... 0x....      LDR.W    R3,??DataTable34_28  ;; 0x3f46f006
   \   00000050   0x.... 0x....      BL       __aeabi_dmul
   \   00000054   0x.... 0x....      BL       __aeabi_d2f
    624                  
    625          	fValue+=fDValue;
   \   00000058   0x0021             MOVS     R1,R4
   \   0000005A   0x.... 0x....      BL       __aeabi_fadd
   \   0000005E   0x0004             MOVS     R4,R0
    626          	/*  
    627          	if(fValue > 0) fValue += DIRECTION_CONTROL_DEADVALUE;
    628                  if(fValue < 0) fValue -= DIRECTION_CONTROL_DEADVALUE;
    629          	*/	
    630          	if(fValue > DIRECTION_CONTROL_OUT_MAX) fValue = DIRECTION_CONTROL_OUT_MAX;
   \   00000060   0x0020             MOVS     R0,R4
   \   00000062   0x.... 0x....      LDR.W    R1,??DataTable34_29  ;; 0x3f800001
   \   00000066   0x.... 0x....      BL       __aeabi_cfrcmple
   \   0000006A   0xD801             BHI.N    ??DirectionControl_0
   \   0000006C   0xF05F 0x547E      MOVS     R4,#+1065353216
    631          	if(fValue < DIRECTION_CONTROL_OUT_MIN) fValue = DIRECTION_CONTROL_OUT_MIN;
   \                     ??DirectionControl_0:
   \   00000070   0x0020             MOVS     R0,R4
   \   00000072   0x.... 0x....      LDR.W    R1,??DataTable34_30  ;; 0xbf800000
   \   00000076   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000007A   0xD201             BCS.N    ??DirectionControl_1
   \   0000007C   0x.... 0x....      LDR.W    R4,??DataTable34_30  ;; 0xbf800000
    632          	g_fDirectionControlOutNew = fValue;
   \                     ??DirectionControl_1:
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable34_23
   \   00000084   0x6004             STR      R4,[R0, #+0]
    633          }
   \   00000086   0xBD10             POP      {R4,PC}          ;; return
    634              

   \                                 In section .text, align 2, keep-with-next
    635          void DirectionControlOutput(void) 
    636          {
   \                     DirectionControlOutput:
   \   00000000   0xB510             PUSH     {R4,LR}
    637          	float fValue;
    638          	fValue = g_fDirectionControlOutNew - g_fDirectionControlOutOld;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable34_23
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable34_22
   \   0000000C   0x6809             LDR      R1,[R1, #+0]
   \   0000000E   0x.... 0x....      BL       __aeabi_fsub
   \   00000012   0x0004             MOVS     R4,R0
    639          	g_fDirectionControlOut = fValue * (g_nDirectionControlPeriod + 1) / DIRECTION_CONTROL_PERIOD + g_fDirectionControlOutOld;
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable34_31
   \   00000018   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000001C   0x1C40             ADDS     R0,R0,#+1
   \   0000001E   0x.... 0x....      BL       __aeabi_i2f
   \   00000022   0x0021             MOVS     R1,R4
   \   00000024   0x.... 0x....      BL       __aeabi_fmul
   \   00000028   0x....             LDR.N    R1,??DataTable29_2  ;; 0x41200000
   \   0000002A   0x.... 0x....      BL       __aeabi_fdiv
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable34_22
   \   00000032   0x6809             LDR      R1,[R1, #+0]
   \   00000034   0x.... 0x....      BL       __aeabi_fadd
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable34_32
   \   0000003C   0x6008             STR      R0,[R1, #+0]
    640          }
   \   0000003E   0xBD10             POP      {R4,PC}          ;; return
    641          
    642          
    643          
    644          //----------------------电机控制--------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    645          void MotorOutput(void)
    646          {
   \                     MotorOutput:
   \   00000000   0xB510             PUSH     {R4,LR}
    647          	float fLeft, fRight;
    648          
    649          	fLeft  = g_fAngleControlOut - g_fSpeedControlOut - g_fDirectionControlOut;
   \   00000002   0x....             LDR.N    R0,??DataTable29
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable33
   \   0000000A   0x6809             LDR      R1,[R1, #+0]
   \   0000000C   0x.... 0x....      BL       __aeabi_fsub
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable34_32
   \   00000014   0x6809             LDR      R1,[R1, #+0]
   \   00000016   0x.... 0x....      BL       __aeabi_fsub
   \   0000001A   0x0004             MOVS     R4,R0
    650          	fRight = g_fAngleControlOut - g_fSpeedControlOut + g_fDirectionControlOut;
   \   0000001C   0x....             LDR.N    R0,??DataTable29
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable33
   \   00000024   0x6809             LDR      R1,[R1, #+0]
   \   00000026   0x.... 0x....      BL       __aeabi_fsub
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable34_32
   \   0000002E   0x6809             LDR      R1,[R1, #+0]
   \   00000030   0x.... 0x....      BL       __aeabi_fadd
   \   00000034   0x0002             MOVS     R2,R0
    651          	
    652          	if(fLeft > MOTOR_OUT_MAX)		fLeft = MOTOR_OUT_MAX;
   \   00000036   0x0020             MOVS     R0,R4
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable34_29  ;; 0x3f800001
   \   0000003C   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000040   0xD801             BHI.N    ??MotorOutput_0
   \   00000042   0xF05F 0x547E      MOVS     R4,#+1065353216
    653          	if(fLeft < MOTOR_OUT_MIN)		fLeft = MOTOR_OUT_MIN;
   \                     ??MotorOutput_0:
   \   00000046   0x0020             MOVS     R0,R4
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable34_30  ;; 0xbf800000
   \   0000004C   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000050   0xD201             BCS.N    ??MotorOutput_1
   \   00000052   0x.... 0x....      LDR.W    R4,??DataTable34_30  ;; 0xbf800000
    654          	if(fRight > MOTOR_OUT_MAX)		fRight = MOTOR_OUT_MAX;
   \                     ??MotorOutput_1:
   \   00000056   0x0010             MOVS     R0,R2
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable34_29  ;; 0x3f800001
   \   0000005C   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000060   0xD801             BHI.N    ??MotorOutput_2
   \   00000062   0xF05F 0x527E      MOVS     R2,#+1065353216
    655          	if(fRight < MOTOR_OUT_MIN)		fRight = MOTOR_OUT_MIN;
   \                     ??MotorOutput_2:
   \   00000066   0x0010             MOVS     R0,R2
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable34_30  ;; 0xbf800000
   \   0000006C   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000070   0xD201             BCS.N    ??MotorOutput_3
   \   00000072   0x.... 0x....      LDR.W    R2,??DataTable34_30  ;; 0xbf800000
    656          		
    657          	g_fLeftMotorOut = fLeft;
   \                     ??MotorOutput_3:
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable34_33
   \   0000007A   0x6004             STR      R4,[R0, #+0]
    658          	g_fRightMotorOut = fRight;
   \   0000007C   0x.... 0x....      LDR.W    R0,??DataTable34_34
   \   00000080   0x6002             STR      R2,[R0, #+0]
    659          	MotorSpeedOut();
   \   00000082   0x.... 0x....      BL       MotorSpeedOut
    660          }
   \   00000086   0xBD10             POP      {R4,PC}          ;; return
    661          

   \                                 In section .text, align 2, keep-with-next
    662          void MotorSpeedOut(void)
    663          {
   \                     MotorSpeedOut:
   \   00000000   0xB580             PUSH     {R7,LR}
    664          	float fLeftVal, fRightVal;
    665          	
    666          	fLeftVal = g_fLeftMotorOut;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable34_33
   \   00000006   0x6802             LDR      R2,[R0, #+0]
    667          	fRightVal = g_fRightMotorOut;
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable34_34
   \   0000000C   0x6803             LDR      R3,[R0, #+0]
    668                  /*
    669          	if(fLeftVal > 0) 			fLeftVal += MOTOR_OUT_DEAD_VAL;
    670          	else if(fLeftVal < 0) 		fLeftVal -= MOTOR_OUT_DEAD_VAL;
    671          	
    672          	if(fRightVal > 0)			fRightVal += MOTOR_OUT_DEAD_VAL;
    673          	else if(fRightVal < 0)		fRightVal -= MOTOR_OUT_DEAD_VAL;
    674          	*/	
    675          	if(fLeftVal > MOTOR_OUT_MAX)	fLeftVal = MOTOR_OUT_MAX;
   \   0000000E   0x0010             MOVS     R0,R2
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable34_29  ;; 0x3f800001
   \   00000014   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000018   0xD801             BHI.N    ??MotorSpeedOut_0
   \   0000001A   0xF05F 0x527E      MOVS     R2,#+1065353216
    676          	if(fLeftVal < MOTOR_OUT_MIN)	fLeftVal = MOTOR_OUT_MIN;
   \                     ??MotorSpeedOut_0:
   \   0000001E   0x0010             MOVS     R0,R2
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable34_30  ;; 0xbf800000
   \   00000024   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000028   0xD201             BCS.N    ??MotorSpeedOut_1
   \   0000002A   0x.... 0x....      LDR.W    R2,??DataTable34_30  ;; 0xbf800000
    677          	if(fRightVal > MOTOR_OUT_MAX)	fRightVal = MOTOR_OUT_MAX;
   \                     ??MotorSpeedOut_1:
   \   0000002E   0x0018             MOVS     R0,R3
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable34_29  ;; 0x3f800001
   \   00000034   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000038   0xD801             BHI.N    ??MotorSpeedOut_2
   \   0000003A   0xF05F 0x537E      MOVS     R3,#+1065353216
    678          	if(fRightVal < MOTOR_OUT_MIN)	fRightVal = MOTOR_OUT_MIN;
   \                     ??MotorSpeedOut_2:
   \   0000003E   0x0018             MOVS     R0,R3
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable34_30  ;; 0xbf800000
   \   00000044   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000048   0xD201             BCS.N    ??MotorSpeedOut_3
   \   0000004A   0x.... 0x....      LDR.W    R3,??DataTable34_30  ;; 0xbf800000
    679          			
    680          	SetMotorVoltage(fLeftVal, fRightVal);
   \                     ??MotorSpeedOut_3:
   \   0000004E   0x0019             MOVS     R1,R3
   \   00000050   0x0010             MOVS     R0,R2
   \   00000052   0x.... 0x....      BL       SetMotorVoltage
    681          }
   \   00000056   0xBD01             POP      {R0,PC}          ;; return
    682          

   \                                 In section .text, align 2, keep-with-next
    683          void SetMotorVoltage(float fLeftVoltage, float fRightVoltage) 
    684          {
   \                     SetMotorVoltage:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    685                                                          // Voltage : > 0 : Move forward
    686                                                          // Voltage : < 0 : Move backward
    687          	int16 nPeriod;
    688          	int16 nOut;
    689          	
    690          	nPeriod =1250;
   \   00000006   0xF240 0x46E2      MOVW     R6,#+1250
    691                  //--------------------------------------------------------------------------
    692          	if(fLeftVoltage > 1.0) 			fLeftVoltage = 1.0;
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable34_29  ;; 0x3f800001
   \   00000010   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000014   0xD802             BHI.N    ??SetMotorVoltage_0
   \   00000016   0xF05F 0x547E      MOVS     R4,#+1065353216
   \   0000001A   0xE007             B.N      ??SetMotorVoltage_1
    693          	else if(fLeftVoltage < -1.0) 	fLeftVoltage = -1.0;
   \                     ??SetMotorVoltage_0:
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable34_30  ;; 0xbf800000
   \   00000022   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000026   0xD201             BCS.N    ??SetMotorVoltage_1
   \   00000028   0x.... 0x....      LDR.W    R4,??DataTable34_30  ;; 0xbf800000
    694          	
    695          	if(fRightVoltage > 1.0) 		fRightVoltage = 1.0;
   \                     ??SetMotorVoltage_1:
   \   0000002C   0x0028             MOVS     R0,R5
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable34_29  ;; 0x3f800001
   \   00000032   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000036   0xD802             BHI.N    ??SetMotorVoltage_2
   \   00000038   0xF05F 0x557E      MOVS     R5,#+1065353216
   \   0000003C   0xE007             B.N      ??SetMotorVoltage_3
    696          	else if(fRightVoltage < -1.0)	fRightVoltage = -1.0;
   \                     ??SetMotorVoltage_2:
   \   0000003E   0x0028             MOVS     R0,R5
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable34_30  ;; 0xbf800000
   \   00000044   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000048   0xD201             BCS.N    ??SetMotorVoltage_3
   \   0000004A   0x.... 0x....      LDR.W    R5,??DataTable34_30  ;; 0xbf800000
    697                  //--------------------------------------------------------------------------
    698          	if(fRightVoltage > 0)                                          //右轮 前
   \                     ??SetMotorVoltage_3:
   \   0000004E   0x0028             MOVS     R0,R5
   \   00000050   0x2100             MOVS     R1,#+0
   \   00000052   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000056   0xD216             BCS.N    ??SetMotorVoltage_4
    699                  {
    700                    gpio_init(PORTB,10, 1,1);//DIR_B;
   \   00000058   0x2301             MOVS     R3,#+1
   \   0000005A   0x2201             MOVS     R2,#+1
   \   0000005C   0x210A             MOVS     R1,#+10
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable34_35  ;; 0x400ff040
   \   00000062   0x.... 0x....      BL       gpio_init
    701                    nOut = (int16)(fRightVoltage * nPeriod);
   \   00000066   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   00000068   0x0030             MOVS     R0,R6
   \   0000006A   0x.... 0x....      BL       __aeabi_i2f
   \   0000006E   0x0029             MOVS     R1,R5
   \   00000070   0x.... 0x....      BL       __aeabi_fmul
   \   00000074   0x.... 0x....      BL       __aeabi_f2iz
    702                    FTM0_C1V=nPeriod-nOut;
   \   00000078   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   0000007A   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000007C   0x1A30             SUBS     R0,R6,R0
   \   0000007E   0x.... 0x....      LDR.W    R1,??DataTable34_36  ;; 0x40038018
   \   00000082   0x6008             STR      R0,[R1, #+0]
   \   00000084   0xE013             B.N      ??SetMotorVoltage_5
    703          	}
    704          	else                                                          //右轮 后
    705          	{
    706                    gpio_init(PORTB,10, 1,0);// DIR_F ;
   \                     ??SetMotorVoltage_4:
   \   00000086   0x2300             MOVS     R3,#+0
   \   00000088   0x2201             MOVS     R2,#+1
   \   0000008A   0x210A             MOVS     R1,#+10
   \   0000008C   0x....             LDR.N    R0,??DataTable34_35  ;; 0x400ff040
   \   0000008E   0x.... 0x....      BL       gpio_init
    707          	  fRightVoltage = -fRightVoltage;
   \   00000092   0xF095 0x4500      EORS     R5,R5,#0x80000000
    708                    nOut = (int16)(fRightVoltage * nPeriod);
   \   00000096   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   00000098   0x0030             MOVS     R0,R6
   \   0000009A   0x.... 0x....      BL       __aeabi_i2f
   \   0000009E   0x0029             MOVS     R1,R5
   \   000000A0   0x.... 0x....      BL       __aeabi_fmul
   \   000000A4   0x.... 0x....      BL       __aeabi_f2iz
    709                    FTM0_C1V=nOut;
   \   000000A8   0x....             LDR.N    R1,??DataTable34_36  ;; 0x40038018
   \   000000AA   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000AC   0x6008             STR      R0,[R1, #+0]
    710            	}
    711                  //--------------------------------------------------------------------------	                                            	                                              
    712          	if(fLeftVoltage > 0)                                           //左轮 前
   \                     ??SetMotorVoltage_5:
   \   000000AE   0x0020             MOVS     R0,R4
   \   000000B0   0x2100             MOVS     R1,#+0
   \   000000B2   0x.... 0x....      BL       __aeabi_cfrcmple
   \   000000B6   0xD214             BCS.N    ??SetMotorVoltage_6
    713          	{
    714                    gpio_init(PORTB, 9, 1,1);//DIL_B ;
   \   000000B8   0x2301             MOVS     R3,#+1
   \   000000BA   0x2201             MOVS     R2,#+1
   \   000000BC   0x2109             MOVS     R1,#+9
   \   000000BE   0x....             LDR.N    R0,??DataTable34_35  ;; 0x400ff040
   \   000000C0   0x.... 0x....      BL       gpio_init
    715                    nOut = (int16)(fLeftVoltage * nPeriod);
   \   000000C4   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   000000C6   0x0030             MOVS     R0,R6
   \   000000C8   0x.... 0x....      BL       __aeabi_i2f
   \   000000CC   0x0021             MOVS     R1,R4
   \   000000CE   0x.... 0x....      BL       __aeabi_fmul
   \   000000D2   0x.... 0x....      BL       __aeabi_f2iz
    716                    FTM0_C0V=nPeriod-nOut;
   \   000000D6   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   000000D8   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000DA   0x1A30             SUBS     R0,R6,R0
   \   000000DC   0x....             LDR.N    R1,??DataTable34_37  ;; 0x40038010
   \   000000DE   0x6008             STR      R0,[R1, #+0]
   \   000000E0   0xE013             B.N      ??SetMotorVoltage_7
    717          	} 
    718          	else                                                           //左轮 后
    719          	{ 
    720          	  gpio_init(PORTB, 9, 1,0);// DIL_F ;
   \                     ??SetMotorVoltage_6:
   \   000000E2   0x2300             MOVS     R3,#+0
   \   000000E4   0x2201             MOVS     R2,#+1
   \   000000E6   0x2109             MOVS     R1,#+9
   \   000000E8   0x....             LDR.N    R0,??DataTable34_35  ;; 0x400ff040
   \   000000EA   0x.... 0x....      BL       gpio_init
    721          	  fLeftVoltage = -fLeftVoltage;
   \   000000EE   0xF094 0x4400      EORS     R4,R4,#0x80000000
    722          	  nOut = (int16)(fLeftVoltage * nPeriod);
   \   000000F2   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   000000F4   0x0030             MOVS     R0,R6
   \   000000F6   0x.... 0x....      BL       __aeabi_i2f
   \   000000FA   0x0021             MOVS     R1,R4
   \   000000FC   0x.... 0x....      BL       __aeabi_fmul
   \   00000100   0x.... 0x....      BL       __aeabi_f2iz
    723                    FTM0_C0V=nOut;
   \   00000104   0x....             LDR.N    R1,??DataTable34_37  ;; 0x40038010
   \   00000106   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000108   0x6008             STR      R0,[R1, #+0]
    724            	}                                
    725          } 
   \                     ??SetMotorVoltage_7:
   \   0000010A   0xBD70             POP      {R4-R6,PC}       ;; return
    726          
    727          
    728          
    729          
    730          /****************************虚拟示波器模块******************************/

   \                                 In section .text, align 2, keep-with-next
    731          void virtual_scope_show(void)
    732          {
    733                OutData[0]=0;
   \                     virtual_scope_show:
   \   00000000   0x....             LDR.N    R0,??DataTable34_38
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x8001             STRH     R1,[R0, #+0]
    734                OutData[1]=0;
   \   00000006   0x....             LDR.N    R0,??DataTable34_38
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x8041             STRH     R1,[R0, #+2]
    735                OutData[2]=0;
   \   0000000C   0x....             LDR.N    R0,??DataTable34_38
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x8081             STRH     R1,[R0, #+4]
    736                OutData[3]=0;
   \   00000012   0x....             LDR.N    R0,??DataTable34_38
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x80C1             STRH     R1,[R0, #+6]
    737          }
   \   00000018   0x4770             BX       LR               ;; return
    738          

   \                                 In section .text, align 2, keep-with-next
    739          void serial_Txd()//传输的一帧数据，包括如下的内容
    740          {
   \                     serial_Txd:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
    741                  uint8 temp[10]={0};
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x2300             MOVS     R3,#+0
   \   0000000C   0xC00E             STM      R0!,{R1-R3}
   \   0000000E   0x380C             SUBS     R0,R0,#+12
    742                  uint8 i,j;
    743                  //帧头数据
    744                  uart_send1 (UART3, 0xa5);
   \   00000010   0x21A5             MOVS     R1,#+165
   \   00000012   0x....             LDR.N    R0,??DataTable34_21  ;; 0x4006d000
   \   00000014   0x.... 0x....      BL       uart_send1
    745                  uart_send1 (UART3, 0x5a);
   \   00000018   0x215A             MOVS     R1,#+90
   \   0000001A   0x....             LDR.N    R0,??DataTable34_21  ;; 0x4006d000
   \   0000001C   0x.... 0x....      BL       uart_send1
    746          	
    747                 //第一条曲线的数据
    748                  for(i=0;i<3;i++)
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xE019             B.N      ??serial_Txd_0
    749                  {
    750                     temp[i*2]=(int)OutData[i]/10;
   \                     ??serial_Txd_1:
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x....             LDR.N    R1,??DataTable34_38
   \   00000028   0xF931 0x1010      LDRSH    R1,[R1, R0, LSL #+1]
   \   0000002C   0x220A             MOVS     R2,#+10
   \   0000002E   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   00000032   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   0xAA00             ADD      R2,SP,#+0
   \   00000036   0xF802 0x1010      STRB     R1,[R2, R0, LSL #+1]
    751                     temp[i*2+1]=(int)OutData[i]%10;
   \   0000003A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0x....             LDR.N    R1,??DataTable34_38
   \   0000003E   0xF931 0x1010      LDRSH    R1,[R1, R0, LSL #+1]
   \   00000042   0x220A             MOVS     R2,#+10
   \   00000044   0xFB91 0xF3F2      SDIV     R3,R1,R2
   \   00000048   0xFB02 0x1113      MLS      R1,R2,R3,R1
   \   0000004C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004E   0xAA00             ADD      R2,SP,#+0
   \   00000050   0xEB12 0x0240      ADDS     R2,R2,R0, LSL #+1
   \   00000054   0x7051             STRB     R1,[R2, #+1]
    752                  }
   \   00000056   0x1C40             ADDS     R0,R0,#+1
   \                     ??serial_Txd_0:
   \   00000058   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005A   0x2803             CMP      R0,#+3
   \   0000005C   0xD3E2             BCC.N    ??serial_Txd_1
    753                 for(j=0;j<6;j++)
   \   0000005E   0x2400             MOVS     R4,#+0
   \   00000060   0xE006             B.N      ??serial_Txd_2
    754                 {
    755                    uart_send1 (UART3, temp[j]);
   \                     ??serial_Txd_3:
   \   00000062   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000064   0xA800             ADD      R0,SP,#+0
   \   00000066   0x5C21             LDRB     R1,[R4, R0]
   \   00000068   0x....             LDR.N    R0,??DataTable34_21  ;; 0x4006d000
   \   0000006A   0x.... 0x....      BL       uart_send1
    756                 }
   \   0000006E   0x1C64             ADDS     R4,R4,#+1
   \                     ??serial_Txd_2:
   \   00000070   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000072   0x2C06             CMP      R4,#+6
   \   00000074   0xD3F5             BCC.N    ??serial_Txd_3
    757                  delay_ms(10);
   \   00000076   0x200A             MOVS     R0,#+10
   \   00000078   0x.... 0x....      BL       delay_ms
    758          }
   \   0000007C   0xBD1F             POP      {R0-R4,PC}       ;; return
    759          
    760          

   \                                 In section .text, align 2, keep-with-next
    761          unsigned short CRC_CHECK(unsigned char *Buf, unsigned char CRC_CNT)
    762          {
   \                     CRC_CHECK:
   \   00000000   0xB430             PUSH     {R4,R5}
    763              unsigned short CRC_Temp;
    764              unsigned char i,j;
    765              CRC_Temp = 0xffff;
   \   00000002   0xF64F 0x72FF      MOVW     R2,#+65535
    766          
    767              for (i=0;i<CRC_CNT; i++)
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0xE000             B.N      ??CRC_CHECK_0
   \                     ??CRC_CHECK_1:
   \   0000000A   0x1C5B             ADDS     R3,R3,#+1
   \                     ??CRC_CHECK_0:
   \   0000000C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000000E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000010   0x428B             CMP      R3,R1
   \   00000012   0xD213             BCS.N    ??CRC_CHECK_2
    768              {      
    769                  CRC_Temp ^= Buf[i];
   \   00000014   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000016   0x5C1C             LDRB     R4,[R3, R0]
   \   00000018   0x4062             EORS     R2,R4,R2
    770                  for (j=0;j<8;j++)
   \   0000001A   0x2400             MOVS     R4,#+0
   \   0000001C   0xE002             B.N      ??CRC_CHECK_3
    771                  {
    772                      if (CRC_Temp & 0x01)
    773                          CRC_Temp = (CRC_Temp >>1 ) ^ 0xa001;
    774                      else
    775                          CRC_Temp = CRC_Temp >> 1;
   \                     ??CRC_CHECK_4:
   \   0000001E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000020   0x0852             LSRS     R2,R2,#+1
   \                     ??CRC_CHECK_5:
   \   00000022   0x1C64             ADDS     R4,R4,#+1
   \                     ??CRC_CHECK_3:
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0x2C08             CMP      R4,#+8
   \   00000028   0xD2EF             BCS.N    ??CRC_CHECK_1
   \   0000002A   0x07D5             LSLS     R5,R2,#+31
   \   0000002C   0xD5F7             BPL.N    ??CRC_CHECK_4
   \   0000002E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000030   0x0852             LSRS     R2,R2,#+1
   \   00000032   0xF482 0x4220      EOR      R2,R2,#0xA000
   \   00000036   0xF092 0x0201      EORS     R2,R2,#0x1
   \   0000003A   0xE7F2             B.N      ??CRC_CHECK_5
    776                  }
    777              }
    778              return(CRC_Temp);
   \                     ??CRC_CHECK_2:
   \   0000003C   0x0010             MOVS     R0,R2
   \   0000003E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000040   0xBC30             POP      {R4,R5}
   \   00000042   0x4770             BX       LR               ;; return
    779          }
    780          

   \                                 In section .text, align 2, keep-with-next
    781          void OutPut_Data(void)
    782          {
   \                     OutPut_Data:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB08C             SUB      SP,SP,#+48
    783            int temp[4] = {0};
   \   00000004   0xA807             ADD      R0,SP,#+28
   \   00000006   0x2110             MOVS     R1,#+16
   \   00000008   0x.... 0x....      BL       __aeabi_memclr4
    784            unsigned int temp1[4] = {0};
   \   0000000C   0xA803             ADD      R0,SP,#+12
   \   0000000E   0x2110             MOVS     R1,#+16
   \   00000010   0x.... 0x....      BL       __aeabi_memclr4
    785            unsigned char databuf[10] = {0};
   \   00000014   0xA800             ADD      R0,SP,#+0
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0x2300             MOVS     R3,#+0
   \   0000001C   0xC00E             STM      R0!,{R1-R3}
   \   0000001E   0x380C             SUBS     R0,R0,#+12
    786            unsigned char i;
    787            unsigned short CRC16 = 0;
   \   00000020   0x2000             MOVS     R0,#+0
    788            for(i=0;i<4;i++)
   \   00000022   0x2400             MOVS     R4,#+0
   \   00000024   0xE010             B.N      ??OutPut_Data_0
    789            {    
    790              temp[i]  = (int16)OutData[i];
   \                     ??OutPut_Data_1:
   \   00000026   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000028   0xA807             ADD      R0,SP,#+28
   \   0000002A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002C   0x....             LDR.N    R1,??DataTable34_38
   \   0000002E   0xF931 0x1014      LDRSH    R1,[R1, R4, LSL #+1]
   \   00000032   0xF840 0x1024      STR      R1,[R0, R4, LSL #+2]
    791              temp1[i] = (uint16)temp[i];
   \   00000036   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000038   0xA803             ADD      R0,SP,#+12
   \   0000003A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003C   0xA907             ADD      R1,SP,#+28
   \   0000003E   0xF831 0x1024      LDRH     R1,[R1, R4, LSL #+2]
   \   00000042   0xF840 0x1024      STR      R1,[R0, R4, LSL #+2]
    792            }
   \   00000046   0x1C64             ADDS     R4,R4,#+1
   \                     ??OutPut_Data_0:
   \   00000048   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004A   0x2C04             CMP      R4,#+4
   \   0000004C   0xD3EB             BCC.N    ??OutPut_Data_1
    793             
    794            for(i=0;i<4;i++) 
   \   0000004E   0x2400             MOVS     R4,#+0
   \   00000050   0xE018             B.N      ??OutPut_Data_2
    795            {
    796              databuf[i*2]   = (int8)(temp1[i]%256);
   \                     ??OutPut_Data_3:
   \   00000052   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000054   0xA803             ADD      R0,SP,#+12
   \   00000056   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000005A   0xF44F 0x7180      MOV      R1,#+256
   \   0000005E   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000062   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   00000066   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000068   0xA800             ADD      R0,SP,#+0
   \   0000006A   0xF800 0x2014      STRB     R2,[R0, R4, LSL #+1]
    797              databuf[i*2+1] = (int8)(temp1[i]/256);
   \   0000006E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000070   0xA803             ADD      R0,SP,#+12
   \   00000072   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000076   0x0A00             LSRS     R0,R0,#+8
   \   00000078   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000007A   0xA900             ADD      R1,SP,#+0
   \   0000007C   0xEB11 0x0144      ADDS     R1,R1,R4, LSL #+1
   \   00000080   0x7048             STRB     R0,[R1, #+1]
    798            }
   \   00000082   0x1C64             ADDS     R4,R4,#+1
   \                     ??OutPut_Data_2:
   \   00000084   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000086   0x2C04             CMP      R4,#+4
   \   00000088   0xD3E3             BCC.N    ??OutPut_Data_3
    799            
    800            CRC16 = CRC_CHECK(databuf,8);
   \   0000008A   0x2108             MOVS     R1,#+8
   \   0000008C   0xA800             ADD      R0,SP,#+0
   \   0000008E   0x.... 0x....      BL       CRC_CHECK
    801            databuf[8] = CRC16%256;
   \   00000092   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000094   0xF44F 0x7180      MOV      R1,#+256
   \   00000098   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   0000009C   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   000000A0   0xF88D 0x2008      STRB     R2,[SP, #+8]
    802            databuf[9] = CRC16/256;
   \   000000A4   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000A6   0xF44F 0x7180      MOV      R1,#+256
   \   000000AA   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000000AE   0xF88D 0x0009      STRB     R0,[SP, #+9]
    803            
    804            for(i=0;i<10;i++)
   \   000000B2   0x2400             MOVS     R4,#+0
   \   000000B4   0xE006             B.N      ??OutPut_Data_4
    805            uart_send1 (UART3,databuf[i]);
   \                     ??OutPut_Data_5:
   \   000000B6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000B8   0xA800             ADD      R0,SP,#+0
   \   000000BA   0x5C21             LDRB     R1,[R4, R0]
   \   000000BC   0x....             LDR.N    R0,??DataTable34_21  ;; 0x4006d000
   \   000000BE   0x.... 0x....      BL       uart_send1
   \   000000C2   0x1C64             ADDS     R4,R4,#+1
   \                     ??OutPut_Data_4:
   \   000000C4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000C6   0x2C0A             CMP      R4,#+10
   \   000000C8   0xD3F5             BCC.N    ??OutPut_Data_5
    806          }
   \   000000CA   0xB00C             ADD      SP,SP,#+48
   \   000000CC   0xBD10             POP      {R4,PC}          ;; return
    807          

   \                                 In section .text, align 2, keep-with-next
    808          void KeyScan(void) 
    809          {
   \                     KeyScan:
   \   00000000   0xB580             PUSH     {R7,LR}
    810            if(key_1==0) 
   \   00000002   0x....             LDR.N    R0,??DataTable34_39  ;; 0x400ff010
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0300             LSLS     R0,R0,#+12
   \   00000008   0xD413             BMI.N    ??KeyScan_0
    811            {
    812                delay_ms(10);
   \   0000000A   0x200A             MOVS     R0,#+10
   \   0000000C   0x.... 0x....      BL       delay_ms
    813                if(key_1==0) 
   \   00000010   0x....             LDR.N    R0,??DataTable34_39  ;; 0x400ff010
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x0300             LSLS     R0,R0,#+12
   \   00000016   0xD40C             BMI.N    ??KeyScan_0
    814                {
    815                  a=255;  
   \   00000018   0x....             LDR.N    R0,??DataTable34_40
   \   0000001A   0x21FF             MOVS     R1,#+255
   \   0000001C   0x7001             STRB     R1,[R0, #+0]
    816                  LCD_P8x16_number(10,4,a);    
   \   0000001E   0x....             LDR.N    R0,??DataTable34_40
   \   00000020   0x7802             LDRB     R2,[R0, #+0]
   \   00000022   0x2104             MOVS     R1,#+4
   \   00000024   0x200A             MOVS     R0,#+10
   \   00000026   0x.... 0x....      BL       LCD_P8x16_number
    817                  while(!key_1);
   \                     ??KeyScan_1:
   \   0000002A   0x....             LDR.N    R0,??DataTable34_39  ;; 0x400ff010
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x0300             LSLS     R0,R0,#+12
   \   00000030   0xD5FB             BPL.N    ??KeyScan_1
    818                }
    819            }     
    820          }
   \                     ??KeyScan_0:
   \   00000032   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    821          void KeyScan_1(void) 
    822          {
   \                     KeyScan_1:
   \   00000000   0xB580             PUSH     {R7,LR}
    823            if(key_1==0) 
   \   00000002   0x....             LDR.N    R0,??DataTable34_39  ;; 0x400ff010
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0300             LSLS     R0,R0,#+12
   \   00000008   0xD413             BMI.N    ??KeyScan_1_0
    824            {
    825                delay_ms(10);
   \   0000000A   0x200A             MOVS     R0,#+10
   \   0000000C   0x.... 0x....      BL       delay_ms
    826                if(key_1==0) 
   \   00000010   0x....             LDR.N    R0,??DataTable34_39  ;; 0x400ff010
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x0300             LSLS     R0,R0,#+12
   \   00000016   0xD40C             BMI.N    ??KeyScan_1_0
    827                {
    828                  b=200;  
   \   00000018   0x....             LDR.N    R0,??DataTable34_41
   \   0000001A   0x21C8             MOVS     R1,#+200
   \   0000001C   0x7001             STRB     R1,[R0, #+0]
    829                  LCD_P8x16_number(10,4,b);    
   \   0000001E   0x....             LDR.N    R0,??DataTable34_41
   \   00000020   0x7802             LDRB     R2,[R0, #+0]
   \   00000022   0x2104             MOVS     R1,#+4
   \   00000024   0x200A             MOVS     R0,#+10
   \   00000026   0x.... 0x....      BL       LCD_P8x16_number
    830                  while(!key_1);
   \                     ??KeyScan_1_1:
   \   0000002A   0x....             LDR.N    R0,??DataTable34_39  ;; 0x400ff010
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x0300             LSLS     R0,R0,#+12
   \   00000030   0xD5FB             BPL.N    ??KeyScan_1_1
    831                }
    832            }     
    833          }
   \                     ??KeyScan_1_0:
   \   00000032   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    834          void Clear()
    835          {
    836              g_lnInputVoltageSigma[0]=0;   
   \                     Clear:
   \   00000000   0x....             LDR.N    R0,??DataTable34_42
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x6001             STR      R1,[R0, #+0]
    837              g_lnInputVoltageSigma[1]=0;
   \   00000006   0x....             LDR.N    R0,??DataTable34_42
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x6041             STR      R1,[R0, #+4]
    838              g_lnInputVoltageSigma[2]=0;
   \   0000000C   0x....             LDR.N    R0,??DataTable34_42
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x6081             STR      R1,[R0, #+8]
    839          }
   \   00000012   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   0x........         DC32     g_lnInputVoltageSigma

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_1:
   \   00000000   0x........         DC32     gravity

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_2:
   \   00000000   0x........         DC32     gyro

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   0x........         DC32     g_nInputVoltage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_1:
   \   00000000   0x67381D7E         DC32     0x67381d7e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_2:
   \   00000000   0x3FBF6944         DC32     0x3fbf6944

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_3:
   \   00000000   0x........         DC32     g_fGravityAngle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_4:
   \   00000000   0x3FD33333         DC32     0x3fd33333

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_5:
   \   00000000   0x........         DC32     g_fGyroscopeAngleSpeed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_6:
   \   00000000   0x........         DC32     g_fCarAngle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_7:
   \   00000000   0x3FD66666         DC32     0x3fd66666

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   0x43480000         DC32     0x43480000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_1:
   \   00000000   0x1A9FBE77         DC32     0x1a9fbe77

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_2:
   \   00000000   0x3FC4DD2F         DC32     0x3fc4dd2f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   0xBC6A7EFA         DC32     0xbc6a7efa

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_1:
   \   00000000   0x3F789374         DC32     0x3f789374

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_2:
   \   00000000   0x40039004         DC32     0x40039004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_3:
   \   00000000   0x........         DC32     g_nLeftMotorPulse

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_4:
   \   00000000   0x........         DC32     g_nRightMotorPulse

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_5:
   \   00000000   0x........         DC32     g_fLeftMotorOut

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_6:
   \   00000000   0x........         DC32     g_nLeftMotorPulseSigma

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26:
   \   00000000   0x........         DC32     g_fRightMotorOut

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_1:
   \   00000000   0x........         DC32     g_nRightMotorPulseSigma

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27:
   \   00000000   0x........         DC32     gyro_direction

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_1:
   \   00000000   0x........         DC32     g_fCarSpeed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_2:
   \   00000000   0x47AE147B         DC32     0x47ae147b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_3:
   \   00000000   0x3F947AE1         DC32     0x3f947ae1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_4:
   \   00000000   0x........         DC32     g_fCarSpeedstart

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_5:
   \   00000000   0x41A00000         DC32     0x41a00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_6:
   \   00000000   0x40A00000         DC32     0x40a00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_7:
   \   00000000   0x41A00001         DC32     0x41a00001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_8:
   \   00000000   0xC0A00000         DC32     0xc0a00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_9:
   \   00000000   0x........         DC32     speedflag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_10:
   \   00000000   0x020C49BA         DC32     0x20c49ba

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_11:
   \   00000000   0x3FA6872B         DC32     0x3fa6872b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_12:
   \   00000000   0x4D551D69         DC32     0x4d551d69

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_13:
   \   00000000   0x3EFF7510         DC32     0x3eff7510

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28:
   \   00000000   0x........         DC32     g_fGyroscopeAngleIntergral

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_1:
   \   00000000   0x........         DC32     g_fSpeedControlIntegral

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_2:
   \   00000000   0x41200001         DC32     0x41200001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29:
   \   00000000   0x........         DC32     g_fAngleControlOut

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_1:
   \   00000000   0x400B8004         DC32     0x400b8004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_2:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_3:
   \   00000000   0xC1200000         DC32     0xc1200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_4:
   \   00000000   0x........         DC32     g_fSpeedControlOutOld

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_5:
   \   00000000   0x........         DC32     g_fSpeedControlOutNew

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_6:
   \   00000000   0x........         DC32     g_nSpeedControlPeriod

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable30:
   \   00000000   0x42C80000         DC32     0x42c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable30_1:
   \   00000000   0x400FF100         DC32     0x400ff100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable30_2:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable30_3:
   \   00000000   0x4004904C         DC32     0x4004904c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33:
   \   00000000   0x........         DC32     g_fSpeedControlOut

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_1:
   \   00000000   0x400FF080         DC32     0x400ff080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34:
   \   00000000   0x400FF000         DC32     0x400ff000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_1:
   \   00000000   0x........         DC32     Pixel

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_2:
   \   00000000   0x........         DC32     PixelAverageValue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_3:
   \   00000000   0x........         DC32     PixelAverageVoltage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_4:
   \   00000000   0x........         DC32     TargetPixelAverageVoltage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_5:
   \   00000000   0x........         DC32     PixelAverageVoltageError

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_6:
   \   00000000   0x........         DC32     TargetPixelAverageVoltageAllowError

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_7:
   \   00000000   0x........         DC32     IntegrationTime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_8:
   \   00000000   0x........         DC32     Pixel_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_9:
   \   00000000   0x........         DC32     PixelAverageValue_Right

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_10:
   \   00000000   0x........         DC32     PixelAverageVoltage_Right

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_11:
   \   00000000   0x........         DC32     IntegrationTime_Right

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_12:
   \   00000000   0x........         DC32     left

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_13:
   \   00000000   0x........         DC32     left_OFFSET

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_14:
   \   00000000   0x........         DC32     left_c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_15:
   \   00000000   0x........         DC32     right

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_16:
   \   00000000   0x........         DC32     right_OFFSET

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_17:
   \   00000000   0x........         DC32     right_c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_18:
   \   00000000   0x........         DC32     left_l

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_19:
   \   00000000   0x........         DC32     right_l

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_20:
   \   00000000   0x........         DC32     dev

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_21:
   \   00000000   0x4006D000         DC32     0x4006d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_22:
   \   00000000   0x........         DC32     g_fDirectionControlOutOld

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_23:
   \   00000000   0x........         DC32     g_fDirectionControlOutNew

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_24:
   \   00000000   0xB020C49C         DC32     0xb020c49c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_25:
   \   00000000   0x3F916872         DC32     0x3f916872

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_26:
   \   00000000   0x........         DC32     g_nInputVoltage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_27:
   \   00000000   0x8DB8BAC7         DC32     0x8db8bac7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_28:
   \   00000000   0x3F46F006         DC32     0x3f46f006

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_29:
   \   00000000   0x3F800001         DC32     0x3f800001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_30:
   \   00000000   0xBF800000         DC32     0xbf800000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_31:
   \   00000000   0x........         DC32     g_nDirectionControlPeriod

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_32:
   \   00000000   0x........         DC32     g_fDirectionControlOut

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_33:
   \   00000000   0x........         DC32     g_fLeftMotorOut

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_34:
   \   00000000   0x........         DC32     g_fRightMotorOut

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_35:
   \   00000000   0x400FF040         DC32     0x400ff040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_36:
   \   00000000   0x40038018         DC32     0x40038018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_37:
   \   00000000   0x40038010         DC32     0x40038010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_38:
   \   00000000   0x........         DC32     OutData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_39:
   \   00000000   0x400FF010         DC32     0x400ff010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_40:
   \   00000000   0x........         DC32     a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_41:
   \   00000000   0x........         DC32     `b`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_42:
   \   00000000   0x........         DC32     g_lnInputVoltageSigma

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
    840          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  ADC0_start
              8 -> hw_adc_convertstart
        8  ADC0_stop
              8 -> hw_adc_convertstop
        4  AngleCalculate
              4 -> __aeabi_d2f
              4 -> __aeabi_ddiv
              4 -> __aeabi_dmul
              4 -> __aeabi_f2d
              4 -> __aeabi_fadd
              4 -> __aeabi_fdiv
              4 -> __aeabi_fsub
              4 -> __aeabi_i2d
       12  AngleControl
             12 -> __aeabi_d2f
             12 -> __aeabi_dadd
             12 -> __aeabi_dmul
             12 -> __aeabi_f2d
        0  BlackManange
        8  CCD_init
              8 -> gpio_init
              8 -> hw_adc_init
        8  CRC_CHECK
        8  CalculateIntegrationTime
              8 -> PixelAverage
        8  CalculateIntegrationTimeRight
              8 -> PixelAverage
        0  Clear
        8  DirectionControl
              8 -> __aeabi_cfcmple
              8 -> __aeabi_cfrcmple
              8 -> __aeabi_d2f
              8 -> __aeabi_dmul
              8 -> __aeabi_f2d
              8 -> __aeabi_fadd
              8 -> __aeabi_i2d
              8 -> __aeabi_i2f
        8  DirectionControlOutput
              8 -> __aeabi_fadd
              8 -> __aeabi_fdiv
              8 -> __aeabi_fmul
              8 -> __aeabi_fsub
              8 -> __aeabi_i2f
        0  GetInputVoltageAverage
        4  GetMotorPulse
              4 -> __aeabi_cfrcmple
        0  GetOFFSET
        8  GetSamplezhi
              8 -> hw_ad_ave
       16  ImageCapture
             16 -> SamplingDelay
             16 -> gpio_init
             16 -> hw_ad_once
       16  ImageCapture_1
             16 -> SamplingDelay
             16 -> gpio_init
             16 -> hw_ad_once
        8  KeyScan
              8 -> LCD_P8x16_number
              8 -> delay_ms
        8  KeyScan_1
              8 -> LCD_P8x16_number
              8 -> delay_ms
        8  LCD_show
              8 -> LCD_P8x16_number
              8 -> delay_ms
        8  MotorOutput
              8 -> MotorSpeedOut
              8 -> __aeabi_cfcmple
              8 -> __aeabi_cfrcmple
              8 -> __aeabi_fadd
              8 -> __aeabi_fsub
        8  MotorSpeedOut
              8 -> SetMotorVoltage
              8 -> __aeabi_cfcmple
              8 -> __aeabi_cfrcmple
       56  OutPut_Data
             56 -> CRC_CHECK
             56 -> __aeabi_memclr4
             56 -> uart_send1
        4  PixelAverage
        4  SamplingDelay
        8  SendHex
              8 -> uart_send1
       16  SendImageData
             16 -> SendHex
             16 -> uart_send1
       16  SetMotorVoltage
             16 -> __aeabi_cfcmple
             16 -> __aeabi_cfrcmple
             16 -> __aeabi_f2iz
             16 -> __aeabi_fmul
             16 -> __aeabi_i2f
             16 -> gpio_init
       12  SpeedControl
             12 -> __aeabi_cfcmple
             12 -> __aeabi_cfrcmple
             12 -> __aeabi_d2f
             12 -> __aeabi_dmul
             12 -> __aeabi_f2d
             12 -> __aeabi_fadd
             12 -> __aeabi_fsub
             12 -> __aeabi_i2f
        8  SpeedControlOutput
              8 -> __aeabi_fadd
              8 -> __aeabi_fdiv
              8 -> __aeabi_fmul
              8 -> __aeabi_fsub
              8 -> __aeabi_i2f
        8  StartIntegration
              8 -> SamplingDelay
              8 -> gpio_init
        8  StartIntegrationRight
              8 -> SamplingDelay
              8 -> gpio_init
        8  button_init
              8 -> gpio_init
        8  getCCD
              8 -> CalculateIntegrationTime
              8 -> CalculateIntegrationTimeRight
              8 -> ImageCapture
              8 -> ImageCapture_1
              8 -> get_left
              8 -> get_right
        8  get_ad
              8 -> hw_ad_ave
        0  get_left
        0  get_right
       24  serial_Txd
             24 -> delay_ms
             24 -> uart_send1
        0  virtual_scope_show


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant {0}>
      16  ?<Constant {0}>_1
      16  ?<Constant {0}>_2
      12  ?<Constant {0}>_3
       4  ??DataTable22
       4  ??DataTable22_1
       4  ??DataTable22_2
       4  ??DataTable23
       4  ??DataTable23_1
       4  ??DataTable23_2
       4  ??DataTable23_3
       4  ??DataTable23_4
       4  ??DataTable23_5
       4  ??DataTable23_6
       4  ??DataTable23_7
       4  ??DataTable24
       4  ??DataTable24_1
       4  ??DataTable24_2
       4  ??DataTable25
       4  ??DataTable25_1
       4  ??DataTable25_2
       4  ??DataTable25_3
       4  ??DataTable25_4
       4  ??DataTable25_5
       4  ??DataTable25_6
       4  ??DataTable26
       4  ??DataTable26_1
       4  ??DataTable27
       4  ??DataTable27_1
       4  ??DataTable27_10
       4  ??DataTable27_11
       4  ??DataTable27_12
       4  ??DataTable27_13
       4  ??DataTable27_2
       4  ??DataTable27_3
       4  ??DataTable27_4
       4  ??DataTable27_5
       4  ??DataTable27_6
       4  ??DataTable27_7
       4  ??DataTable27_8
       4  ??DataTable27_9
       4  ??DataTable28
       4  ??DataTable28_1
       4  ??DataTable28_2
       4  ??DataTable29
       4  ??DataTable29_1
       4  ??DataTable29_2
       4  ??DataTable29_3
       4  ??DataTable29_4
       4  ??DataTable29_5
       4  ??DataTable29_6
       4  ??DataTable30
       4  ??DataTable30_1
       4  ??DataTable30_2
       4  ??DataTable30_3
       4  ??DataTable33
       4  ??DataTable33_1
       4  ??DataTable34
       4  ??DataTable34_1
       4  ??DataTable34_10
       4  ??DataTable34_11
       4  ??DataTable34_12
       4  ??DataTable34_13
       4  ??DataTable34_14
       4  ??DataTable34_15
       4  ??DataTable34_16
       4  ??DataTable34_17
       4  ??DataTable34_18
       4  ??DataTable34_19
       4  ??DataTable34_2
       4  ??DataTable34_20
       4  ??DataTable34_21
       4  ??DataTable34_22
       4  ??DataTable34_23
       4  ??DataTable34_24
       4  ??DataTable34_25
       4  ??DataTable34_26
       4  ??DataTable34_27
       4  ??DataTable34_28
       4  ??DataTable34_29
       4  ??DataTable34_3
       4  ??DataTable34_30
       4  ??DataTable34_31
       4  ??DataTable34_32
       4  ??DataTable34_33
       4  ??DataTable34_34
       4  ??DataTable34_35
       4  ??DataTable34_36
       4  ??DataTable34_37
       4  ??DataTable34_38
       4  ??DataTable34_39
       4  ??DataTable34_4
       4  ??DataTable34_40
       4  ??DataTable34_41
       4  ??DataTable34_42
       4  ??DataTable34_5
       4  ??DataTable34_6
       4  ??DataTable34_7
       4  ??DataTable34_8
       4  ??DataTable34_9
      34  ADC0_start
      28  ADC0_stop
     174  AngleCalculate
      78  AngleControl
     174  BlackManange
      66  CCD_init
      68  CRC_CHECK
     166  CalculateIntegrationTime
     166  CalculateIntegrationTimeRight
      20  Clear
     136  DirectionControl
      64  DirectionControlOutput
      42  GetInputVoltageAverage
     146  GetMotorPulse
      62  GetOFFSET
      88  GetSamplezhi
     218  ImageCapture
     218  ImageCapture_1
       1  IntegrationTime
       1  IntegrationTime_Right
      52  KeyScan
      52  KeyScan_1
      74  LCD_show
     136  MotorOutput
      88  MotorSpeedOut
       8  OutData
     206  OutPut_Data
      40  PixelAverage
       1  PixelAverageValue
       1  PixelAverageValue_Right
       1  PixelAverageVoltage
       2  PixelAverageVoltageError
       1  PixelAverageVoltage_Right
      36  SamplingDelay
      86  SendHex
     100  SendImageData
     268  SetMotorVoltage
     366  SpeedControl
      64  SpeedControlOutput
     172  StartIntegration
     172  StartIntegrationRight
       2  TargetPixelAverageVoltage
       2  TargetPixelAverageVoltageAllowError
      46  button_init
       2  dev
       4  g_fAngleControlOut
       4  g_fCarAngle
       4  g_fCarSpeed
       4  g_fCarSpeedstart
       4  g_fDirectionControlOut
       4  g_fDirectionControlOutNew
       4  g_fDirectionControlOutOld
       4  g_fGravityAngle
       4  g_fGyroscopeAngleIntergral
       4  g_fGyroscopeAngleSpeed
       4  g_fLeftMotorOut
       4  g_fRightMotorOut
       4  g_fSpeedControlIntegral
       4  g_fSpeedControlOut
       4  g_fSpeedControlOutNew
       4  g_fSpeedControlOutOld
      20  g_lnInputVoltageSigma
       2  g_nDirectionControlPeriod
      12  g_nInputVoltage
       2  g_nLeftMotorPulse
       2  g_nLeftMotorPulseSigma
       2  g_nRightMotorPulse
       2  g_nRightMotorPulseSigma
       1  g_nSpeedControlPeriod
      76  getCCD
      58  get_ad
      76  get_left
      74  get_right
       2  gravity
       2  gyro
       2  gyro_direction
       2  left
       2  left_OFFSET
       2  left_c
       2  left_l
       2  right
       2  right_OFFSET
       2  right_c
       2  right_l
     126  serial_Txd
      26  virtual_scope_show

 
   145 bytes in section .bss
     6 bytes in section .data
    56 bytes in section .rodata
 4 726 bytes in section .text
 
 4 726 bytes of CODE  memory
    56 bytes of CONST memory
   151 bytes of DATA  memory

Errors: none
Warnings: none
