###############################################################################
#                                                                             #
#                                                       30/Sep/2013  20:34:14 #
# IAR ANSI C/C++ Compiler V6.30.4.23288/W32 EVALUATION for ARM                #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\balance car（9.28高速但出赛道）\src\Sources\C\isr.c   #
#    Command line =  "D:\balance car（9.28高速但出赛道）\src\Sources\C\isr.c" #
#                     -D IAR -D TWR_K60N512 -lCN "D:\balance                  #
#                    car（9.28高速但出赛道）\bin\Flash\List\" -lB             #
#                    "D:\balance car（9.28高速但出赛道）\bin\Flash\List\" -o  #
#                    "D:\balance car（9.28高速但出赛道）\bin\Flash\Obj\"      #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=None            #
#                    --dlib_config E:\IAREW6.3\arm\INC\c\DLib_Config_Normal.h #
#                     -I "D:\balance car（9.28高速但出赛道）\src\Sources\H\"  #
#                    -I "D:\balance car（9.28高速但出赛道）\src\Sources\H\Com #
#                    ponent_H\" -I "D:\balance car（9.28高速但出赛道）\src\So #
#                    urces\H\Frame_H\" -Ol --use_c++_inline                   #
#    List file    =  D:\balance car（9.28高速但出赛道）\bin\Flash\List\isr.ls #
#                    t                                                        #
#    Object file  =  D:\balance car（9.28高速但出赛道）\bin\Flash\Obj\isr.o   #
#                                                                             #
#                                                                             #
###############################################################################

D:\balance car（9.28高速但出赛道）\src\Sources\C\isr.c
      1          //-------------------------------------------------------------------------*
      2          // 文件名: isr.c                                                           *
      3          // 说  明: 中断处理例程                                                    *
      4          //---------------苏州大学飞思卡尔嵌入式系统实验室2011年--------------------*
      5          
      6          #include "includes.h"

   \                                 In section .bss, align 1
      7          uint8        g_n1MSEventCount =0;
   \                     g_n1MSEventCount:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
      8          static uint8 TimerCnt20ms = 0;
   \                     TimerCnt20ms:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
      9          uint8        g_nSpeedControlCount =0;
   \                     g_nSpeedControlCount:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     10          uint8        g_nDirectionControlCount =0;
   \                     g_nDirectionControlCount:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     11          uint8        Pixel[128]={0};
   \                     Pixel:
   \   00000000                      DS8 128

   \                                 In section .bss, align 4
     12          uint8        Pixel_1[128]={0};
   \                     Pixel_1:
   \   00000000                      DS8 128

   \                                 In section .bss, align 1
     13          uint8        TIME1flag_20ms=0;
   \                     TIME1flag_20ms:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
     14          int16 speedflag=0;
   \                     speedflag:
   \   00000000                      DS8 2
     15          extern uint8 g_nSpeedControlPeriod;
     16          extern uint8 g_nDirectionControlPeriod;
     17          extern uint8 IntegrationTime;
     18          extern uint8 IntegrationTime_Right;
     19          extern uint8 integration_piont;
     20          extern uint8 integration_piont_Right;
     21          

   \                                 In section .text, align 4, keep-with-next
     22          void pit0_isr(void)                    //定时器1ms中断函数
     23          {  
   \                     pit0_isr:
   \   00000000   0xB580             PUSH     {R7,LR}
     24                   DisableInterrupts;            //关总中断
   \   00000002   0xB672             CPSID i         
     25                                                       
     26                   integration_piont = 20 - IntegrationTime; 
   \   00000004   0x484F             LDR.N    R0,??pit0_isr_0
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0xF1D0 0x0014      RSBS     R0,R0,#+20
   \   0000000C   0x494E             LDR.N    R1,??pit0_isr_0+0x4
   \   0000000E   0x7008             STRB     R0,[R1, #+0]
     27                   if(integration_piont >= 2)   //曝光点小于2不进行再曝光                 
   \   00000010   0x484D             LDR.N    R0,??pit0_isr_0+0x4
   \   00000012   0x7800             LDRB     R0,[R0, #+0]
   \   00000014   0x2802             CMP      R0,#+2
   \   00000016   0xD307             BCC.N    ??pit0_isr_1
     28                   {      
     29                      if(integration_piont == TimerCnt20ms) 
   \   00000018   0x484B             LDR.N    R0,??pit0_isr_0+0x4
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x494B             LDR.N    R1,??pit0_isr_0+0x8
   \   0000001E   0x7809             LDRB     R1,[R1, #+0]
   \   00000020   0x4288             CMP      R0,R1
   \   00000022   0xD101             BNE.N    ??pit0_isr_1
     30                        StartIntegration();               
   \   00000024   0x.... 0x....      BL       StartIntegration
     31                   }
     32                
     33                   integration_piont_Right = 20 - IntegrationTime_Right;
   \                     ??pit0_isr_1:
   \   00000028   0x4849             LDR.N    R0,??pit0_isr_0+0xC
   \   0000002A   0x7800             LDRB     R0,[R0, #+0]
   \   0000002C   0xF1D0 0x0014      RSBS     R0,R0,#+20
   \   00000030   0x4948             LDR.N    R1,??pit0_isr_0+0x10
   \   00000032   0x7008             STRB     R0,[R1, #+0]
     34                   if(integration_piont_Right >= 2)//曝光点小于2不进行再曝光                 
   \   00000034   0x4847             LDR.N    R0,??pit0_isr_0+0x10
   \   00000036   0x7800             LDRB     R0,[R0, #+0]
   \   00000038   0x2802             CMP      R0,#+2
   \   0000003A   0xD307             BCC.N    ??pit0_isr_2
     35                   {      
     36                      if(integration_piont_Right == TimerCnt20ms)
   \   0000003C   0x4845             LDR.N    R0,??pit0_isr_0+0x10
   \   0000003E   0x7800             LDRB     R0,[R0, #+0]
   \   00000040   0x4942             LDR.N    R1,??pit0_isr_0+0x8
   \   00000042   0x7809             LDRB     R1,[R1, #+0]
   \   00000044   0x4288             CMP      R0,R1
   \   00000046   0xD101             BNE.N    ??pit0_isr_2
     37                        StartIntegrationRight();              
   \   00000048   0x.... 0x....      BL       StartIntegrationRight
     38                   }
     39                   
     40                   TimerCnt20ms++;
   \                     ??pit0_isr_2:
   \   0000004C   0x483F             LDR.N    R0,??pit0_isr_0+0x8
   \   0000004E   0x7800             LDRB     R0,[R0, #+0]
   \   00000050   0x1C40             ADDS     R0,R0,#+1
   \   00000052   0x493E             LDR.N    R1,??pit0_isr_0+0x8
   \   00000054   0x7008             STRB     R0,[R1, #+0]
     41                   if(TimerCnt20ms>=20)
   \   00000056   0x483D             LDR.N    R0,??pit0_isr_0+0x8
   \   00000058   0x7800             LDRB     R0,[R0, #+0]
   \   0000005A   0x2814             CMP      R0,#+20
   \   0000005C   0xD30F             BCC.N    ??pit0_isr_3
     42                   {   
     43                      TimerCnt20ms=0;
   \   0000005E   0x483B             LDR.N    R0,??pit0_isr_0+0x8
   \   00000060   0x2100             MOVS     R1,#+0
   \   00000062   0x7001             STRB     R1,[R0, #+0]
     44                      ImageCapture(Pixel);
   \   00000064   0x483C             LDR.N    R0,??pit0_isr_0+0x14
   \   00000066   0x.... 0x....      BL       ImageCapture
     45                      CalculateIntegrationTime();            
   \   0000006A   0x.... 0x....      BL       CalculateIntegrationTime
     46                      ImageCapture_1(Pixel_1);
   \   0000006E   0x483B             LDR.N    R0,??pit0_isr_0+0x18
   \   00000070   0x.... 0x....      BL       ImageCapture_1
     47                      CalculateIntegrationTimeRight();            
   \   00000074   0x.... 0x....      BL       CalculateIntegrationTimeRight
     48                      TIME1flag_20ms = 1;
   \   00000078   0x4839             LDR.N    R0,??pit0_isr_0+0x1C
   \   0000007A   0x2101             MOVS     R1,#+1
   \   0000007C   0x7001             STRB     R1,[R0, #+0]
     49                   }
     50                   //--------------------------------------------------------------------------
     51                   g_nSpeedControlPeriod ++;
   \                     ??pit0_isr_3:
   \   0000007E   0x4839             LDR.N    R0,??pit0_isr_0+0x20
   \   00000080   0x7800             LDRB     R0,[R0, #+0]
   \   00000082   0x1C40             ADDS     R0,R0,#+1
   \   00000084   0x4937             LDR.N    R1,??pit0_isr_0+0x20
   \   00000086   0x7008             STRB     R0,[R1, #+0]
     52                   SpeedControlOutput();          
   \   00000088   0x.... 0x....      BL       SpeedControlOutput
     53                   g_nDirectionControlPeriod ++;
   \   0000008C   0x4836             LDR.N    R0,??pit0_isr_0+0x24
   \   0000008E   0x7800             LDRB     R0,[R0, #+0]
   \   00000090   0x1C40             ADDS     R0,R0,#+1
   \   00000092   0x4935             LDR.N    R1,??pit0_isr_0+0x24
   \   00000094   0x7008             STRB     R0,[R1, #+0]
     54                   DirectionControlOutput();
   \   00000096   0x.... 0x....      BL       DirectionControlOutput
     55                   
     56                   g_n1MSEventCount ++;
   \   0000009A   0x4834             LDR.N    R0,??pit0_isr_0+0x28
   \   0000009C   0x7800             LDRB     R0,[R0, #+0]
   \   0000009E   0x1C40             ADDS     R0,R0,#+1
   \   000000A0   0x4932             LDR.N    R1,??pit0_isr_0+0x28
   \   000000A2   0x7008             STRB     R0,[R1, #+0]
     57                   switch(g_n1MSEventCount)
   \   000000A4   0x4831             LDR.N    R0,??pit0_isr_0+0x28
   \   000000A6   0x7800             LDRB     R0,[R0, #+0]
   \   000000A8   0x2801             CMP      R0,#+1
   \   000000AA   0xD007             BEQ.N    ??pit0_isr_4
   \   000000AC   0xD33E             BCC.N    ??pit0_isr_5
   \   000000AE   0x2803             CMP      R0,#+3
   \   000000B0   0xD00E             BEQ.N    ??pit0_isr_6
   \   000000B2   0xD308             BCC.N    ??pit0_isr_7
   \   000000B4   0x2805             CMP      R0,#+5
   \   000000B6   0xD034             BEQ.N    ??pit0_isr_8
   \   000000B8   0xD321             BCC.N    ??pit0_isr_9
   \   000000BA   0xE037             B.N      ??pit0_isr_5
     58                   {
     59                   case 1:
     60                        get_ad();
   \                     ??pit0_isr_4:
   \   000000BC   0x.... 0x....      BL       get_ad
     61          	      AngleCalculate(); 
   \   000000C0   0x.... 0x....      BL       AngleCalculate
     62                        break;
   \   000000C4   0xE032             B.N      ??pit0_isr_5
     63                   case 2:
     64                        AngleControl();
   \                     ??pit0_isr_7:
   \   000000C6   0x.... 0x....      BL       AngleControl
     65                        MotorOutput();//---1
   \   000000CA   0x.... 0x....      BL       MotorOutput
     66                        break;
   \   000000CE   0xE02D             B.N      ??pit0_isr_5
     67                   case 3:
     68                        g_nSpeedControlCount ++;
   \                     ??pit0_isr_6:
   \   000000D0   0x4827             LDR.N    R0,??pit0_isr_0+0x2C
   \   000000D2   0x7800             LDRB     R0,[R0, #+0]
   \   000000D4   0x1C40             ADDS     R0,R0,#+1
   \   000000D6   0x4926             LDR.N    R1,??pit0_isr_0+0x2C
   \   000000D8   0x7008             STRB     R0,[R1, #+0]
     69            	      if(g_nSpeedControlCount >= 20)
   \   000000DA   0x4825             LDR.N    R0,??pit0_isr_0+0x2C
   \   000000DC   0x7800             LDRB     R0,[R0, #+0]
   \   000000DE   0x2814             CMP      R0,#+20
   \   000000E0   0xD30C             BCC.N    ??pit0_isr_10
     70            	      {
     71                           speedflag++;
   \   000000E2   0x4824             LDR.N    R0,??pit0_isr_0+0x30
   \   000000E4   0x8800             LDRH     R0,[R0, #+0]
   \   000000E6   0x1C40             ADDS     R0,R0,#+1
   \   000000E8   0x4922             LDR.N    R1,??pit0_isr_0+0x30
   \   000000EA   0x8008             STRH     R0,[R1, #+0]
     72            	         SpeedControl();
   \   000000EC   0x.... 0x....      BL       SpeedControl
     73            		 g_nSpeedControlCount = 0;
   \   000000F0   0x481F             LDR.N    R0,??pit0_isr_0+0x2C
   \   000000F2   0x2100             MOVS     R1,#+0
   \   000000F4   0x7001             STRB     R1,[R0, #+0]
     74            		 g_nSpeedControlPeriod = 0; 			
   \   000000F6   0x481B             LDR.N    R0,??pit0_isr_0+0x20
   \   000000F8   0x2100             MOVS     R1,#+0
   \   000000FA   0x7001             STRB     R1,[R0, #+0]
     75            	      }
     76                        //MotorOutput();//---2
     77                        break;
   \                     ??pit0_isr_10:
   \   000000FC   0xE016             B.N      ??pit0_isr_5
     78                   case 4:
     79                        g_nDirectionControlCount ++;
   \                     ??pit0_isr_9:
   \   000000FE   0x481E             LDR.N    R0,??pit0_isr_0+0x34
   \   00000100   0x7800             LDRB     R0,[R0, #+0]
   \   00000102   0x1C40             ADDS     R0,R0,#+1
   \   00000104   0x491C             LDR.N    R1,??pit0_isr_0+0x34
   \   00000106   0x7008             STRB     R0,[R1, #+0]
     80               	      if(g_nDirectionControlCount >=2)
   \   00000108   0x481B             LDR.N    R0,??pit0_isr_0+0x34
   \   0000010A   0x7800             LDRB     R0,[R0, #+0]
   \   0000010C   0x2802             CMP      R0,#+2
   \   0000010E   0xD307             BCC.N    ??pit0_isr_11
     81          	      {
     82          	         DirectionControl();
   \   00000110   0x.... 0x....      BL       DirectionControl
     83          	  	 g_nDirectionControlCount = 0;
   \   00000114   0x4818             LDR.N    R0,??pit0_isr_0+0x34
   \   00000116   0x2100             MOVS     R1,#+0
   \   00000118   0x7001             STRB     R1,[R0, #+0]
     84          	  	 g_nDirectionControlPeriod = 0;
   \   0000011A   0x4813             LDR.N    R0,??pit0_isr_0+0x24
   \   0000011C   0x2100             MOVS     R1,#+0
   \   0000011E   0x7001             STRB     R1,[R0, #+0]
     85          	      }
     86                        //MotorOutput();//---3
     87                        break;
   \                     ??pit0_isr_11:
   \   00000120   0xE004             B.N      ??pit0_isr_5
     88                   case 5:
     89                        g_n1MSEventCount = 0;                  
   \                     ??pit0_isr_8:
   \   00000122   0x4812             LDR.N    R0,??pit0_isr_0+0x28
   \   00000124   0x2100             MOVS     R1,#+0
   \   00000126   0x7001             STRB     R1,[R0, #+0]
     90                        GetMotorPulse();
   \   00000128   0x.... 0x....      BL       GetMotorPulse
     91                        break;        
     92                   }
     93                   
     94          /*         
     95                     if(g_n1MSEventCount >=5)
     96            	 {                                          
     97                     g_n1MSEventCount = 0;                  
     98                     GetMotorPulse();
     99            	 }
    100          
    101            	 else if(g_n1MSEventCount == 1) 
    102            	 {                                        
    103                       get_ad();
    104          	     AngleCalculate();   
    105            	 }
    106                  
    107            	 else if(g_n1MSEventCount == 2) 
    108            	 {    
    109                       AngleControl();
    110                       MotorOutput();                       		
    111            	 }
    112          
    113           	 else if(g_n1MSEventCount == 3)
    114            	 {                                      
    115            	     g_nSpeedControlCount ++;
    116            	     if(g_nSpeedControlCount >= 20)
    117            	     {
    118            	         SpeedControl();
    119            		 g_nSpeedControlCount = 0;
    120            		 g_nSpeedControlPeriod = 0;  			
    121            	     }
    122            	 } 
    123          
    124                   else if(g_n1MSEventCount == 4)
    125            	 {    
    126                       g_nDirectionControlCount ++;
    127               	     if(g_nDirectionControlCount >=2)
    128          	     {
    129          	         DirectionControl();
    130          	  	 g_nDirectionControlCount = 0;
    131          	  	 g_nDirectionControlPeriod = 0;
    132          	     }
    133              	 }
    134          */        
    135                   PIT_TFLG(0)|=PIT_TFLG_TIF_MASK;          //清中断标志位
   \                     ??pit0_isr_5:
   \   0000012C   0x4813             LDR.N    R0,??pit0_isr_0+0x38  ;; 0x4003710c
   \   0000012E   0x6800             LDR      R0,[R0, #+0]
   \   00000130   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000134   0x4911             LDR.N    R1,??pit0_isr_0+0x38  ;; 0x4003710c
   \   00000136   0x6008             STR      R0,[R1, #+0]
    136                   enable_pit_interrupt(0);
   \   00000138   0x2000             MOVS     R0,#+0
   \   0000013A   0x.... 0x....      BL       enable_pit_interrupt
    137                   EnableInterrupts;                        //开总中断
   \   0000013E   0xB662             CPSIE i         
    138          }
   \   00000140   0xBD01             POP      {R0,PC}          ;; return
   \   00000142   0xBF00             Nop      
   \                     ??pit0_isr_0:
   \   00000144   0x........         DC32     IntegrationTime
   \   00000148   0x........         DC32     integration_piont
   \   0000014C   0x........         DC32     TimerCnt20ms
   \   00000150   0x........         DC32     IntegrationTime_Right
   \   00000154   0x........         DC32     integration_piont_Right
   \   00000158   0x........         DC32     Pixel
   \   0000015C   0x........         DC32     Pixel_1
   \   00000160   0x........         DC32     TIME1flag_20ms
   \   00000164   0x........         DC32     g_nSpeedControlPeriod
   \   00000168   0x........         DC32     g_nDirectionControlPeriod
   \   0000016C   0x........         DC32     g_n1MSEventCount
   \   00000170   0x........         DC32     g_nSpeedControlCount
   \   00000174   0x........         DC32     speedflag
   \   00000178   0x........         DC32     g_nDirectionControlCount
   \   0000017C   0x4003710C         DC32     0x4003710c

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  pit0_isr
             8 -> AngleCalculate
             8 -> AngleControl
             8 -> CalculateIntegrationTime
             8 -> CalculateIntegrationTimeRight
             8 -> DirectionControl
             8 -> DirectionControlOutput
             8 -> GetMotorPulse
             8 -> ImageCapture
             8 -> ImageCapture_1
             8 -> MotorOutput
             8 -> SpeedControl
             8 -> SpeedControlOutput
             8 -> StartIntegration
             8 -> StartIntegrationRight
             8 -> enable_pit_interrupt
             8 -> get_ad


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     128  Pixel
     128  Pixel_1
       1  TIME1flag_20ms
       1  TimerCnt20ms
       1  g_n1MSEventCount
       1  g_nDirectionControlCount
       1  g_nSpeedControlCount
     384  pit0_isr
       2  speedflag

 
 263 bytes in section .bss
 384 bytes in section .text
 
 384 bytes of CODE memory
 263 bytes of DATA memory

Errors: none
Warnings: none
