###############################################################################
#                                                                             #
#                                                       04/May/2013  16:29:25 #
# IAR ANSI C/C++ Compiler V6.30.4.23288/W32 EVALUATION for ARM                #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\hp\Desktop\balance                              #
#                    car\src\Sources\C\Component_C\decoder.c                  #
#    Command line =  "C:\Users\hp\Desktop\balance                             #
#                    car\src\Sources\C\Component_C\decoder.c" -D IAR -D       #
#                    TWR_K60N512 -lCN "C:\Users\hp\Desktop\balance            #
#                    car\bin\Ram\List\" -lB "C:\Users\hp\Desktop\balance      #
#                    car\bin\Ram\List\" -o "C:\Users\hp\Desktop\balance       #
#                    car\bin\Ram\Obj\" --no_cse --no_unroll --no_inline       #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config                              #
#                    F:\iar\arm\INC\c\DLib_Config_Normal.h -I                 #
#                    "C:\Users\hp\Desktop\balance car\src\Sources\H\" -I      #
#                    "C:\Users\hp\Desktop\balance                             #
#                    car\src\Sources\H\Component_H\" -I                       #
#                    "C:\Users\hp\Desktop\balance                             #
#                    car\src\Sources\H\Frame_H\" -Ol --use_c++_inline         #
#    List file    =  C:\Users\hp\Desktop\balance car\bin\Ram\List\decoder.lst #
#    Object file  =  C:\Users\hp\Desktop\balance car\bin\Ram\Obj\decoder.o    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\hp\Desktop\balance car\src\Sources\C\Component_C\decoder.c
      1          #include "common.h"
      2          #include  "decoder.h"
      3          
      4          
      5          
      6          /*==============================================================================
      7          功能：FTM1、FTM2模块双路正交脉冲计数；
      8          引脚：PTA12、PTA13、PTB18、PTB19
      9          内容：初始化FTM1、FTM2的正交解码功能；
     10          参数：无
     11          ==============================================================================*/

   \                                 In section .text, align 4, keep-with-next
     12          void FTM_QUAD_init()
     13          {
     14             /*使能FTM1、FTM2时钟*/
     15            SIM_SCGC6|=SIM_SCGC6_FTM1_MASK;
   \                     FTM_QUAD_init:
   \   00000000   0x4830             LDR.N    R0,??FTM_QUAD_init_0  ;; 0x4004803c
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   00000008   0x492E             LDR.N    R1,??FTM_QUAD_init_0  ;; 0x4004803c
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     16            SIM_SCGC3|=SIM_SCGC3_FTM2_MASK;
   \   0000000C   0x482E             LDR.N    R0,??FTM_QUAD_init_0+0x4  ;; 0x40048030
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF050 0x7080      ORRS     R0,R0,#0x1000000
   \   00000014   0x492C             LDR.N    R1,??FTM_QUAD_init_0+0x4  ;; 0x40048030
   \   00000016   0x6008             STR      R0,[R1, #+0]
     17            /*开启端口时钟*/
     18           // SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
     19            
     20            /*选择管脚复用功能*/
     21            PORTA_PCR12 = PORT_PCR_MUX(7);                          //特定芯片是什么功能
   \   00000018   0x482C             LDR.N    R0,??FTM_QUAD_init_0+0x8  ;; 0x40049030
   \   0000001A   0xF44F 0x61E0      MOV      R1,#+1792
   \   0000001E   0x6001             STR      R1,[R0, #+0]
     22            PORTA_PCR13 = PORT_PCR_MUX(7);
   \   00000020   0x482B             LDR.N    R0,??FTM_QUAD_init_0+0xC  ;; 0x40049034
   \   00000022   0xF44F 0x61E0      MOV      R1,#+1792
   \   00000026   0x6001             STR      R1,[R0, #+0]
     23           // PORTA_PCR10 = PORT_PCR_MUX(6);
     24           // PORTA_PCR11 = PORT_PCR_MUX(6);
     25            PORTB_PCR18 = PORT_PCR_MUX(6);
   \   00000028   0x482A             LDR.N    R0,??FTM_QUAD_init_0+0x10  ;; 0x4004a048
   \   0000002A   0xF44F 0x61C0      MOV      R1,#+1536
   \   0000002E   0x6001             STR      R1,[R0, #+0]
     26            PORTB_PCR19 = PORT_PCR_MUX(6);
   \   00000030   0x4829             LDR.N    R0,??FTM_QUAD_init_0+0x14  ;; 0x4004a04c
   \   00000032   0xF44F 0x61C0      MOV      R1,#+1536
   \   00000036   0x6001             STR      R1,[R0, #+0]
     27           
     28            FTM1_MOD = 65535;                                        //可根据需要设置
   \   00000038   0x4828             LDR.N    R0,??FTM_QUAD_init_0+0x18  ;; 0x40039008
   \   0000003A   0xF64F 0x71FF      MOVW     R1,#+65535
   \   0000003E   0x6001             STR      R1,[R0, #+0]
     29            FTM2_MOD = 65535;
   \   00000040   0x4827             LDR.N    R0,??FTM_QUAD_init_0+0x1C  ;; 0x400b8008
   \   00000042   0xF64F 0x71FF      MOVW     R1,#+65535
   \   00000046   0x6001             STR      R1,[R0, #+0]
     30            FTM1_CNTIN = 0;
   \   00000048   0x4826             LDR.N    R0,??FTM_QUAD_init_0+0x20  ;; 0x4003904c
   \   0000004A   0x2100             MOVS     R1,#+0
   \   0000004C   0x6001             STR      R1,[R0, #+0]
     31            FTM2_CNTIN = 0;
   \   0000004E   0x4826             LDR.N    R0,??FTM_QUAD_init_0+0x24  ;; 0x400b804c
   \   00000050   0x2100             MOVS     R1,#+0
   \   00000052   0x6001             STR      R1,[R0, #+0]
     32            FTM1_MODE |= FTM_MODE_WPDIS_MASK;                        //禁止写保护
   \   00000054   0x4825             LDR.N    R0,??FTM_QUAD_init_0+0x28  ;; 0x40039054
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   0000005C   0x4923             LDR.N    R1,??FTM_QUAD_init_0+0x28  ;; 0x40039054
   \   0000005E   0x6008             STR      R0,[R1, #+0]
     33            FTM2_MODE |= FTM_MODE_WPDIS_MASK;                        //禁止写保护
   \   00000060   0x4823             LDR.N    R0,??FTM_QUAD_init_0+0x2C  ;; 0x400b8054
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000068   0x4921             LDR.N    R1,??FTM_QUAD_init_0+0x2C  ;; 0x400b8054
   \   0000006A   0x6008             STR      R0,[R1, #+0]
     34            FTM1_MODE |= FTM_MODE_FTMEN_MASK;                        //FTMEN=1,关闭TPM兼容模式，开启FTM所有功能
   \   0000006C   0x481F             LDR.N    R0,??FTM_QUAD_init_0+0x28  ;; 0x40039054
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000074   0x491D             LDR.N    R1,??FTM_QUAD_init_0+0x28  ;; 0x40039054
   \   00000076   0x6008             STR      R0,[R1, #+0]
     35            FTM2_MODE |= FTM_MODE_FTMEN_MASK;                        //FTMEN=1,关闭TPM兼容模式，开启FTM所有功能
   \   00000078   0x481D             LDR.N    R0,??FTM_QUAD_init_0+0x2C  ;; 0x400b8054
   \   0000007A   0x6800             LDR      R0,[R0, #+0]
   \   0000007C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000080   0x491B             LDR.N    R1,??FTM_QUAD_init_0+0x2C  ;; 0x400b8054
   \   00000082   0x6008             STR      R0,[R1, #+0]
     36           
     37            FTM1_QDCTRL |= FTM_QDCTRL_QUADEN_MASK;                   //使能正交解码模式
   \   00000084   0x481B             LDR.N    R0,??FTM_QUAD_init_0+0x30  ;; 0x40039080
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000008C   0x4919             LDR.N    R1,??FTM_QUAD_init_0+0x30  ;; 0x40039080
   \   0000008E   0x6008             STR      R0,[R1, #+0]
     38            FTM2_QDCTRL |= FTM_QDCTRL_QUADEN_MASK;                   //使能正交解码模式
   \   00000090   0x4819             LDR.N    R0,??FTM_QUAD_init_0+0x34  ;; 0x400b8080
   \   00000092   0x6800             LDR      R0,[R0, #+0]
   \   00000094   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000098   0x4917             LDR.N    R1,??FTM_QUAD_init_0+0x34  ;; 0x400b8080
   \   0000009A   0x6008             STR      R0,[R1, #+0]
     39            FTM2_QDCTRL &= ~FTM_QDCTRL_QUADMODE_MASK;                //选定编码模式为A相与B相编码模式
   \   0000009C   0x4816             LDR.N    R0,??FTM_QUAD_init_0+0x34  ;; 0x400b8080
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0xF030 0x0008      BICS     R0,R0,#0x8
   \   000000A4   0x4914             LDR.N    R1,??FTM_QUAD_init_0+0x34  ;; 0x400b8080
   \   000000A6   0x6008             STR      R0,[R1, #+0]
     40            FTM1_QDCTRL &= ~FTM_QDCTRL_QUADMODE_MASK;                //选定编码模式为A相与B相编码模式
   \   000000A8   0x4812             LDR.N    R0,??FTM_QUAD_init_0+0x30  ;; 0x40039080
   \   000000AA   0x6800             LDR      R0,[R0, #+0]
   \   000000AC   0xF030 0x0008      BICS     R0,R0,#0x8
   \   000000B0   0x4910             LDR.N    R1,??FTM_QUAD_init_0+0x30  ;; 0x40039080
   \   000000B2   0x6008             STR      R0,[R1, #+0]
     41            //FTM1_SC |= FTM_SC_CLKS(3);                               //选择外部时钟
     42            // FTM1_CONF |=FTM_CONF_BDMMODE(3);                      //可根据需要选择
     43           // FTM2_SC |= FTM_SC_CLKS(3);
     44            // FTM2_CONF |=FTM_CONF_BDMMODE(3);
     45            FTM1_CNT=0; 
   \   000000B4   0x4811             LDR.N    R0,??FTM_QUAD_init_0+0x38  ;; 0x40039004
   \   000000B6   0x2100             MOVS     R1,#+0
   \   000000B8   0x6001             STR      R1,[R0, #+0]
     46            FTM2_CNT=0; 
   \   000000BA   0x4811             LDR.N    R0,??FTM_QUAD_init_0+0x3C  ;; 0x400b8004
   \   000000BC   0x2100             MOVS     R1,#+0
   \   000000BE   0x6001             STR      R1,[R0, #+0]
     47          }
   \   000000C0   0x4770             BX       LR               ;; return
   \   000000C2   0xBF00             Nop      
   \                     ??FTM_QUAD_init_0:
   \   000000C4   0x4004803C         DC32     0x4004803c
   \   000000C8   0x40048030         DC32     0x40048030
   \   000000CC   0x40049030         DC32     0x40049030
   \   000000D0   0x40049034         DC32     0x40049034
   \   000000D4   0x4004A048         DC32     0x4004a048
   \   000000D8   0x4004A04C         DC32     0x4004a04c
   \   000000DC   0x40039008         DC32     0x40039008
   \   000000E0   0x400B8008         DC32     0x400b8008
   \   000000E4   0x4003904C         DC32     0x4003904c
   \   000000E8   0x400B804C         DC32     0x400b804c
   \   000000EC   0x40039054         DC32     0x40039054
   \   000000F0   0x400B8054         DC32     0x400b8054
   \   000000F4   0x40039080         DC32     0x40039080
   \   000000F8   0x400B8080         DC32     0x400b8080
   \   000000FC   0x40039004         DC32     0x40039004
   \   00000100   0x400B8004         DC32     0x400b8004
     48          
     49          
     50          
     51          
     52          
     53          
     54          
     55          
     56          
     57          
     58          
     59          
     60          
     61          
     62          
     63          
     64          
     65          
     66          
     67          
     68          
     69          
     70          
     71          
     72          
     73          
     74          
     75          
     76          /*************************************************************************
     77          *  函数名称：FTM2_QUAD_DIR_init
     78          *  功能说明：正交解码 方向计数模式初始化函数
     79          *  函数返回：无
     80          *  修改时间：2012-1-26
     81          *  备    注：
     82                       该例程使用 A10 和A11 引脚输入作为旋转编码器的 A相和B 相输入。 
     83                        B路控制计数器方向  高电平时计数器正向计数
     84                        A路计数脉冲
     85                        对B路默认上拉
     86          *************************************************************************/
     87          /*void FTM_QUAD_DIR_init()
     88          {
     89             
     90              SIM_SCGC6 |=SIM_SCGC6_FTM1_MASK;                             //使能FTM1时钟
     91              SIM_SCGC3 |= SIM_SCGC3_FTM2_MASK;                           //使能FTM2时钟
     92              
     93              SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
     94              SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;
     95              
     96              PORT_PCR_REG(PORTA_BASE_PTR, 12) = (0|PORT_PCR_MUX(7)|0x10);     // PTA12
     97              PORT_PCR_REG(PORTA_BASE_PTR, 13) = (0|PORT_PCR_MUX(7)|0x13);     // PTA13
     98              PORT_PCR_REG(PORTB_BASE_PTR, 18) = PORT_PCR_MUX(6);              // PTB18
     99              PORT_PCR_REG(PORTB_BASE_PTR, 19) = PORT_PCR_MUX(6);              // PTB19
    100                
    101              FTM_MODE_REG(FTM1_BASE_PTR)    |= FTM_MODE_WPDIS_MASK;           //写保护禁止
    102              FTM_QDCTRL_REG(FTM1_BASE_PTR)  &=~FTM_QDCTRL_QUADMODE_MASK;       //AB相同时确定方向和计数值
    103              FTM_CNTIN_REG(FTM1_BASE_PTR)    = 0;                             //FTM1计数器初始值为0
    104              FTM_MOD_REG(FTM1_BASE_PTR)      = 0xFFFF;                        //FTM1计数器终值为0
    105              
    106              FTM_MODE_REG(FTM2_BASE_PTR)    |= FTM_MODE_WPDIS_MASK;           //写保护禁止
    107              FTM_QDCTRL_REG(FTM2_BASE_PTR)  &= ~FTM_QDCTRL_QUADMODE_MASK;     //AB 正交解码模式
    108              FTM_CNTIN_REG(FTM2_BASE_PTR)    = 0;                             //FTM计数器初始值为0
    109              FTM_MOD_REG(FTM2_BASE_PTR)      = 0xFFFF;                        //FTM计数器初始值为0
    110              
    111              FTM_QDCTRL_REG(FTM1_BASE_PTR)  |=FTM_QDCTRL_QUADEN_MASK;         //使能FTM1正交解码模式
    112              FTM_MODE_REG(FTM1_BASE_PTR)    |= FTM_MODE_FTMEN_MASK;           //FTM1EN=1	
    113              FTM_CNT_REG(FTM1_BASE_PTR)     = 0; 
    114              
    115              FTM_QDCTRL_REG(FTM2_BASE_PTR)  |=FTM_QDCTRL_QUADEN_MASK;         //使能FTM2正交解码模式
    116              FTM_MODE_REG(FTM2_BASE_PTR)    |= FTM_MODE_FTMEN_MASK;           //FTM2EN=1	
    117              FTM_CNT_REG(FTM2_BASE_PTR)     = 0; 	
    118          }*/
    119          
    120          
    121          
    122          
    123          
    124          
    125          
    126          
    127          
    128          
    129          
    130          
    131          
    132          
    133          
    134          
    135          
    136          
    137          
    138          
    139          /*************************************************************************
    140          *  函数名称：FTM2_init
    141          *  功能说明：正交解码 方向计数模式初始化函数
    142          *  函数返回：无
    143          *  修改时间：2012-1-26
    144          *  备    注：CH0~CH3可以使用过滤器，未添加这功能
    145                       该例程使用 A10 和A11 引脚输入作为旋转编码器的 A相和B 相输入。 
    146          *************************************************************************
    147          void FTM_QUAD_init()
    148          {
    149              SIM_SCGC3 |= SIM_SCGC3_FTM2_MASK;                                 //使能FTM2时钟
    150          
    151              SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;
    152              PORT_PCR_REG(PORTB_BASE_PTR, 18) = PORT_PCR_MUX(6);               // PTB18
    153              PORT_PCR_REG(PORTB_BASE_PTR, 19) = PORT_PCR_MUX(6);               // PTB19
    154                 
    155              FTM_MODE_REG(FTM2_BASE_PTR)    |= FTM_MODE_WPDIS_MASK;           //写保护禁止
    156              FTM_QDCTRL_REG(FTM2_BASE_PTR)  &= ~FTM_QDCTRL_QUADMODE_MASK;     //AB 正交解码模式
    157              FTM_CNTIN_REG(FTM2_BASE_PTR)    = 0;                             //FTM计数器初始值为0
    158              FTM_MOD_REG(FTM2_BASE_PTR)      = 0xFFFF;                        //FTM计数器初始值为0
    159             
    160              FTM_QDCTRL_REG(FTM2_BASE_PTR)  |=FTM_QDCTRL_QUADEN_MASK;         //使能FTM2正交解码模式
    161              FTM_MODE_REG(FTM2_BASE_PTR)    |= FTM_MODE_FTMEN_MASK;                             //FTM2EN=1	
    162              FTM_CNT_REG(FTM2_BASE_PTR)    = 0; 	
    163          }*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  FTM_QUAD_init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     260  FTM_QUAD_init

 
 260 bytes in section .text
 
 260 bytes of CODE memory

Errors: none
Warnings: none
