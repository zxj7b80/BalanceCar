###############################################################################
#                                                                             #
#                                                       03/May/2013  23:26:18 #
# IAR ANSI C/C++ Compiler V6.30.4.23288/W32 EVALUATION for ARM                #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\hp\Desktop\balance                              #
#                    car\src\Sources\C\Frame_C\sysinit.c                      #
#    Command line =  "C:\Users\hp\Desktop\balance                             #
#                    car\src\Sources\C\Frame_C\sysinit.c" -D IAR -D           #
#                    TWR_K60N512 -lCN "C:\Users\hp\Desktop\balance            #
#                    car\bin\Ram\List\" -lB "C:\Users\hp\Desktop\balance      #
#                    car\bin\Ram\List\" -o "C:\Users\hp\Desktop\balance       #
#                    car\bin\Ram\Obj\" --no_cse --no_unroll --no_inline       #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config                              #
#                    F:\iar\arm\INC\c\DLib_Config_Normal.h -I                 #
#                    "C:\Users\hp\Desktop\balance car\src\Sources\H\" -I      #
#                    "C:\Users\hp\Desktop\balance                             #
#                    car\src\Sources\H\Component_H\" -I                       #
#                    "C:\Users\hp\Desktop\balance                             #
#                    car\src\Sources\H\Frame_H\" -Ol --use_c++_inline         #
#    List file    =  C:\Users\hp\Desktop\balance car\bin\Ram\List\sysinit.lst #
#    Object file  =  C:\Users\hp\Desktop\balance car\bin\Ram\Obj\sysinit.o    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\hp\Desktop\balance car\src\Sources\C\Frame_C\sysinit.c
      1          //-------------------------------------------------------------------------*
      2          // 文件名:sysinit.c                                                        *
      3          // 说  明: 系统配置文件                                                    *
      4          //-------------------------------------------------------------------------*
      5          
      6          #include "sysinit.h"	//头文件
      7          
      8          //全局变量声明

   \                                 In section .bss, align 4
      9          int core_clk_khz;
   \                     core_clk_khz:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     10          int core_clk_mhz;
   \                     core_clk_mhz:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     11          int periph_clk_khz;
   \                     periph_clk_khz:
   \   00000000                      DS8 4
     12          
     13          
     14          
     15          //-------------------------------------------------------------------------*
     16          //函数名: sysinit                                                          *
     17          //功  能: 系统设置                                                         * 
     18          //参  数: 无						  	           *	
     19          //返  回: 无                                                               *
     20          //说  明: 无                                                               *
     21          //-------------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
     22          void sysinit (void)
     23          {
   \                     sysinit:
   \   00000000   0xB580             PUSH     {R7,LR}
     24              //使能IO端口时钟    
     25              SIM_SCGC5 |= (SIM_SCGC5_PORTA_MASK
     26                                        | SIM_SCGC5_PORTB_MASK
     27                                        | SIM_SCGC5_PORTC_MASK
     28                                        | SIM_SCGC5_PORTD_MASK
     29                                        | SIM_SCGC5_PORTE_MASK );
   \   00000002   0x....             LDR.N    R0,??DataTable3  ;; 0x40048038
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF450 0x5078      ORRS     R0,R0,#0x3E00
   \   0000000A   0x....             LDR.N    R1,??DataTable3  ;; 0x40048038
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     30          
     31              //开启系统时钟
     32              core_clk_mhz = pll_init(CORE_CLK_MHZ, REF_CLK);
   \   0000000E   0x2103             MOVS     R1,#+3
   \   00000010   0x2002             MOVS     R0,#+2
   \   00000012   0x.... 0x....      BL       pll_init
   \   00000016   0x....             LDR.N    R1,??DataTable3_1
   \   00000018   0x6008             STR      R0,[R1, #+0]
     33              //通过pll_init函数的返回值来计算内核时钟和外设时钟
     34              core_clk_khz = core_clk_mhz * 1000;
   \   0000001A   0x....             LDR.N    R0,??DataTable3_1
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF44F 0x717A      MOV      R1,#+1000
   \   00000022   0x4348             MULS     R0,R1,R0
   \   00000024   0x....             LDR.N    R1,??DataTable3_2
   \   00000026   0x6008             STR      R0,[R1, #+0]
     35              periph_clk_khz = core_clk_khz / (((SIM_CLKDIV1 & SIM_CLKDIV1_OUTDIV2_MASK) >> 24)+ 1);
   \   00000028   0x....             LDR.N    R0,??DataTable3_2
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x....             LDR.N    R1,??DataTable3_3  ;; 0x40048044
   \   0000002E   0x6809             LDR      R1,[R1, #+0]
   \   00000030   0xF3C1 0x6103      UBFX     R1,R1,#+24,#+4
   \   00000034   0x1C49             ADDS     R1,R1,#+1
   \   00000036   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000003A   0x....             LDR.N    R1,??DataTable3_4
   \   0000003C   0x6008             STR      R0,[R1, #+0]
     36              //使能跟踪时钟，用于调试
     37              trace_clk_init();	
   \   0000003E   0x.... 0x....      BL       trace_clk_init
     38              //FlexBus时钟初始化
     39              fb_clk_init();
   \   00000042   0x.... 0x....      BL       fb_clk_init
     40          
     41          }
   \   00000046   0xBD01             POP      {R0,PC}          ;; return
     42          
     43          //-------------------------------------------------------------------------*
     44          //函数名: trace_clk_init                                                   *
     45          //功  能: 跟踪时钟初始化                                                   * 
     46          //参  数: 无							  	   *	
     47          //返  回: 无                                                               *
     48          //说  明: 用于调试                                                         *
     49          //-------------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
     50          void trace_clk_init(void)
     51          {
     52              //设置跟踪时钟为内核时钟
     53              SIM_SOPT2 |= SIM_SOPT2_TRACECLKSEL_MASK;	
   \                     trace_clk_init:
   \   00000000   0x....             LDR.N    R0,??DataTable3_5  ;; 0x40048004
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   00000008   0x....             LDR.N    R1,??DataTable3_5  ;; 0x40048004
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     54              //在PTA6引脚上使能TRACE_CLKOU功能
     55              PORTA_PCR6 = ( PORT_PCR_MUX(0x7));
   \   0000000C   0x....             LDR.N    R0,??DataTable3_6  ;; 0x40049018
   \   0000000E   0xF44F 0x61E0      MOV      R1,#+1792
   \   00000012   0x6001             STR      R1,[R0, #+0]
     56          }
   \   00000014   0x4770             BX       LR               ;; return
     57          
     58          //-------------------------------------------------------------------------*
     59          //函数名: fb_clk_init                                                      *
     60          //功  能: FlexBus时钟初始化                                                * 
     61          //参  数: 无								   *	
     62          //返  回: 无                                                               *
     63          //说  明:                                                                  *
     64          //-------------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
     65          void fb_clk_init(void)
     66          {
     67              //使能FlexBus模块时钟
     68              SIM_SCGC7 |= SIM_SCGC7_FLEXBUS_MASK;
   \                     fb_clk_init:
   \   00000000   0x....             LDR.N    R0,??DataTable3_7  ;; 0x40048040
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000008   0x....             LDR.N    R1,??DataTable3_7  ;; 0x40048040
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     69              //在PTA6引脚上使能FB_CLKOUT功能
     70              PORTC_PCR3 = ( PORT_PCR_MUX(0x5));
   \   0000000C   0x....             LDR.N    R0,??DataTable3_8  ;; 0x4004b00c
   \   0000000E   0xF44F 0x61A0      MOV      R1,#+1280
   \   00000012   0x6001             STR      R1,[R0, #+0]
     71          }
   \   00000014   0x4770             BX       LR               ;; return
     72          
     73          //-------------------------------------------------------------------------*
     74          //函数名: pll_init                                                         *
     75          //功  能: pll初始化                                                        * 
     76          //参  数: clk_option:时钟选项						   * 
     77          //		  crystal_val:时钟值                                       *	
     78          //返  回: 时钟频率值                                                       *
     79          //说  明:                                                                  *
     80          //-------------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
     81          unsigned char pll_init(unsigned char clk_option, unsigned char crystal_val)
     82          {
   \                     pll_init:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x000A             MOVS     R2,R1
     83              unsigned char pll_freq;
     84              
     85              if (clk_option > 3) {return 0;}   //如果没有选择可用的选项则返回0
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0x2804             CMP      R0,#+4
   \   00000008   0xD301             BCC.N    ??pll_init_0
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xE072             B.N      ??pll_init_1
     86              if (crystal_val > 15) {return 1;} // 如果如果可用的晶体选项不可用则返回1
   \                     ??pll_init_0:
   \   0000000E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000010   0x2A10             CMP      R2,#+16
   \   00000012   0xD301             BCC.N    ??pll_init_2
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0xE06D             B.N      ??pll_init_1
     87              
     88              //这里处在默认的FEI模式
     89              //首先移动到FBE模式
     90              #if (defined(K60_CLK) || defined(ASB817))
     91                       MCG_C2 = 0;
   \                     ??pll_init_2:
   \   00000018   0x....             LDR.N    R2,??DataTable3_9  ;; 0x40064001
   \   0000001A   0x2300             MOVS     R3,#+0
   \   0000001C   0x7013             STRB     R3,[R2, #+0]
     92              #else
     93                       //使能外部晶振
     94                       MCG_C2 = MCG_C2_RANGE(2) | MCG_C2_HGO_MASK | MCG_C2_EREFS_MASK;
     95              #endif
     96              
     97              //初始化晶振后释放锁定状态的振荡器和GPIO
     98              SIM_SCGC4 |= SIM_SCGC4_LLWU_MASK;
   \   0000001E   0x....             LDR.N    R2,??DataTable3_10  ;; 0x40048034
   \   00000020   0x6812             LDR      R2,[R2, #+0]
   \   00000022   0xF052 0x5280      ORRS     R2,R2,#0x10000000
   \   00000026   0x....             LDR.N    R3,??DataTable3_10  ;; 0x40048034
   \   00000028   0x601A             STR      R2,[R3, #+0]
     99              LLWU_CS |= LLWU_CS_ACKISO_MASK;
   \   0000002A   0x....             LDR.N    R2,??DataTable3_11  ;; 0x4007c008
   \   0000002C   0x7812             LDRB     R2,[R2, #+0]
   \   0000002E   0xF052 0x0280      ORRS     R2,R2,#0x80
   \   00000032   0x....             LDR.N    R3,??DataTable3_11  ;; 0x4007c008
   \   00000034   0x701A             STRB     R2,[R3, #+0]
    100              
    101              //选择外部晶振，参考分频器，清IREFS来启动外部晶振
    102              MCG_C1 = MCG_C1_CLKS(2) | MCG_C1_FRDIV(3);
   \   00000036   0x....             LDR.N    R2,??DataTable3_12  ;; 0x40064000
   \   00000038   0x2398             MOVS     R3,#+152
   \   0000003A   0x7013             STRB     R3,[R2, #+0]
    103              
    104              //等待晶振稳定	
    105              #if (!defined(K60_CLK) && !defined(ASB817))
    106              while (!(MCG_S & MCG_S_OSCINIT_MASK)){};  
    107              #endif
    108              
    109              //等待参考时钟状态位清零
    110              while (MCG_S & MCG_S_IREFST_MASK){}; 
   \                     ??pll_init_3:
   \   0000003C   0x....             LDR.N    R2,??DataTable3_13  ;; 0x40064006
   \   0000003E   0x7812             LDRB     R2,[R2, #+0]
   \   00000040   0x06D2             LSLS     R2,R2,#+27
   \   00000042   0xD4FB             BMI.N    ??pll_init_3
    111              //等待时钟状态位显示时钟源来自外部参考时钟
    112              while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2){}; 
   \                     ??pll_init_4:
   \   00000044   0x....             LDR.N    R2,??DataTable3_13  ;; 0x40064006
   \   00000046   0x7812             LDRB     R2,[R2, #+0]
   \   00000048   0xF3C2 0x0281      UBFX     R2,R2,#+2,#+2
   \   0000004C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000004E   0x2A02             CMP      R2,#+2
   \   00000050   0xD1F8             BNE.N    ??pll_init_4
    113              
    114              //进入FBE模式
    115              #if (defined(K60_CLK))
    116              MCG_C5 = MCG_C5_PRDIV(0x18);
   \   00000052   0x....             LDR.N    R2,??DataTable3_14  ;; 0x40064004
   \   00000054   0x2318             MOVS     R3,#+24
   \   00000056   0x7013             STRB     R3,[R2, #+0]
    117              #else
    118              
    119              //配置PLL分频器来匹配所用的晶振
    120              MCG_C5 = MCG_C5_PRDIV(crystal_val); 
    121              #endif
    122              
    123              //确保MCG_C6处于复位状态，禁止LOLIE、PLL、和时钟控制器，清PLL VCO分频器
    124              MCG_C6 = 0x0;
   \   00000058   0x....             LDR.N    R2,??DataTable3_15  ;; 0x40064005
   \   0000005A   0x2300             MOVS     R3,#+0
   \   0000005C   0x7013             STRB     R3,[R2, #+0]
    125              //选择PLL VCO分频器，系统时钟分频器取决于时钟选项
    126              switch (clk_option) {
   \   0000005E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD005             BEQ.N    ??pll_init_5
   \   00000064   0x2802             CMP      R0,#+2
   \   00000066   0xD019             BEQ.N    ??pll_init_6
   \   00000068   0xD30D             BCC.N    ??pll_init_7
   \   0000006A   0x2803             CMP      R0,#+3
   \   0000006C   0xD021             BEQ.N    ??pll_init_8
   \   0000006E   0xE02A             B.N      ??pll_init_9
    127              case 0:
    128                //设置系统分频器
    129                //MCG=PLL, core = MCG, bus = MCG, FlexBus = MCG, Flash clock= MCG/2
    130                set_sys_dividers(0,0,0,1);
   \                     ??pll_init_5:
   \   00000070   0x2301             MOVS     R3,#+1
   \   00000072   0x2200             MOVS     R2,#+0
   \   00000074   0x2100             MOVS     R1,#+0
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0x.... 0x....      BL       set_sys_dividers
    131                //设置VCO分频器，使能PLL为50MHz, LOLIE=0, PLLS=1, CME=0, VDIV=1
    132                MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(1); //VDIV = 1 (x25)
   \   0000007C   0x....             LDR.N    R0,??DataTable3_15  ;; 0x40064005
   \   0000007E   0x2141             MOVS     R1,#+65
   \   00000080   0x7001             STRB     R1,[R0, #+0]
    133                pll_freq = 50;
   \   00000082   0x2132             MOVS     R1,#+50
    134                break;
   \   00000084   0xE01F             B.N      ??pll_init_9
    135              case 1:
    136                //设置系统分频器
    137                //MCG=PLL, core = MCG, bus = MCG/2, FlexBus = MCG/2, Flash clock= MCG/4
    138                set_sys_dividers(0,1,1,3);
   \                     ??pll_init_7:
   \   00000086   0x2303             MOVS     R3,#+3
   \   00000088   0x2201             MOVS     R2,#+1
   \   0000008A   0x2101             MOVS     R1,#+1
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0x.... 0x....      BL       set_sys_dividers
    139                //设置VCO分频器，使能PLL为100MHz, LOLIE=0, PLLS=1, CME=0, VDIV=26
    140                MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(26); //VDIV = 26 (x50)
   \   00000092   0x....             LDR.N    R0,??DataTable3_15  ;; 0x40064005
   \   00000094   0x215A             MOVS     R1,#+90
   \   00000096   0x7001             STRB     R1,[R0, #+0]
    141                pll_freq = 100;
   \   00000098   0x2164             MOVS     R1,#+100
    142                break;
   \   0000009A   0xE014             B.N      ??pll_init_9
    143              case 2:
    144                //设置系统分频器
    145                //MCG=PLL, core = MCG, bus = MCG/2, FlexBus = MCG/2, Flash clock= MCG/4
    146                set_sys_dividers(0,1,1,3);
   \                     ??pll_init_6:
   \   0000009C   0x2303             MOVS     R3,#+3
   \   0000009E   0x2201             MOVS     R2,#+1
   \   000000A0   0x2101             MOVS     R1,#+1
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0x.... 0x....      BL       set_sys_dividers
    147                //设置VCO分频器，使能PLL为96MHz, LOLIE=0, PLLS=1, CME=0, VDIV=24
    148                MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(24); //VDIV = 24 (x48)
   \   000000A8   0x....             LDR.N    R0,??DataTable3_15  ;; 0x40064005
   \   000000AA   0x2158             MOVS     R1,#+88
   \   000000AC   0x7001             STRB     R1,[R0, #+0]
    149                pll_freq = 96;
   \   000000AE   0x2160             MOVS     R1,#+96
    150                break;
   \   000000B0   0xE009             B.N      ??pll_init_9
    151              case 3:
    152                //设置系统分频器
    153                //MCG=PLL, core = MCG, bus = MCG, FlexBus = MCG, Flash clock= MCG/2
    154                set_sys_dividers(0,0,0,1);
   \                     ??pll_init_8:
   \   000000B2   0x2301             MOVS     R3,#+1
   \   000000B4   0x2200             MOVS     R2,#+0
   \   000000B6   0x2100             MOVS     R1,#+0
   \   000000B8   0x2000             MOVS     R0,#+0
   \   000000BA   0x.... 0x....      BL       set_sys_dividers
    155                //设置VCO分频器，使能PLL为48MHz, LOLIE=0, PLLS=1, CME=0, VDIV=0
    156                MCG_C6 = MCG_C6_PLLS_MASK; //VDIV = 0 (x24)
   \   000000BE   0x....             LDR.N    R0,??DataTable3_15  ;; 0x40064005
   \   000000C0   0x2140             MOVS     R1,#+64
   \   000000C2   0x7001             STRB     R1,[R0, #+0]
    157                pll_freq = 48;
   \   000000C4   0x2130             MOVS     R1,#+48
    158                break;
    159              }
    160              while (!(MCG_S & MCG_S_PLLST_MASK)){}; // wait for PLL status bit to set
   \                     ??pll_init_9:
   \   000000C6   0x....             LDR.N    R0,??DataTable3_13  ;; 0x40064006
   \   000000C8   0x7800             LDRB     R0,[R0, #+0]
   \   000000CA   0x0680             LSLS     R0,R0,#+26
   \   000000CC   0xD5FB             BPL.N    ??pll_init_9
    161              
    162              while (!(MCG_S & MCG_S_LOCK_MASK)){}; // Wait for LOCK bit to set
   \                     ??pll_init_10:
   \   000000CE   0x....             LDR.N    R0,??DataTable3_13  ;; 0x40064006
   \   000000D0   0x7800             LDRB     R0,[R0, #+0]
   \   000000D2   0x0640             LSLS     R0,R0,#+25
   \   000000D4   0xD5FB             BPL.N    ??pll_init_10
    163              
    164              //进入PBE模式
    165              
    166              //通过清零CLKS位来进入PEE模式
    167              // CLKS=0, FRDIV=3, IREFS=0, IRCLKEN=0, IREFSTEN=0
    168              MCG_C1 &= ~MCG_C1_CLKS_MASK;
   \   000000D6   0x....             LDR.N    R0,??DataTable3_12  ;; 0x40064000
   \   000000D8   0x7800             LDRB     R0,[R0, #+0]
   \   000000DA   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   000000DE   0x....             LDR.N    R2,??DataTable3_12  ;; 0x40064000
   \   000000E0   0x7010             STRB     R0,[R2, #+0]
    169              
    170              //等待时钟状态位更新
    171              while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x3){};
   \                     ??pll_init_11:
   \   000000E2   0x....             LDR.N    R0,??DataTable3_13  ;; 0x40064006
   \   000000E4   0x7800             LDRB     R0,[R0, #+0]
   \   000000E6   0xF3C0 0x0081      UBFX     R0,R0,#+2,#+2
   \   000000EA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000EC   0x2803             CMP      R0,#+3
   \   000000EE   0xD1F8             BNE.N    ??pll_init_11
    172              
    173              //开始进入PEE模式
    174              
    175              return pll_freq;
   \   000000F0   0x0008             MOVS     R0,R1
   \   000000F2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??pll_init_1:
   \   000000F4   0xBD02             POP      {R1,PC}          ;; return
    176          }
    177          
    178          //-------------------------------------------------------------------------*
    179          //函数名: set_sys_dividers                                                 *
    180          //功  能: 设置系系统分频器                                                 * 
    181          //参  数: 预分频值   							   *	
    182          //返  回: 无                                                               *
    183          //说  明: 此函数必须放在RAM里执行，否则会产生错误e2448。当FLASH时钟分频改变* 
    184          //        时，必须禁止FLASH的预取功能。在时钟分频改变之后，必须延时一小段时*
    185          //	 间才可以从新使能预取功能。                                        * 
    186          //-------------------------------------------------------------------------*

   \                                 In section .textrw, align 4, keep-with-next
    187          __ramfunc void set_sys_dividers(uint32 outdiv1, uint32 outdiv2, uint32 outdiv3, uint32 outdiv4)
    188          {
   \                     set_sys_dividers:
   \   00000000   0xB470             PUSH     {R4-R6}
    189              uint32 temp_reg;
    190              uint8 i;
    191              //保存FMC_PFAPR当前的值
    192              temp_reg = FMC_PFAPR;
   \   00000002   0x4C10             LDR.N    R4,??set_sys_dividers_0  ;; 0x4001f000
   \   00000004   0x6824             LDR      R4,[R4, #+0]
    193              
    194              //通过M&PFD置位M0PFD来禁止预取功能
    195              FMC_PFAPR |= FMC_PFAPR_M7PFD_MASK | FMC_PFAPR_M6PFD_MASK | FMC_PFAPR_M5PFD_MASK
    196                               | FMC_PFAPR_M4PFD_MASK | FMC_PFAPR_M3PFD_MASK | FMC_PFAPR_M2PFD_MASK
    197                               | FMC_PFAPR_M1PFD_MASK | FMC_PFAPR_M0PFD_MASK;
   \   00000006   0x4D0F             LDR.N    R5,??set_sys_dividers_0  ;; 0x4001f000
   \   00000008   0x682D             LDR      R5,[R5, #+0]
   \   0000000A   0xF455 0x057F      ORRS     R5,R5,#0xFF0000
   \   0000000E   0x4E0D             LDR.N    R6,??set_sys_dividers_0  ;; 0x4001f000
   \   00000010   0x6035             STR      R5,[R6, #+0]
    198              
    199              //给时钟分频器设置期望值  
    200              SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(outdiv1) | SIM_CLKDIV1_OUTDIV2(outdiv2) 
    201                                | SIM_CLKDIV1_OUTDIV3(outdiv3) | SIM_CLKDIV1_OUTDIV4(outdiv4);
   \   00000012   0x0609             LSLS     R1,R1,#+24
   \   00000014   0xF011 0x6170      ANDS     R1,R1,#0xF000000
   \   00000018   0xEA51 0x7000      ORRS     R0,R1,R0, LSL #+28
   \   0000001C   0x0511             LSLS     R1,R2,#+20
   \   0000001E   0xF411 0x0170      ANDS     R1,R1,#0xF00000
   \   00000022   0x4308             ORRS     R0,R1,R0
   \   00000024   0x0419             LSLS     R1,R3,#+16
   \   00000026   0xF411 0x2170      ANDS     R1,R1,#0xF0000
   \   0000002A   0x4308             ORRS     R0,R1,R0
   \   0000002C   0x4906             LDR.N    R1,??set_sys_dividers_0+0x4  ;; 0x40048044
   \   0000002E   0x6008             STR      R0,[R1, #+0]
    202              
    203              //等待分频器改变
    204              for (i = 0 ; i < outdiv4 ; i++)
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0xE000             B.N      ??set_sys_dividers_1
   \                     ??set_sys_dividers_2:
   \   00000034   0x1C40             ADDS     R0,R0,#+1
   \                     ??set_sys_dividers_1:
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0x4298             CMP      R0,R3
   \   0000003A   0xD3FB             BCC.N    ??set_sys_dividers_2
    205              {}
    206              
    207              //从新存FMC_PFAPR的原始值
    208              FMC_PFAPR = temp_reg; 
   \   0000003C   0x4801             LDR.N    R0,??set_sys_dividers_0  ;; 0x4001f000
   \   0000003E   0x6004             STR      R4,[R0, #+0]
    209              
    210              return;
   \   00000040   0xBC70             POP      {R4-R6}
   \   00000042   0x4770             BX       LR               ;; return
   \                     ??set_sys_dividers_0:
   \   00000044   0x4001F000         DC32     0x4001f000
   \   00000048   0x40048044         DC32     0x40048044
    211          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     core_clk_mhz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     core_clk_khz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x40048044         DC32     0x40048044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     periph_clk_khz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x40048004         DC32     0x40048004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x40049018         DC32     0x40049018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x40048040         DC32     0x40048040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x4004B00C         DC32     0x4004b00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x40064001         DC32     0x40064001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x40048034         DC32     0x40048034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x4007C008         DC32     0x4007c008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \   00000000   0x40064000         DC32     0x40064000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \   00000000   0x40064006         DC32     0x40064006

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \   00000000   0x40064004         DC32     0x40064004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \   00000000   0x40064005         DC32     0x40064005
    212          
    213          
    214          
    215          
    216          
    217          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  fb_clk_init
        8  pll_init
             8 -> set_sys_dividers
       12  set_sys_dividers
        8  sysinit
             8 -> fb_clk_init
             8 -> pll_init
             8 -> trace_clk_init
        0  trace_clk_init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
       4  core_clk_khz
       4  core_clk_mhz
      22  fb_clk_init
       4  periph_clk_khz
     246  pll_init
      76  set_sys_dividers
      72  sysinit
      22  trace_clk_init

 
  12 bytes in section .bss
 426 bytes in section .text
  76 bytes in section .textrw
 
 502 bytes of CODE memory
  12 bytes of DATA memory

Errors: none
Warnings: none
