###############################################################################
#                                                                             #
#                                                       05/May/2013  16:44:10 #
# IAR ANSI C/C++ Compiler V6.30.4.23288/W32 EVALUATION for ARM                #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\hp\Desktop\balance car\src\Sources\C\isr.c      #
#    Command line =  "C:\Users\hp\Desktop\balance car\src\Sources\C\isr.c"    #
#                    -D IAR -D TWR_K60N512 -lCN "C:\Users\hp\Desktop\balance  #
#                    car\bin\Ram\List\" -lB "C:\Users\hp\Desktop\balance      #
#                    car\bin\Ram\List\" -o "C:\Users\hp\Desktop\balance       #
#                    car\bin\Ram\Obj\" --no_cse --no_unroll --no_inline       #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config                              #
#                    F:\iar\arm\INC\c\DLib_Config_Normal.h -I                 #
#                    "C:\Users\hp\Desktop\balance car\src\Sources\H\" -I      #
#                    "C:\Users\hp\Desktop\balance                             #
#                    car\src\Sources\H\Component_H\" -I                       #
#                    "C:\Users\hp\Desktop\balance                             #
#                    car\src\Sources\H\Frame_H\" -Ol --use_c++_inline         #
#    List file    =  C:\Users\hp\Desktop\balance car\bin\Ram\List\isr.lst     #
#    Object file  =  C:\Users\hp\Desktop\balance car\bin\Ram\Obj\isr.o        #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\hp\Desktop\balance car\src\Sources\C\isr.c
      1          //-------------------------------------------------------------------------*
      2          // 文件名: isr.c                                                           *
      3          // 说  明: 中断处理例程                                                    *
      4          //---------------苏州大学飞思卡尔嵌入式系统实验室2011年--------------------*
      5          
      6          #include "includes.h"
      7          void MotorSpeedOut(void);
      8          void SpeedControl(void);
      9          void SpeedControlOutput(void);
     10          void AngleCalculate(void);
     11          void AngleControl(void);
     12          void MotorOutput(void);
     13          void GetInputVoltageAverage(int j);
     14          void get_ad(void);
     15          void GetleftMotorPulse(void);
     16          void GetrighttMotorPulse(void);
     17          void SetMotorVoltage(float fLeftVal, float fRightVal);
     18          //uint8 g_nSpeedControlCount=0; 

   \                                 In section .bss, align 1
     19          uint8 g_1MSEntCnt=0;
   \                     g_1MSEntCnt:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     20          unsigned int   g_n1MSEventCount =0;
   \                     g_n1MSEventCount:
   \   00000000                      DS8 4
     21          
     22          
     23          
     24          
     25          #define MOTOR_OUT_MAX 1.0
     26          #define MOTOR_OUT_MIN	-1.0
     27          
     28          #define GRAVITY_OFFSET              gravity // 1202//  1231    
     29          #define GYROSCOPE_OFFSET            gyro   // 1436
     30          #define GYROSCOPE_OFFSET_DIRECTION   gyro_direction
     31          #define GRAVITY_ANGLE_RATIO              0.202
     32          #define GYROSCOPE_ANGLE_RATIO          0.95 //0.232//0.35
     33          #define GRAVITY_ADJUST_TIME_CONSTANT     3.0
     34          #define GYROSCOPE_ANGLE_SIGMA_FREQUENCY  200
     35          #define CAR_ANGLE_SET                  0
     36          #define ANGLE_CONTROL_P              0.1//0.15 0.09
     37          #define CAR_ANGLE_SPEED_SET              0
     38          #define ANGLE_CONTROL_D        0.0016// 0.0016//0.002 
     39          #define ANGLE_CONTROL_OUT_MAX			MOTOR_OUT_MAX *10
     40          #define ANGLE_CONTROL_OUT_MIN			MOTOR_OUT_MIN * 10
     41          #define LEFT_RIGHT_MINIMUM               300
     42          #define DIR_CONTROL_P                   0.62//0.35 //0.35好
     43          #define DIR_CONTROL_D                   0.0008
     44          #define DIRECTION_CONTROL_DEADVALUE      0
     45          
     46          #define DIRECTION_CONTROL_OUT_MAX		MOTOR_OUT_MAX
     47          #define DIRECTION_CONTROL_OUT_MIN		MOTOR_OUT_MIN
     48          #define DIRECTION_CONTROL_PERIOD         10
     49          #define CAR_SPEED_CONSTANT               0.2
     50          
     51          //unsigned char flag_increase=0;
     52          //unsigned char flag_decrease=0;
     53          //#define CAR_SPEED_SET             0.0//30.0//12.5// 10.5    //  car_speed
     54          #define CAR_SPEED_STEP               0.8   //每100毫秒增加的速度
     55          //#define CAR_SPEED_SET_INCREASE   5.0
     56          //#define CAR_SPEED_SET_MAX  CAR_SPEED_SET+CAR_SPEED_SET_INCREASE
     57          #define DIR_DEFAULT_MIN   50
     58          
     59          #define SPEED_CONTROL_P          0.09//0.25
     60          #define SPEED_CONTROL_I       0.014// 0.05
     61          
     62          
     63          #define SPEED_CONTROL_OUT_MAX			MOTOR_OUT_MAX *10
     64          #define SPEED_CONTROL_OUT_MIN			MOTOR_OUT_MIN * 10
     65          #define SPEED_CONTROL_PERIOD            100
     66          #define MOTOR_OUT_DEAD_VAL             0
     67          #define MOTOR_LEFT_SPEED_POSITIVE		(g_fLeftMotorOut > 0)
     68          #define MOTOR_RIGHT_SPEED_POSITIVE		(g_fRightMotorOut > 0)
     69          
     70          #define DIR_LEFT_OFFSET  15 //742 //dir_left_offset//688    659  702
     71          #define DIR_RIGHT_OFFSET 37 //dir_right_offset// 688
     72          
     73          //------------------------------------------------------------------------------
     74          //#define ANGLE_CONTROL_P_1   0.1
     75          //#define ANGLE_CONTROL_D_1   0.002
     76          //#define ANGLE_CONTROL_P_2   0.25
     77          //#define ANGLE_CONTROL_D_2   0.002
     78          extern int gravity,gyro;
     79          //int dir_left_offset,dir_right_offset;

   \                                 In section .data, align 4
     80          float car_speed=20.0;
   \                     car_speed:
   \   00000000   0x41A00000         DC32 41A00000H
     81          

   \                                 In section .bss, align 4
     82           int gyro_direction;
   \                     gyro_direction:
   \   00000000                      DS8 4
     83           
     84          //--------------------------------------------------------------------------

   \                                 In section .bss, align 4
     85          long int 	g_lnInputVoltageSigma[5]={0};    	
   \                     g_lnInputVoltageSigma:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
     86          int       g_nInputVoltage[5]={0};   
   \                     g_nInputVoltage:
   \   00000000                      DS8 20
     87          
     88          #define VOLTAGE_GRAVITY    g_nInputVoltage[0]
     89          #define VOLTAGE_GYRO       g_nInputVoltage[1]
     90          #define VOLTAGE_LEFT       g_nInputVoltage[2]
     91          #define VOLTAGE_RIGHT      g_nInputVoltage[3]		
     92          #define DIR_CONTROL_D_VALUE  g_nInputVoltage[4]

   \                                 In section .bss, align 4
     93          float g_fGravityAngle=0;
   \                     g_fGravityAngle:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     94          float g_fGyroscopeAngleSpeed =0;
   \                     g_fGyroscopeAngleSpeed:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     95          float g_fCarAngle=0;
   \                     g_fCarAngle:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     96          float g_fGyroscopeAngleIntergral =0;
   \                     g_fGyroscopeAngleIntergral:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     97          float g_fAngleControlOut=0;
   \                     g_fAngleControlOut:
   \   00000000                      DS8 4
     98          

   \                                 In section .bss, align 4
     99          float g_fDirectionControlOutOld=0;
   \                     g_fDirectionControlOutOld:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    100          float g_fDirectionControlOutNew =0;
   \                     g_fDirectionControlOutNew:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    101          float g_fDirectionControlOut=0;
   \                     g_fDirectionControlOut:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    102          int   g_nDirectionControlPeriod=0;
   \                     g_nDirectionControlPeriod:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    103          int   g_nDirectionControlCount =0;
   \                     g_nDirectionControlCount:
   \   00000000                      DS8 4
    104          

   \                                 In section .bss, align 4
    105           int g_nLeftMotorPulseSigma =0;
   \                     g_nLeftMotorPulseSigma:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    106           int g_nRightMotorPulseSigma=0;
   \                     g_nRightMotorPulseSigma:
   \   00000000                      DS8 4
    107          

   \                                 In section .bss, align 4
    108          float g_fCarSpeed=0;
   \                     g_fCarSpeed:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    109          float g_fSpeedControlIntegral=0;
   \                     g_fSpeedControlIntegral:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    110          float g_fSpeedControlOutOld =0;
   \                     g_fSpeedControlOutOld:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    111          float g_fSpeedControlOutNew =0;
   \                     g_fSpeedControlOutNew:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    112          float g_fSpeedControlOut =0;
   \                     g_fSpeedControlOut:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
    113          uint8   g_nSpeedControlPeriod=0;
   \                     g_nSpeedControlPeriod:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
    114          extern int  g_nSpeedControlCount =0;
   \                     g_nSpeedControlCount:
   \   00000000                      DS8 4
    115          

   \                                 In section .bss, align 4
    116          float g_fLeftMotorOut=0;
   \                     g_fLeftMotorOut:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    117          float g_fRightMotorOut =0;
   \                     g_fRightMotorOut:
   \   00000000                      DS8 4
    118          

   \                                 In section .bss, align 4
    119           int  g_nLeftMotorPulse=0;
   \                     g_nLeftMotorPulse:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    120           int  g_nRightMotorPulse=0;
   \                     g_nRightMotorPulse:
   \   00000000                      DS8 4
    121          
    122          // float OutData[4] = { 0 };  //虚拟示波器输出
    123          // void OutPut_Data(void);
    124          
    125          

   \                                 In section .bss, align 4
    126          float  SET_SPEED=0.0;
   \                     SET_SPEED:
   \   00000000                      DS8 4
    127           
    128          #define CAR_SPEED_SET            SET_SPEED 
    129           
    130           
    131          

   \                                 In section .text, align 4, keep-with-next
    132          void pit0_isr()                   //定时器1ms中断函数
    133          {  
   \                     pit0_isr:
   \   00000000   0xB580             PUSH     {R7,LR}
    134            DisableInterrupts;
   \   00000002   0xB672             CPSID i         
    135          
    136              
    137            	g_n1MSEventCount ++;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable11
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x1C40             ADDS     R0,R0,#+1
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable11
   \   00000010   0x6008             STR      R0,[R1, #+0]
    138          
    139            	//--------------------------------------------------------------------------
    140          	g_nSpeedControlPeriod ++;
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x1C40             ADDS     R0,R0,#+1
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable11_1
   \   0000001E   0x7008             STRB     R0,[R1, #+0]
    141                  SpeedControlOutput();
   \   00000020   0x.... 0x....      BL       SpeedControlOutput
    142            	
    143            	//g_nDirectionControlPeriod ++;
    144            	//DirectionControlOutput();
    145           
    146           	//--------------------------------------------------------------------------
    147            	if(g_n1MSEventCount >=5)
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable11
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0x2805             CMP      R0,#+5
   \   0000002C   0xD308             BCC.N    ??pit0_isr_0
    148            	 {   
    149            	                                          // Motor speed adjust
    150                     g_n1MSEventCount = 0;                   // Clear the event counter;
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable11
   \   00000032   0x2100             MOVS     R1,#+0
   \   00000034   0x6001             STR      R1,[R0, #+0]
    151                     GetleftMotorPulse();
   \   00000036   0x.... 0x....      BL       GetleftMotorPulse
    152                     GetrighttMotorPulse();
   \   0000003A   0x.... 0x....      BL       GetrighttMotorPulse
   \   0000003E   0xE02E             B.N      ??pit0_isr_1
    153            	 }
    154            	 else if(g_n1MSEventCount == 1) 
   \                     ??pit0_isr_0:
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable11
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0x2801             CMP      R0,#+1
   \   00000048   0xD104             BNE.N    ??pit0_isr_2
    155            	 {                                        // Start ADC convert and Car erect adjust  		 
    156          			
    157          	    //SampleInputVoltage();
    158                     get_ad();
   \   0000004A   0x.... 0x....      BL       get_ad
    159          	   AngleCalculate();
   \   0000004E   0x.... 0x....      BL       AngleCalculate
   \   00000052   0xE024             B.N      ??pit0_isr_1
    160            	 } 
    161            	 else if(g_n1MSEventCount == 2) 
   \                     ??pit0_isr_2:
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable11
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x2802             CMP      R0,#+2
   \   0000005C   0xD104             BNE.N    ??pit0_isr_3
    162            	  {          // Get the voltage and start calculation
    163          		//GetInputVoltageAverage(20);
    164          		//AngleCalculate();
    165          	//	 virtual_scope_show();
    166          		AngleControl();
   \   0000005E   0x.... 0x....      BL       AngleControl
    167          	//	angle_control();	
    168          		MotorOutput();                          // Output motor control voltage;  		
   \   00000062   0x.... 0x....      BL       MotorOutput
   \   00000066   0xE01A             B.N      ??pit0_isr_1
    169            	  }
    170           	 else if(g_n1MSEventCount == 3) 
   \                     ??pit0_isr_3:
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable11
   \   0000006C   0x6800             LDR      R0,[R0, #+0]
   \   0000006E   0x2803             CMP      R0,#+3
   \   00000070   0xD115             BNE.N    ??pit0_isr_1
    171            	 {                                    // Car speed adjust
    172            		g_nSpeedControlCount ++;
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000076   0x6800             LDR      R0,[R0, #+0]
   \   00000078   0x1C40             ADDS     R0,R0,#+1
   \   0000007A   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   0000007E   0x6008             STR      R0,[R1, #+0]
    173            		if(g_nSpeedControlCount >= 20)
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000084   0x6800             LDR      R0,[R0, #+0]
   \   00000086   0x2814             CMP      R0,#+20
   \   00000088   0xDB09             BLT.N    ??pit0_isr_1
    174            		 {
    175            			SpeedControl();
   \   0000008A   0x.... 0x....      BL       SpeedControl
    176            			g_nSpeedControlCount = 0;
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000092   0x2100             MOVS     R1,#+0
   \   00000094   0x6001             STR      R1,[R0, #+0]
    177            			g_nSpeedControlPeriod = 0;  			
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   0000009A   0x2100             MOVS     R1,#+0
   \   0000009C   0x7001             STRB     R1,[R0, #+0]
    178            		 }
    179            	 }   
    180          /* 	 else if(g_n1MSEventCount == 4)
    181            	  {                                    // Car direction control
    182          		g_nDirectionControlCount ++;
    183          		
    184          		if(g_nDirectionControlCount >=2)
    185          		 {
    186          	  		DirectionControl();
    187          	  		g_nDirectionControlCount = 0;
    188          	  		g_nDirectionControlPeriod = 0;
    189          	          }
    190              	  }
    191           	
    192          */  
    193              PIT_TFLG(0)|=PIT_TFLG_TIF_MASK;          //清中断标志位
   \                     ??pit0_isr_1:
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable11_3  ;; 0x4003710c
   \   000000A2   0x6800             LDR      R0,[R0, #+0]
   \   000000A4   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000A8   0x.... 0x....      LDR.W    R1,??DataTable11_3  ;; 0x4003710c
   \   000000AC   0x6008             STR      R0,[R1, #+0]
    194              EnableInterrupts;
   \   000000AE   0xB662             CPSIE i         
    195          }
   \   000000B0   0xBD01             POP      {R0,PC}          ;; return
    196          
    197          
    198          
    199          

   \                                 In section .text, align 2, keep-with-next
    200          void SpeedControlOutput(void) 
    201          {
   \                     SpeedControlOutput:
   \   00000000   0xB510             PUSH     {R4,LR}
    202          	float fValue;
    203          	fValue = g_fSpeedControlOutNew - g_fSpeedControlOutOld;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable11_4
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable11_5
   \   0000000C   0x6809             LDR      R1,[R1, #+0]
   \   0000000E   0x.... 0x....      BL       __aeabi_fsub
   \   00000012   0x0004             MOVS     R4,R0
    204          	g_fSpeedControlOut = fValue * (g_nSpeedControlPeriod + 1) / SPEED_CONTROL_PERIOD + g_fSpeedControlOutOld;
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
   \   0000001C   0x.... 0x....      BL       __aeabi_i2f
   \   00000020   0x0021             MOVS     R1,R4
   \   00000022   0x.... 0x....      BL       __aeabi_fmul
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable11_6  ;; 0x42c80000
   \   0000002A   0x.... 0x....      BL       __aeabi_fdiv
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable11_5
   \   00000032   0x6809             LDR      R1,[R1, #+0]
   \   00000034   0x.... 0x....      BL       __aeabi_fadd
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable11_7
   \   0000003C   0x6008             STR      R0,[R1, #+0]
    205          	
    206          }
   \   0000003E   0xBD10             POP      {R4,PC}          ;; return
    207          
    208          

   \                                 In section .text, align 2, keep-with-next
    209          void SpeedControl(void)
    210           {
   \                     SpeedControl:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
    211          	float fP, fDelta;
    212          	float fI;
    213          
    214          	
    215          	//--------------------------------------------------------------------------
    216          	g_fCarSpeed = (g_nLeftMotorPulseSigma + g_nRightMotorPulseSigma) / 2;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable11_9
   \   0000000C   0x6809             LDR      R1,[R1, #+0]
   \   0000000E   0x1808             ADDS     R0,R1,R0
   \   00000010   0x2102             MOVS     R1,#+2
   \   00000012   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000016   0x.... 0x....      BL       __aeabi_i2f
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable11_10
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    217          	g_nLeftMotorPulseSigma = g_nRightMotorPulseSigma = 0;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable11_9
   \   00000026   0x6008             STR      R0,[R1, #+0]
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable11_8
   \   0000002C   0x6008             STR      R0,[R1, #+0]
    218          	g_fCarSpeed *= CAR_SPEED_CONSTANT;
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable11_10
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0x.... 0x....      BL       __aeabi_f2d
   \   00000038   0x.... 0x....      LDR.W    R2,??DataTable11_11  ;; 0x9999999a
   \   0000003C   0x.... 0x....      LDR.W    R3,??DataTable11_12  ;; 0x3fc99999
   \   00000040   0x.... 0x....      BL       __aeabi_dmul
   \   00000044   0x.... 0x....      BL       __aeabi_d2f
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable11_10
   \   0000004C   0x6008             STR      R0,[R1, #+0]
    219           /*  
    220             if(flag_decrease==0)             //1为从最大速度减小
    221             {
    222               if(flag_increase==1)           //1为加速
    223              {
    224           */    
    225                 if(car_speed<CAR_SPEED_SET)
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable11_13
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable11_14
   \   00000058   0x6809             LDR      R1,[R1, #+0]
   \   0000005A   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000005E   0xD20F             BCS.N    ??SpeedControl_0
    226                {
    227          
    228          		car_speed+=CAR_SPEED_STEP;
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable11_13
   \   00000064   0x6800             LDR      R0,[R0, #+0]
   \   00000066   0x.... 0x....      BL       __aeabi_f2d
   \   0000006A   0x.... 0x....      LDR.W    R2,??DataTable11_11  ;; 0x9999999a
   \   0000006E   0x.... 0x....      LDR.W    R3,??DataTable11_15  ;; 0x3fe99999
   \   00000072   0x.... 0x....      BL       __aeabi_dadd
   \   00000076   0x.... 0x....      BL       __aeabi_d2f
   \   0000007A   0x.... 0x....      LDR.W    R1,??DataTable11_13
   \   0000007E   0x6008             STR      R0,[R1, #+0]
    229          	  	} 
    230           /*   }
    231          		else
    232          		  {
    233                   if(car_speed<CAR_SPEED_SET)
    234                   {
    235          
    236          	       	car_speed+=CAR_SPEED_STEP;
    237          	      	} 
    238          		  }
    239              }  
    240               else
    241               {
    242              
    243                  
    244                  
    245                     if(car_speed>CAR_SPEED_SET)
    246                     {
    247          
    248          	       	car_speed-=(CAR_SPEED_STEP+0.2);
    249          	        	} 
    250                  
    251          	    
    252          	  	}  */
    253          	//--------------------------------------------------------------------------
    254          	fDelta =car_speed;//CAR_SPEED_SET;//car_speed; 
   \                     ??SpeedControl_0:
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable11_13
   \   00000084   0x6805             LDR      R5,[R0, #+0]
    255          	fDelta -= g_fCarSpeed;
   \   00000086   0x0028             MOVS     R0,R5
   \   00000088   0x.... 0x....      LDR.W    R1,??DataTable11_10
   \   0000008C   0x6809             LDR      R1,[R1, #+0]
   \   0000008E   0x.... 0x....      BL       __aeabi_fsub
   \   00000092   0x0005             MOVS     R5,R0
    256          	
    257          	fP = fDelta * SPEED_CONTROL_P;
   \   00000094   0x0028             MOVS     R0,R5
   \   00000096   0x.... 0x....      BL       __aeabi_f2d
   \   0000009A   0x.... 0x....      LDR.W    R2,??DataTable11_16  ;; 0x70a3d70a
   \   0000009E   0x.... 0x....      LDR.W    R3,??DataTable11_17  ;; 0x3fb70a3d
   \   000000A2   0x.... 0x....      BL       __aeabi_dmul
   \   000000A6   0x.... 0x....      BL       __aeabi_d2f
   \   000000AA   0x0004             MOVS     R4,R0
    258          	fI = fDelta * SPEED_CONTROL_I;
   \   000000AC   0x0028             MOVS     R0,R5
   \   000000AE   0x.... 0x....      BL       __aeabi_f2d
   \   000000B2   0x.... 0x....      LDR.W    R2,??DataTable11_18  ;; 0x3126e979
   \   000000B6   0x.... 0x....      LDR.W    R3,??DataTable11_19  ;; 0x3f8cac08
   \   000000BA   0x.... 0x....      BL       __aeabi_dmul
   \   000000BE   0x.... 0x....      BL       __aeabi_d2f
    259          	g_fSpeedControlIntegral += fI;
   \   000000C2   0x.... 0x....      LDR.W    R1,??DataTable11_20
   \   000000C6   0x6809             LDR      R1,[R1, #+0]
   \   000000C8   0x.... 0x....      BL       __aeabi_fadd
   \   000000CC   0x.... 0x....      LDR.W    R1,??DataTable11_20
   \   000000D0   0x6008             STR      R0,[R1, #+0]
    260          	
    261          			
    262          	//--------------------------------------------------------------------------
    263          	
    264          	if(g_fSpeedControlIntegral > SPEED_CONTROL_OUT_MAX)	
   \   000000D2   0x.... 0x....      LDR.W    R0,??DataTable11_20
   \   000000D6   0x6800             LDR      R0,[R0, #+0]
   \   000000D8   0x.... 0x....      LDR.W    R1,??DataTable11_21  ;; 0x41200001
   \   000000DC   0x.... 0x....      BL       __aeabi_cfrcmple
   \   000000E0   0xD804             BHI.N    ??SpeedControl_1
    265          		g_fSpeedControlIntegral = SPEED_CONTROL_OUT_MAX;
   \   000000E2   0x.... 0x....      LDR.W    R0,??DataTable11_20
   \   000000E6   0x.... 0x....      LDR.W    R1,??DataTable11_22  ;; 0x41200000
   \   000000EA   0x6001             STR      R1,[R0, #+0]
    266          	if(g_fSpeedControlIntegral < SPEED_CONTROL_OUT_MIN)  	
   \                     ??SpeedControl_1:
   \   000000EC   0x.... 0x....      LDR.W    R0,??DataTable11_20
   \   000000F0   0x6800             LDR      R0,[R0, #+0]
   \   000000F2   0x.... 0x....      LDR.W    R1,??DataTable11_23  ;; 0xc1200000
   \   000000F6   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000FA   0xD204             BCS.N    ??SpeedControl_2
    267          		g_fSpeedControlIntegral = SPEED_CONTROL_OUT_MIN;
   \   000000FC   0x.... 0x....      LDR.W    R0,??DataTable11_20
   \   00000100   0x.... 0x....      LDR.W    R1,??DataTable11_23  ;; 0xc1200000
   \   00000104   0x6001             STR      R1,[R0, #+0]
    268          	
    269          	g_fSpeedControlOutOld = g_fSpeedControlOutNew;
   \                     ??SpeedControl_2:
   \   00000106   0x....             LDR.N    R0,??DataTable11_5
   \   00000108   0x....             LDR.N    R1,??DataTable11_4
   \   0000010A   0x6809             LDR      R1,[R1, #+0]
   \   0000010C   0x6001             STR      R1,[R0, #+0]
    270          
    271          	g_fSpeedControlOutNew = fP + g_fSpeedControlIntegral;
   \   0000010E   0x.... 0x....      LDR.W    R0,??DataTable11_20
   \   00000112   0x6800             LDR      R0,[R0, #+0]
   \   00000114   0x0021             MOVS     R1,R4
   \   00000116   0x.... 0x....      BL       __aeabi_fadd
   \   0000011A   0x....             LDR.N    R1,??DataTable11_4
   \   0000011C   0x6008             STR      R0,[R1, #+0]
    272          
    273          	
    274          }
   \   0000011E   0xBD30             POP      {R4,R5,PC}       ;; return
    275          
    276          
    277          //----------------------------------------------------------------------------
    278          //函数名称:AngleCalculate()
    279          //函数返回:无
    280          //参数说明:无
    281          //功能概要:角度计算
    282          //-----------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    283          void AngleCalculate(void)
    284          {
   \                     AngleCalculate:
   \   00000000   0xB500             PUSH     {LR}
    285                float Value;
    286                g_fGravityAngle=(VOLTAGE_GRAVITY-GRAVITY_OFFSET) * GRAVITY_ANGLE_RATIO ;
   \   00000002   0x....             LDR.N    R0,??DataTable11_24
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x....             LDR.N    R1,??DataTable11_25
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0x1A40             SUBS     R0,R0,R1
   \   0000000C   0x.... 0x....      BL       __aeabi_i2d
   \   00000010   0x....             LDR.N    R2,??DataTable11_26  ;; 0xd0e56042
   \   00000012   0x....             LDR.N    R3,??DataTable11_27  ;; 0x3fc9db22
   \   00000014   0x.... 0x....      BL       __aeabi_dmul
   \   00000018   0x.... 0x....      BL       __aeabi_d2f
   \   0000001C   0x....             LDR.N    R1,??DataTable11_28
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    287                
    288                g_fGyroscopeAngleSpeed=(VOLTAGE_GYRO-GYROSCOPE_OFFSET) * GYROSCOPE_ANGLE_RATIO;
   \   00000020   0x....             LDR.N    R0,??DataTable11_24
   \   00000022   0x6840             LDR      R0,[R0, #+4]
   \   00000024   0x....             LDR.N    R1,??DataTable11_29
   \   00000026   0x6809             LDR      R1,[R1, #+0]
   \   00000028   0x1A40             SUBS     R0,R0,R1
   \   0000002A   0x.... 0x....      BL       __aeabi_i2d
   \   0000002E   0xF05F 0x3266      MOVS     R2,#+1717986918
   \   00000032   0x....             LDR.N    R3,??DataTable11_30  ;; 0x3fee6666
   \   00000034   0x.... 0x....      BL       __aeabi_dmul
   \   00000038   0x.... 0x....      BL       __aeabi_d2f
   \   0000003C   0x....             LDR.N    R1,??DataTable11_31
   \   0000003E   0x6008             STR      R0,[R1, #+0]
    289                
    290                g_fCarAngle=g_fGyroscopeAngleIntergral;
   \   00000040   0x....             LDR.N    R0,??DataTable11_32
   \   00000042   0x....             LDR.N    R1,??DataTable11_33
   \   00000044   0x6809             LDR      R1,[R1, #+0]
   \   00000046   0x6001             STR      R1,[R0, #+0]
    291                Value=(g_fGravityAngle-g_fCarAngle)/GRAVITY_ADJUST_TIME_CONSTANT;
   \   00000048   0x....             LDR.N    R0,??DataTable11_28
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0x....             LDR.N    R1,??DataTable11_32
   \   0000004E   0x6809             LDR      R1,[R1, #+0]
   \   00000050   0x.... 0x....      BL       __aeabi_fsub
   \   00000054   0x.... 0x....      BL       __aeabi_f2d
   \   00000058   0x2200             MOVS     R2,#+0
   \   0000005A   0x....             LDR.N    R3,??DataTable11_34  ;; 0x40080000
   \   0000005C   0x.... 0x....      BL       __aeabi_ddiv
   \   00000060   0x.... 0x....      BL       __aeabi_d2f
    292                
    293                g_fGyroscopeAngleIntergral+=(g_fGyroscopeAngleSpeed+Value)/GYROSCOPE_ANGLE_SIGMA_FREQUENCY;   
   \   00000064   0x....             LDR.N    R1,??DataTable11_31
   \   00000066   0x6809             LDR      R1,[R1, #+0]
   \   00000068   0x.... 0x....      BL       __aeabi_fadd
   \   0000006C   0x....             LDR.N    R1,??DataTable11_35  ;; 0x43480000
   \   0000006E   0x.... 0x....      BL       __aeabi_fdiv
   \   00000072   0x....             LDR.N    R1,??DataTable11_33
   \   00000074   0x6809             LDR      R1,[R1, #+0]
   \   00000076   0x.... 0x....      BL       __aeabi_fadd
   \   0000007A   0x....             LDR.N    R1,??DataTable11_33
   \   0000007C   0x6008             STR      R0,[R1, #+0]
    294            
    295            
    296          }
   \   0000007E   0xBD00             POP      {PC}             ;; return
    297          //============================================================================
    298          //函数名称: AngleControl(void) 
    299          //函数返回:无
    300          //参数说明:无
    301          //功能概要:角度控制
    302          //============================================================================
    303          

   \                                 In section .text, align 2, keep-with-next
    304          void AngleControl(void) 
    305          {
   \                     AngleControl:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
    306          	float fValue1;
    307          
    308          	fValue1 = (CAR_ANGLE_SET - g_fCarAngle) * ANGLE_CONTROL_P +
    309          	         (CAR_ANGLE_SPEED_SET - g_fGyroscopeAngleSpeed) * ANGLE_CONTROL_D;
   \   00000002   0x....             LDR.N    R0,??DataTable11_32
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF090 0x4000      EORS     R0,R0,#0x80000000
   \   0000000A   0x.... 0x....      BL       __aeabi_f2d
   \   0000000E   0x....             LDR.N    R2,??DataTable11_11  ;; 0x9999999a
   \   00000010   0x....             LDR.N    R3,??DataTable11_36  ;; 0x3fb99999
   \   00000012   0x.... 0x....      BL       __aeabi_dmul
   \   00000016   0x0004             MOVS     R4,R0
   \   00000018   0x000D             MOVS     R5,R1
   \   0000001A   0x....             LDR.N    R0,??DataTable11_31
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF090 0x4000      EORS     R0,R0,#0x80000000
   \   00000022   0x.... 0x....      BL       __aeabi_f2d
   \   00000026   0x....             LDR.N    R2,??DataTable11_37  ;; 0xeb1c432d
   \   00000028   0x....             LDR.N    R3,??DataTable11_38  ;; 0x3f5a36e2
   \   0000002A   0x.... 0x....      BL       __aeabi_dmul
   \   0000002E   0x0022             MOVS     R2,R4
   \   00000030   0x002B             MOVS     R3,R5
   \   00000032   0x.... 0x....      BL       __aeabi_dadd
   \   00000036   0x.... 0x....      BL       __aeabi_d2f
    310          	         
    311          	if(fValue1 > ANGLE_CONTROL_OUT_MAX)			fValue1 = ANGLE_CONTROL_OUT_MAX;
   \   0000003A   0x....             LDR.N    R1,??DataTable11_21  ;; 0x41200001
   \   0000003C   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000040   0xD801             BHI.N    ??AngleControl_0
   \   00000042   0x....             LDR.N    R0,??DataTable11_22  ;; 0x41200000
   \   00000044   0xE004             B.N      ??AngleControl_1
    312          	else if(fValue1 < ANGLE_CONTROL_OUT_MIN) 	fValue1 = ANGLE_CONTROL_OUT_MIN;
   \                     ??AngleControl_0:
   \   00000046   0x....             LDR.N    R1,??DataTable11_23  ;; 0xc1200000
   \   00000048   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000004C   0xD200             BCS.N    ??AngleControl_1
   \   0000004E   0x....             LDR.N    R0,??DataTable11_23  ;; 0xc1200000
    313          	g_fAngleControlOut = fValue1;
   \                     ??AngleControl_1:
   \   00000050   0x....             LDR.N    R1,??DataTable11_39
   \   00000052   0x6008             STR      R0,[R1, #+0]
    314          	
    315          }
   \   00000054   0xBD30             POP      {R4,R5,PC}       ;; return
    316          //------------------------------------------------------------------------------
    317          //函数名称:MotorOutput(void)
    318          //函数返回:
    319          //参数说明:
    320          //功能概要:
    321          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    322          void MotorOutput(void)
    323          {
   \                     MotorOutput:
   \   00000000   0xB510             PUSH     {R4,LR}
    324          	float fLeft, fRight;
    325          
    326          	fLeft = g_fAngleControlOut- g_fSpeedControlOut;    //- g_fDirectionControlOut;
   \   00000002   0x....             LDR.N    R0,??DataTable11_39
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x....             LDR.N    R1,??DataTable11_7
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0x.... 0x....      BL       __aeabi_fsub
   \   0000000E   0x0004             MOVS     R4,R0
    327          	fRight = g_fAngleControlOut - g_fSpeedControlOut;   // + g_fDirectionControlOut;
   \   00000010   0x....             LDR.N    R0,??DataTable11_39
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x....             LDR.N    R1,??DataTable11_7
   \   00000016   0x6809             LDR      R1,[R1, #+0]
   \   00000018   0x.... 0x....      BL       __aeabi_fsub
   \   0000001C   0x0002             MOVS     R2,R0
    328          	
    329          	if(fLeft > MOTOR_OUT_MAX)		fLeft = MOTOR_OUT_MAX;
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0x....             LDR.N    R1,??DataTable11_40  ;; 0x3f800001
   \   00000022   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000026   0xD801             BHI.N    ??MotorOutput_0
   \   00000028   0xF05F 0x547E      MOVS     R4,#+1065353216
    330          	if(fLeft < MOTOR_OUT_MIN)		fLeft = MOTOR_OUT_MIN;
   \                     ??MotorOutput_0:
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0x....             LDR.N    R1,??DataTable11_41  ;; 0xbf800000
   \   00000030   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000034   0xD200             BCS.N    ??MotorOutput_1
   \   00000036   0x....             LDR.N    R4,??DataTable11_41  ;; 0xbf800000
    331          	if(fRight > MOTOR_OUT_MAX)		fRight = MOTOR_OUT_MAX;
   \                     ??MotorOutput_1:
   \   00000038   0x0010             MOVS     R0,R2
   \   0000003A   0x....             LDR.N    R1,??DataTable11_40  ;; 0x3f800001
   \   0000003C   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000040   0xD801             BHI.N    ??MotorOutput_2
   \   00000042   0xF05F 0x527E      MOVS     R2,#+1065353216
    332          	if(fRight < MOTOR_OUT_MIN)		fRight = MOTOR_OUT_MIN;
   \                     ??MotorOutput_2:
   \   00000046   0x0010             MOVS     R0,R2
   \   00000048   0x....             LDR.N    R1,??DataTable11_41  ;; 0xbf800000
   \   0000004A   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000004E   0xD200             BCS.N    ??MotorOutput_3
   \   00000050   0x....             LDR.N    R2,??DataTable11_41  ;; 0xbf800000
    333          		
    334          	g_fLeftMotorOut = fLeft;
   \                     ??MotorOutput_3:
   \   00000052   0x....             LDR.N    R0,??DataTable11_42
   \   00000054   0x6004             STR      R4,[R0, #+0]
    335          	g_fRightMotorOut = fRight;
   \   00000056   0x....             LDR.N    R0,??DataTable11_43
   \   00000058   0x6002             STR      R2,[R0, #+0]
    336          	MotorSpeedOut();
   \   0000005A   0x.... 0x....      BL       MotorSpeedOut
    337          }
   \   0000005E   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    338          void get_ad()
    339          {
   \                     get_ad:
   \   00000000   0xB580             PUSH     {R7,LR}
    340             VOLTAGE_GRAVITY = hw_ad_ave(0,12,12,10);                 //均值滤波得加速度电压信号(PTB2)
   \   00000002   0x230A             MOVS     R3,#+10
   \   00000004   0x220C             MOVS     R2,#+12
   \   00000006   0x210C             MOVS     R1,#+12
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       hw_ad_ave
   \   0000000E   0x....             LDR.N    R1,??DataTable11_24
   \   00000010   0x6008             STR      R0,[R1, #+0]
    341             VOLTAGE_GYRO = hw_ad_ave(0,13,12,10);                  //--------得平衡陀螺仪电压信号(PTB3)
   \   00000012   0x230A             MOVS     R3,#+10
   \   00000014   0x220C             MOVS     R2,#+12
   \   00000016   0x210D             MOVS     R1,#+13
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x.... 0x....      BL       hw_ad_ave
   \   0000001E   0x....             LDR.N    R1,??DataTable11_24
   \   00000020   0x6048             STR      R0,[R1, #+4]
    342             //VOLTAGE_GYRO_2 = hw_ad_ave(0,14,12,10);                  //---------得转向陀螺仪电压信号(PTC0)
    343          }
   \   00000022   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    344          void GetInputVoltageAverage(int j)
    345          {
    346          	int i;
    347          
    348          	for(i = 0; i < 5; i ++) 
   \                     GetInputVoltageAverage:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0xE00C             B.N      ??GetInputVoltageAverage_0
    349          	{
    350          		g_nInputVoltage[i] = (int)(g_lnInputVoltageSigma[i] /j);
   \                     ??GetInputVoltageAverage_1:
   \   00000004   0x....             LDR.N    R2,??DataTable11_44
   \   00000006   0xF852 0x2021      LDR      R2,[R2, R1, LSL #+2]
   \   0000000A   0xFB92 0xF2F0      SDIV     R2,R2,R0
   \   0000000E   0x....             LDR.N    R3,??DataTable11_24
   \   00000010   0xF843 0x2021      STR      R2,[R3, R1, LSL #+2]
    351          		g_lnInputVoltageSigma[i] = 0;
   \   00000014   0x....             LDR.N    R2,??DataTable11_44
   \   00000016   0x2300             MOVS     R3,#+0
   \   00000018   0xF842 0x3021      STR      R3,[R2, R1, LSL #+2]
    352          	}
   \   0000001C   0x1C49             ADDS     R1,R1,#+1
   \                     ??GetInputVoltageAverage_0:
   \   0000001E   0x2905             CMP      R1,#+5
   \   00000020   0xDBF0             BLT.N    ??GetInputVoltageAverage_1
    353          
    354          }
   \   00000022   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
    355          void MotorSpeedOut(void)
    356          {
   \                     MotorSpeedOut:
   \   00000000   0xB580             PUSH     {R7,LR}
    357          	float fLeftVal, fRightVal;
    358          	
    359          	fLeftVal = g_fLeftMotorOut;
   \   00000002   0x....             LDR.N    R0,??DataTable11_42
   \   00000004   0x6802             LDR      R2,[R0, #+0]
    360          	fRightVal = g_fRightMotorOut;
   \   00000006   0x....             LDR.N    R0,??DataTable11_43
   \   00000008   0x6803             LDR      R3,[R0, #+0]
    361          //	if(fLeftVal > 0) 			fLeftVal += MOTOR_OUT_DEAD_VAL;
    362          //	else if(fLeftVal < 0) 		fLeftVal -= MOTOR_OUT_DEAD_VAL;
    363          //	
    364          //	if(fRightVal > 0)			fRightVal += MOTOR_OUT_DEAD_VAL;
    365          //	else if(fRightVal < 0)		fRightVal -= MOTOR_OUT_DEAD_VAL;
    366          		
    367          	if(fLeftVal > MOTOR_OUT_MAX)	fLeftVal = MOTOR_OUT_MAX;
   \   0000000A   0x0010             MOVS     R0,R2
   \   0000000C   0x....             LDR.N    R1,??DataTable11_40  ;; 0x3f800001
   \   0000000E   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000012   0xD801             BHI.N    ??MotorSpeedOut_0
   \   00000014   0xF05F 0x527E      MOVS     R2,#+1065353216
    368          	if(fLeftVal < MOTOR_OUT_MIN)	fLeftVal = MOTOR_OUT_MIN;
   \                     ??MotorSpeedOut_0:
   \   00000018   0x0010             MOVS     R0,R2
   \   0000001A   0x....             LDR.N    R1,??DataTable11_41  ;; 0xbf800000
   \   0000001C   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000020   0xD200             BCS.N    ??MotorSpeedOut_1
   \   00000022   0x....             LDR.N    R2,??DataTable11_41  ;; 0xbf800000
    369          	if(fRightVal > MOTOR_OUT_MAX)	fRightVal = MOTOR_OUT_MAX;
   \                     ??MotorSpeedOut_1:
   \   00000024   0x0018             MOVS     R0,R3
   \   00000026   0x....             LDR.N    R1,??DataTable11_40  ;; 0x3f800001
   \   00000028   0x.... 0x....      BL       __aeabi_cfrcmple
   \   0000002C   0xD801             BHI.N    ??MotorSpeedOut_2
   \   0000002E   0xF05F 0x537E      MOVS     R3,#+1065353216
    370          	if(fRightVal < MOTOR_OUT_MIN)	fRightVal = MOTOR_OUT_MIN;
   \                     ??MotorSpeedOut_2:
   \   00000032   0x0018             MOVS     R0,R3
   \   00000034   0x....             LDR.N    R1,??DataTable11_41  ;; 0xbf800000
   \   00000036   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000003A   0xD200             BCS.N    ??MotorSpeedOut_3
   \   0000003C   0x....             LDR.N    R3,??DataTable11_41  ;; 0xbf800000
    371          			
    372          	SetMotorVoltage(fLeftVal, fRightVal);
   \                     ??MotorSpeedOut_3:
   \   0000003E   0x0019             MOVS     R1,R3
   \   00000040   0x0010             MOVS     R0,R2
   \   00000042   0x.... 0x....      BL       SetMotorVoltage
    373          }
   \   00000046   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    374          void GetleftMotorPulse()
    375          {
    376            uint32  nLeftPulse;
    377            
    378            nLeftPulse=FTM1_CNT;
   \                     GetleftMotorPulse:
   \   00000000   0x....             LDR.N    R0,??DataTable11_45  ;; 0x40039004
   \   00000002   0x6800             LDR      R0,[R0, #+0]
    379            g_nLeftMotorPulse = (int)nLeftPulse;
   \   00000004   0x....             LDR.N    R1,??DataTable11_46
   \   00000006   0x6008             STR      R0,[R1, #+0]
    380            
    381            g_nLeftMotorPulseSigma +=g_nLeftMotorPulse;
   \   00000008   0x....             LDR.N    R0,??DataTable11_8
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x....             LDR.N    R1,??DataTable11_46
   \   0000000E   0x6809             LDR      R1,[R1, #+0]
   \   00000010   0x1808             ADDS     R0,R1,R0
   \   00000012   0x....             LDR.N    R1,??DataTable11_8
   \   00000014   0x6008             STR      R0,[R1, #+0]
    382            FTM1_CNT=0;  
   \   00000016   0x....             LDR.N    R0,??DataTable11_45  ;; 0x40039004
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x6001             STR      R1,[R0, #+0]
    383          }
   \   0000001C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
    384          void GetrightMotorPulse()
    385          {
    386            uint32  nRightPulse; 
    387            nRightPulse=FTM2_CNT;
   \                     GetrightMotorPulse:
   \   00000000   0x....             LDR.N    R0,??DataTable11_47  ;; 0x400b8004
   \   00000002   0x6800             LDR      R0,[R0, #+0]
    388            g_nRightMotorPulse = (int)nRightPulse;
   \   00000004   0x....             LDR.N    R1,??DataTable11_48
   \   00000006   0x6008             STR      R0,[R1, #+0]
    389            g_nRightMotorPulseSigma +=g_nRightMotorPulse;	
   \   00000008   0x....             LDR.N    R0,??DataTable11_9
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x....             LDR.N    R1,??DataTable11_48
   \   0000000E   0x6809             LDR      R1,[R1, #+0]
   \   00000010   0x1808             ADDS     R0,R1,R0
   \   00000012   0x....             LDR.N    R1,??DataTable11_9
   \   00000014   0x6008             STR      R0,[R1, #+0]
    390            FTM2_CNT=0; 
   \   00000016   0x....             LDR.N    R0,??DataTable11_47  ;; 0x400b8004
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x6001             STR      R1,[R0, #+0]
    391          }
   \   0000001C   0x4770             BX       LR               ;; return
    392           /*
    393                   	g_nLeftMotorPulse = (int)nLeftPulse;
    394          	
    395                   if(!MOTOR_LEFT_SPEED_POSITIVE)		g_nLeftMotorPulse = -g_nLeftMotorPulse;
    396                   
    397                   g_nLeftMotorPulseSigma +=g_nLeftMotorPulse;
    398                  }
    399              else 
    400                  {
    401                    nRightPulse=PACNT;
    402                   
    403                      g_nRightMotorPulse = (int)nRightPulse;
    404                   	
    405                  
    406                   if(!MOTOR_RIGHT_SPEED_POSITIVE)		g_nRightMotorPulse = -g_nRightMotorPulse;
    407                   
    408                   	g_nRightMotorPulseSigma +=g_nRightMotorPulse;	
    409                  }*/
    410          
    411          //******************************************************************************

   \                                 In section .text, align 2, keep-with-next
    412          void SetMotorVoltage(float fLeftVoltage, float fRightVoltage) 
    413          {
   \                     SetMotorVoltage:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    414                                                          // Voltage : > 0 : Move forward;
    415                                                          //           < 0 : Move backward
    416          	int nPeriod;
    417          	int nOut;
    418          	
    419          	nPeriod =100;
   \   00000006   0x2664             MOVS     R6,#+100
    420          	
    421          	//--------------------------------------------------------------------------
    422          	if(fLeftVoltage > 1.0) 			fLeftVoltage = 1.0;
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x....             LDR.N    R1,??DataTable11_40  ;; 0x3f800001
   \   0000000C   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000010   0xD802             BHI.N    ??SetMotorVoltage_0
   \   00000012   0xF05F 0x547E      MOVS     R4,#+1065353216
   \   00000016   0xE005             B.N      ??SetMotorVoltage_1
    423          	else if(fLeftVoltage < -1.0) 	fLeftVoltage = -1.0;
   \                     ??SetMotorVoltage_0:
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0x....             LDR.N    R1,??DataTable11_41  ;; 0xbf800000
   \   0000001C   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000020   0xD200             BCS.N    ??SetMotorVoltage_1
   \   00000022   0x....             LDR.N    R4,??DataTable11_41  ;; 0xbf800000
    424          	
    425          	if(fRightVoltage > 1.0) 		fRightVoltage = 1.0;
   \                     ??SetMotorVoltage_1:
   \   00000024   0x0028             MOVS     R0,R5
   \   00000026   0x....             LDR.N    R1,??DataTable11_40  ;; 0x3f800001
   \   00000028   0x.... 0x....      BL       __aeabi_cfrcmple
   \   0000002C   0xD802             BHI.N    ??SetMotorVoltage_2
   \   0000002E   0xF05F 0x557E      MOVS     R5,#+1065353216
   \   00000032   0xE005             B.N      ??SetMotorVoltage_3
    426          	else if(fRightVoltage < -1.0)	fRightVoltage = -1.0;
   \                     ??SetMotorVoltage_2:
   \   00000034   0x0028             MOVS     R0,R5
   \   00000036   0x....             LDR.N    R1,??DataTable11_41  ;; 0xbf800000
   \   00000038   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000003C   0xD200             BCS.N    ??SetMotorVoltage_3
   \   0000003E   0x....             LDR.N    R5,??DataTable11_41  ;; 0xbf800000
    427            
    428            
    429            
    430             	//--------------------------------------------------------------------------
    431          	if(fRightVoltage > 0)                                          //右轮 前
   \                     ??SetMotorVoltage_3:
   \   00000040   0x0028             MOVS     R0,R5
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000048   0xD20D             BCS.N    ??SetMotorVoltage_4
    432                  {
    433                    //PWMDTY2=0;
    434                    nOut = (int)(fRightVoltage * nPeriod);
   \   0000004A   0x0030             MOVS     R0,R6
   \   0000004C   0x.... 0x....      BL       __aeabi_i2f
   \   00000050   0x0029             MOVS     R1,R5
   \   00000052   0x.... 0x....      BL       __aeabi_fmul
   \   00000056   0x.... 0x....      BL       __aeabi_f2iz
    435                    FTM_PWM_ChangeDuty(0,2, nOut);
   \   0000005A   0x0002             MOVS     R2,R0
   \   0000005C   0x2102             MOVS     R1,#+2
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x.... 0x....      BL       FTM_PWM_ChangeDuty
   \   00000064   0xE00C             B.N      ??SetMotorVoltage_5
    436          	}
    437          	 else                                                          //右轮 后
    438          	{
    439          	
    440          	  //PWMDTY3=0;
    441          	 // fRightVoltage = -fRightVoltage;
    442                    nOut = (int)(fRightVoltage * nPeriod);
   \                     ??SetMotorVoltage_4:
   \   00000066   0x0030             MOVS     R0,R6
   \   00000068   0x.... 0x....      BL       __aeabi_i2f
   \   0000006C   0x0029             MOVS     R1,R5
   \   0000006E   0x.... 0x....      BL       __aeabi_fmul
   \   00000072   0x.... 0x....      BL       __aeabi_f2iz
    443            	  FTM_PWM_ChangeDuty(0,2, nOut);
   \   00000076   0x0002             MOVS     R2,R0
   \   00000078   0x2102             MOVS     R1,#+2
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0x.... 0x....      BL       FTM_PWM_ChangeDuty
    444            		 
    445          	 
    446          	}
    447            
    448            
    449                                                        
    450          	//--------------------------------------------------------------------------	                                            	                                              
    451          	if(fLeftVoltage > 0)                                           //左轮 前
   \                     ??SetMotorVoltage_5:
   \   00000080   0x0020             MOVS     R0,R4
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000088   0xD20D             BCS.N    ??SetMotorVoltage_6
    452          	 {
    453          	 
    454          	 // PWMDTY0=0;
    455                    nOut = (int)(fLeftVoltage * nPeriod);
   \   0000008A   0x0030             MOVS     R0,R6
   \   0000008C   0x.... 0x....      BL       __aeabi_i2f
   \   00000090   0x0021             MOVS     R1,R4
   \   00000092   0x.... 0x....      BL       __aeabi_fmul
   \   00000096   0x.... 0x....      BL       __aeabi_f2iz
    456            	  FTM_PWM_ChangeDuty(0,1, nOut);
   \   0000009A   0x0002             MOVS     R2,R0
   \   0000009C   0x2101             MOVS     R1,#+1
   \   0000009E   0x2000             MOVS     R0,#+0
   \   000000A0   0x.... 0x....      BL       FTM_PWM_ChangeDuty
   \   000000A4   0xE00C             B.N      ??SetMotorVoltage_7
    457          	} 
    458          	else                                                           //左轮 后
    459          	{ 
    460          	 // PWMDTY1=0;
    461          	  //fLeftVoltage = -fLeftVoltage;
    462          	  nOut = (int)(fLeftVoltage * nPeriod);
   \                     ??SetMotorVoltage_6:
   \   000000A6   0x0030             MOVS     R0,R6
   \   000000A8   0x.... 0x....      BL       __aeabi_i2f
   \   000000AC   0x0021             MOVS     R1,R4
   \   000000AE   0x.... 0x....      BL       __aeabi_fmul
   \   000000B2   0x.... 0x....      BL       __aeabi_f2iz
    463            	  FTM_PWM_ChangeDuty(0,1, nOut);
   \   000000B6   0x0002             MOVS     R2,R0
   \   000000B8   0x2101             MOVS     R1,#+1
   \   000000BA   0x2000             MOVS     R0,#+0
   \   000000BC   0x.... 0x....      BL       FTM_PWM_ChangeDuty
    464          	}                                     
    465          
    466          
    467                                      
    468          } 
   \                     ??SetMotorVoltage_7:
   \   000000C0   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x........         DC32     g_n1MSEventCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x........         DC32     g_nSpeedControlPeriod

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x........         DC32     g_nSpeedControlCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   0x4003710C         DC32     0x4003710c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \   00000000   0x........         DC32     g_fSpeedControlOutNew

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \   00000000   0x........         DC32     g_fSpeedControlOutOld

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_6:
   \   00000000   0x42C80000         DC32     0x42c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_7:
   \   00000000   0x........         DC32     g_fSpeedControlOut

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_8:
   \   00000000   0x........         DC32     g_nLeftMotorPulseSigma

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_9:
   \   00000000   0x........         DC32     g_nRightMotorPulseSigma

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_10:
   \   00000000   0x........         DC32     g_fCarSpeed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_11:
   \   00000000   0x9999999A         DC32     0x9999999a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_12:
   \   00000000   0x3FC99999         DC32     0x3fc99999

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_13:
   \   00000000   0x........         DC32     car_speed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_14:
   \   00000000   0x........         DC32     SET_SPEED

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_15:
   \   00000000   0x3FE99999         DC32     0x3fe99999

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_16:
   \   00000000   0x70A3D70A         DC32     0x70a3d70a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_17:
   \   00000000   0x3FB70A3D         DC32     0x3fb70a3d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_18:
   \   00000000   0x3126E979         DC32     0x3126e979

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_19:
   \   00000000   0x3F8CAC08         DC32     0x3f8cac08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_20:
   \   00000000   0x........         DC32     g_fSpeedControlIntegral

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_21:
   \   00000000   0x41200001         DC32     0x41200001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_22:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_23:
   \   00000000   0xC1200000         DC32     0xc1200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_24:
   \   00000000   0x........         DC32     g_nInputVoltage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_25:
   \   00000000   0x........         DC32     gravity

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_26:
   \   00000000   0xD0E56042         DC32     0xd0e56042

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_27:
   \   00000000   0x3FC9DB22         DC32     0x3fc9db22

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_28:
   \   00000000   0x........         DC32     g_fGravityAngle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_29:
   \   00000000   0x........         DC32     gyro

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_30:
   \   00000000   0x3FEE6666         DC32     0x3fee6666

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_31:
   \   00000000   0x........         DC32     g_fGyroscopeAngleSpeed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_32:
   \   00000000   0x........         DC32     g_fCarAngle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_33:
   \   00000000   0x........         DC32     g_fGyroscopeAngleIntergral

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_34:
   \   00000000   0x40080000         DC32     0x40080000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_35:
   \   00000000   0x43480000         DC32     0x43480000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_36:
   \   00000000   0x3FB99999         DC32     0x3fb99999

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_37:
   \   00000000   0xEB1C432D         DC32     0xeb1c432d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_38:
   \   00000000   0x3F5A36E2         DC32     0x3f5a36e2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_39:
   \   00000000   0x........         DC32     g_fAngleControlOut

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_40:
   \   00000000   0x3F800001         DC32     0x3f800001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_41:
   \   00000000   0xBF800000         DC32     0xbf800000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_42:
   \   00000000   0x........         DC32     g_fLeftMotorOut

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_43:
   \   00000000   0x........         DC32     g_fRightMotorOut

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_44:
   \   00000000   0x........         DC32     g_lnInputVoltageSigma

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_45:
   \   00000000   0x40039004         DC32     0x40039004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_46:
   \   00000000   0x........         DC32     g_nLeftMotorPulse

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_47:
   \   00000000   0x400B8004         DC32     0x400b8004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_48:
   \   00000000   0x........         DC32     g_nRightMotorPulse
    469            
    470          
    471          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        4  AngleCalculate
              4 -> __aeabi_d2f
              4 -> __aeabi_ddiv
              4 -> __aeabi_dmul
              4 -> __aeabi_f2d
              4 -> __aeabi_fadd
              4 -> __aeabi_fdiv
              4 -> __aeabi_fsub
              4 -> __aeabi_i2d
       12  AngleControl
             12 -> __aeabi_cfcmple
             12 -> __aeabi_cfrcmple
             12 -> __aeabi_d2f
             12 -> __aeabi_dadd
             12 -> __aeabi_dmul
             12 -> __aeabi_f2d
        0  GetInputVoltageAverage
        0  GetleftMotorPulse
        0  GetrightMotorPulse
        8  MotorOutput
              8 -> MotorSpeedOut
              8 -> __aeabi_cfcmple
              8 -> __aeabi_cfrcmple
              8 -> __aeabi_fsub
        8  MotorSpeedOut
              8 -> SetMotorVoltage
              8 -> __aeabi_cfcmple
              8 -> __aeabi_cfrcmple
       16  SetMotorVoltage
             16 -> FTM_PWM_ChangeDuty
             16 -> __aeabi_cfcmple
             16 -> __aeabi_cfrcmple
             16 -> __aeabi_f2iz
             16 -> __aeabi_fmul
             16 -> __aeabi_i2f
       12  SpeedControl
             12 -> __aeabi_cfcmple
             12 -> __aeabi_cfrcmple
             12 -> __aeabi_d2f
             12 -> __aeabi_dadd
             12 -> __aeabi_dmul
             12 -> __aeabi_f2d
             12 -> __aeabi_fadd
             12 -> __aeabi_fsub
             12 -> __aeabi_i2f
        8  SpeedControlOutput
              8 -> __aeabi_fadd
              8 -> __aeabi_fdiv
              8 -> __aeabi_fmul
              8 -> __aeabi_fsub
              8 -> __aeabi_i2f
        8  get_ad
              8 -> hw_ad_ave
        8  pit0_isr
              8 -> AngleCalculate
              8 -> AngleControl
              8 -> GetleftMotorPulse
              8 -> GetrighttMotorPulse
              8 -> MotorOutput
              8 -> SpeedControl
              8 -> SpeedControlOutput
              8 -> get_ad


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_10
       4  ??DataTable11_11
       4  ??DataTable11_12
       4  ??DataTable11_13
       4  ??DataTable11_14
       4  ??DataTable11_15
       4  ??DataTable11_16
       4  ??DataTable11_17
       4  ??DataTable11_18
       4  ??DataTable11_19
       4  ??DataTable11_2
       4  ??DataTable11_20
       4  ??DataTable11_21
       4  ??DataTable11_22
       4  ??DataTable11_23
       4  ??DataTable11_24
       4  ??DataTable11_25
       4  ??DataTable11_26
       4  ??DataTable11_27
       4  ??DataTable11_28
       4  ??DataTable11_29
       4  ??DataTable11_3
       4  ??DataTable11_30
       4  ??DataTable11_31
       4  ??DataTable11_32
       4  ??DataTable11_33
       4  ??DataTable11_34
       4  ??DataTable11_35
       4  ??DataTable11_36
       4  ??DataTable11_37
       4  ??DataTable11_38
       4  ??DataTable11_39
       4  ??DataTable11_4
       4  ??DataTable11_40
       4  ??DataTable11_41
       4  ??DataTable11_42
       4  ??DataTable11_43
       4  ??DataTable11_44
       4  ??DataTable11_45
       4  ??DataTable11_46
       4  ??DataTable11_47
       4  ??DataTable11_48
       4  ??DataTable11_5
       4  ??DataTable11_6
       4  ??DataTable11_7
       4  ??DataTable11_8
       4  ??DataTable11_9
     128  AngleCalculate
      86  AngleControl
      36  GetInputVoltageAverage
      30  GetleftMotorPulse
      30  GetrightMotorPulse
      96  MotorOutput
      72  MotorSpeedOut
       4  SET_SPEED
     194  SetMotorVoltage
     288  SpeedControl
      64  SpeedControlOutput
       4  car_speed
       1  g_1MSEntCnt
       4  g_fAngleControlOut
       4  g_fCarAngle
       4  g_fCarSpeed
       4  g_fDirectionControlOut
       4  g_fDirectionControlOutNew
       4  g_fDirectionControlOutOld
       4  g_fGravityAngle
       4  g_fGyroscopeAngleIntergral
       4  g_fGyroscopeAngleSpeed
       4  g_fLeftMotorOut
       4  g_fRightMotorOut
       4  g_fSpeedControlIntegral
       4  g_fSpeedControlOut
       4  g_fSpeedControlOutNew
       4  g_fSpeedControlOutOld
      20  g_lnInputVoltageSigma
       4  g_n1MSEventCount
       4  g_nDirectionControlCount
       4  g_nDirectionControlPeriod
      20  g_nInputVoltage
       4  g_nLeftMotorPulse
       4  g_nLeftMotorPulseSigma
       4  g_nRightMotorPulse
       4  g_nRightMotorPulseSigma
       4  g_nSpeedControlCount
       1  g_nSpeedControlPeriod
      36  get_ad
       4  gyro_direction
     178  pit0_isr

 
   142 bytes in section .bss
     4 bytes in section .data
 1 434 bytes in section .text
 
 1 434 bytes of CODE memory
   146 bytes of DATA memory

Errors: none
Warnings: none
